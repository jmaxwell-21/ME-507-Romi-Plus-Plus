
ME 507 Term Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000beec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000098c  0800c090  0800c090  0000d090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca1c  0800ca1c  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ca1c  0800ca1c  0000da1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca24  0800ca24  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ca24  0800ca24  0000da24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca2c  0800ca2c  0000da2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ca30  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  200001ec  0800cc1c  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000848  0800cc1c  0000e848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9b6  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004536  00000000  00000000  00029bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0002e108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdc  00000000  00000000  0002f540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2df  00000000  00000000  0003051c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e8b7  00000000  00000000  0004f7fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5082  00000000  00000000  0006e0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063fc  00000000  00000000  00113178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  00119574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c074 	.word	0x0800c074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800c074 	.word	0x0800c074

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <Check_Status>:
 *   @param  BNO_status_t structure that contains status information
 *           STresult, SYSError and SYSStatus
 *
 *   @retval None
 */
void Check_Status(BNO_Status_t *result){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	6078      	str	r0, [r7, #4]
	     Bit 2 = Gyroscope self test
	     Bit 3 = MCU self test

	     0x0F = all good!
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, ST_RESULT_ADDR, 1, &value, 1, 100);
 8000f8c:	2364      	movs	r3, #100	@ 0x64
 8000f8e:	9302      	str	r3, [sp, #8]
 8000f90:	2301      	movs	r3, #1
 8000f92:	9301      	str	r3, [sp, #4]
 8000f94:	f107 030e 	add.w	r3, r7, #14
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2236      	movs	r2, #54	@ 0x36
 8000f9e:	2152      	movs	r1, #82	@ 0x52
 8000fa0:	4827      	ldr	r0, [pc, #156]	@ (8001040 <Check_Status+0xbc>)
 8000fa2:	f004 fe61 	bl	8005c68 <HAL_I2C_Mem_Read>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d002      	beq.n	8000fb6 <Check_Status+0x32>
	    printf("I2C Read Error: ST_RESULT_ADDR\r\n");
 8000fb0:	4824      	ldr	r0, [pc, #144]	@ (8001044 <Check_Status+0xc0>)
 8000fb2:	f009 f8ed 	bl	800a190 <puts>
	}
	HAL_Delay(50);
 8000fb6:	2032      	movs	r0, #50	@ 0x32
 8000fb8:	f003 f96c 	bl	8004294 <HAL_Delay>
	result->STresult = value;
 8000fbc:	7bba      	ldrb	r2, [r7, #14]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	701a      	strb	r2, [r3, #0]
	value=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73bb      	strb	r3, [r7, #14]
	     3 = System Iniitalization
	     4 = Executing Self-Test
	     5 = Sensor fusio algorithm running
	     6 = System running without fusion algorithms
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_STATUS_ADDR, 1, &value, 1, 100);
 8000fc6:	2364      	movs	r3, #100	@ 0x64
 8000fc8:	9302      	str	r3, [sp, #8]
 8000fca:	2301      	movs	r3, #1
 8000fcc:	9301      	str	r3, [sp, #4]
 8000fce:	f107 030e 	add.w	r3, r7, #14
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2239      	movs	r2, #57	@ 0x39
 8000fd8:	2152      	movs	r1, #82	@ 0x52
 8000fda:	4819      	ldr	r0, [pc, #100]	@ (8001040 <Check_Status+0xbc>)
 8000fdc:	f004 fe44 	bl	8005c68 <HAL_I2C_Mem_Read>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <Check_Status+0x6c>
	    printf("I2C Read Error: SYS_STATUS_ADDR\r\n");
 8000fea:	4817      	ldr	r0, [pc, #92]	@ (8001048 <Check_Status+0xc4>)
 8000fec:	f009 f8d0 	bl	800a190 <puts>
	}
	HAL_Delay(50);
 8000ff0:	2032      	movs	r0, #50	@ 0x32
 8000ff2:	f003 f94f 	bl	8004294 <HAL_Delay>
	result->SYSStatus = value;
 8000ff6:	7bba      	ldrb	r2, [r7, #14]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	709a      	strb	r2, [r3, #2]
	value=0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73bb      	strb	r3, [r7, #14]
	     7 = BNO low power mode not available for selected operation mode
	     8 = Accelerometer power mode not available
	     9 = Fusion algorithm configuration error
	     A = Sensor configuration error
	   */
	status = HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_ERR_ADDR, 1, &value, 1, 100);
 8001000:	2364      	movs	r3, #100	@ 0x64
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2301      	movs	r3, #1
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	f107 030e 	add.w	r3, r7, #14
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2301      	movs	r3, #1
 8001010:	223a      	movs	r2, #58	@ 0x3a
 8001012:	2152      	movs	r1, #82	@ 0x52
 8001014:	480a      	ldr	r0, [pc, #40]	@ (8001040 <Check_Status+0xbc>)
 8001016:	f004 fe27 	bl	8005c68 <HAL_I2C_Mem_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK) {
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d002      	beq.n	800102a <Check_Status+0xa6>
	    printf("I2C Read Error: SYS_ERR_ADDR\r\n");
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <Check_Status+0xc8>)
 8001026:	f009 f8b3 	bl	800a190 <puts>
	}
	HAL_Delay(50);
 800102a:	2032      	movs	r0, #50	@ 0x32
 800102c:	f003 f932 	bl	8004294 <HAL_Delay>
	result->SYSError = value;
 8001030:	7bba      	ldrb	r2, [r7, #14]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	705a      	strb	r2, [r3, #1]
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000250 	.word	0x20000250
 8001044:	0800c090 	.word	0x0800c090
 8001048:	0800c0b0 	.word	0x0800c0b0
 800104c:	0800c0d4 	.word	0x0800c0d4

08001050 <SelectPage>:
 * 			[PAGE_0
 * 			 PAGE_1]
 *
 * 	 @retval None
 */
void SelectPage(uint8_t page){
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af04      	add	r7, sp, #16
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]

	if(HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PAGE_ID_ADDR, 1, &page, 1, 100) != HAL_OK){
 800105a:	2364      	movs	r3, #100	@ 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	2207      	movs	r2, #7
 800106a:	2152      	movs	r1, #82	@ 0x52
 800106c:	4807      	ldr	r0, [pc, #28]	@ (800108c <SelectPage+0x3c>)
 800106e:	f004 fd01 	bl	8005a74 <HAL_I2C_Mem_Write>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <SelectPage+0x2e>
		printf("Register page replacement could not be set\r\n");
 8001078:	4805      	ldr	r0, [pc, #20]	@ (8001090 <SelectPage+0x40>)
 800107a:	f009 f889 	bl	800a190 <puts>
	}
	HAL_Delay(50);
 800107e:	2032      	movs	r0, #50	@ 0x32
 8001080:	f003 f908 	bl	8004294 <HAL_Delay>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000250 	.word	0x20000250
 8001090:	0800c0f4 	.word	0x0800c0f4

08001094 <ResetBNO055>:
  *
  * @param  None
  *
  * @retval None
  */
void ResetBNO055(void){
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af04      	add	r7, sp, #16

	uint8_t reset = 0x20;
 800109a:	2320      	movs	r3, #32
 800109c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &reset, 1, 100);
 800109e:	2364      	movs	r3, #100	@ 0x64
 80010a0:	9302      	str	r3, [sp, #8]
 80010a2:	2301      	movs	r3, #1
 80010a4:	9301      	str	r3, [sp, #4]
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	9300      	str	r3, [sp, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	223f      	movs	r2, #63	@ 0x3f
 80010ae:	2152      	movs	r1, #82	@ 0x52
 80010b0:	4812      	ldr	r0, [pc, #72]	@ (80010fc <ResetBNO055+0x68>)
 80010b2:	f004 fcdf 	bl	8005a74 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80010b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010ba:	f003 f8eb 	bl	8004294 <HAL_Delay>

	//Checking for is reset process done
	uint8_t chip_id=0;
 80010be:	2300      	movs	r3, #0
 80010c0:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, CHIP_ID_ADDR, 1, &chip_id, 1, 100);
 80010c2:	2364      	movs	r3, #100	@ 0x64
 80010c4:	9302      	str	r3, [sp, #8]
 80010c6:	2301      	movs	r3, #1
 80010c8:	9301      	str	r3, [sp, #4]
 80010ca:	1dbb      	adds	r3, r7, #6
 80010cc:	9300      	str	r3, [sp, #0]
 80010ce:	2301      	movs	r3, #1
 80010d0:	2200      	movs	r2, #0
 80010d2:	2152      	movs	r1, #82	@ 0x52
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <ResetBNO055+0x68>)
 80010d6:	f004 fdc7 	bl	8005c68 <HAL_I2C_Mem_Read>

	//If value of id register is not equal to BNO055 chip id which is 0xA0, wait until equal to each other
	while(chip_id != BNO055_ID) {
 80010da:	e006      	b.n	80010ea <ResetBNO055+0x56>
		printf("BNO055-> Undefined chip id\r\n");
 80010dc:	4808      	ldr	r0, [pc, #32]	@ (8001100 <ResetBNO055+0x6c>)
 80010de:	f009 f857 	bl	800a190 <puts>
		HAL_Delay(500);
 80010e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010e6:	f003 f8d5 	bl	8004294 <HAL_Delay>
	while(chip_id != BNO055_ID) {
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	2ba0      	cmp	r3, #160	@ 0xa0
 80010ee:	d1f5      	bne.n	80010dc <ResetBNO055+0x48>
	}
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000250 	.word	0x20000250
 8001100:	0800c120 	.word	0x0800c120

08001104 <ReadData>:
 *			 SENSOR_GRAVITY
 *			 SENSOR_QUATERNION]
 *
 *   @retval Structure containing the values ​​of the read data
 */
void ReadData(BNO055_Sensors_t *sensorData,BNO055_Sensor_Type sensors){
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af04      	add	r7, sp, #16
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	70fb      	strb	r3, [r7, #3]


	   uint8_t buffer[8];

	    if (sensors & SENSOR_GRAVITY) {
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	d05f      	beq.n	80011da <ReadData+0xd6>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GRAVITY, 1, buffer, 6, HAL_MAX_DELAY);
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	9302      	str	r3, [sp, #8]
 8001120:	2306      	movs	r3, #6
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2301      	movs	r3, #1
 800112c:	222e      	movs	r2, #46	@ 0x2e
 800112e:	2152      	movs	r1, #82	@ 0x52
 8001130:	48b7      	ldr	r0, [pc, #732]	@ (8001410 <ReadData+0x30c>)
 8001132:	f004 fd99 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->Gravity.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 8001136:	7a7b      	ldrb	r3, [r7, #9]
 8001138:	b21b      	sxth	r3, r3
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b21a      	sxth	r2, r3
 800113e:	7a3b      	ldrb	r3, [r7, #8]
 8001140:	b21b      	sxth	r3, r3
 8001142:	4313      	orrs	r3, r2
 8001144:	b21b      	sxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f9f4 	bl	8000534 <__aeabi_i2d>
 800114c:	f04f 0200 	mov.w	r2, #0
 8001150:	4bb0      	ldr	r3, [pc, #704]	@ (8001414 <ReadData+0x310>)
 8001152:	f7ff fb83 	bl	800085c <__aeabi_ddiv>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fd2b 	bl	8000bb8 <__aeabi_d2f>
 8001162:	4602      	mov	r2, r0
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	63da      	str	r2, [r3, #60]	@ 0x3c
	        sensorData->Gravity.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	b21b      	sxth	r3, r3
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7abb      	ldrb	r3, [r7, #10]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9db 	bl	8000534 <__aeabi_i2d>
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4ba4      	ldr	r3, [pc, #656]	@ (8001414 <ReadData+0x310>)
 8001184:	f7ff fb6a 	bl	800085c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd12 	bl	8000bb8 <__aeabi_d2f>
 8001194:	4602      	mov	r2, r0
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40
	        sensorData->Gravity.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	b21b      	sxth	r3, r3
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	7b3b      	ldrb	r3, [r7, #12]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff f9c2 	bl	8000534 <__aeabi_i2d>
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b97      	ldr	r3, [pc, #604]	@ (8001414 <ReadData+0x310>)
 80011b6:	f7ff fb51 	bl	800085c <__aeabi_ddiv>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fcf9 	bl	8000bb8 <__aeabi_d2f>
 80011c6:	4602      	mov	r2, r0
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	645a      	str	r2, [r3, #68]	@ 0x44
	        memset(buffer, 0, sizeof(buffer));
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2208      	movs	r2, #8
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f009 f8bb 	bl	800a350 <memset>
	    }

	    if (sensors & SENSOR_QUATERNION) {
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d06c      	beq.n	80012be <ReadData+0x1ba>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_QUATERNION, 1, buffer, 8, HAL_MAX_DELAY);
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2308      	movs	r3, #8
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2301      	movs	r3, #1
 80011f6:	2220      	movs	r2, #32
 80011f8:	2152      	movs	r1, #82	@ 0x52
 80011fa:	4885      	ldr	r0, [pc, #532]	@ (8001410 <ReadData+0x30c>)
 80011fc:	f004 fd34 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->Quaternion.W = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/(1<<14));
 8001200:	7a7b      	ldrb	r3, [r7, #9]
 8001202:	b21b      	sxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b21a      	sxth	r2, r3
 8001208:	7a3b      	ldrb	r3, [r7, #8]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	da02      	bge.n	800121a <ReadData+0x116>
 8001214:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001218:	333f      	adds	r3, #63	@ 0x3f
 800121a:	139b      	asrs	r3, r3, #14
 800121c:	b21b      	sxth	r3, r3
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	        sensorData->Quaternion.X = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/(1<<14));
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	b21b      	sxth	r3, r3
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7abb      	ldrb	r3, [r7, #10]
 8001236:	b21b      	sxth	r3, r3
 8001238:	4313      	orrs	r3, r2
 800123a:	b21b      	sxth	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	da02      	bge.n	8001246 <ReadData+0x142>
 8001240:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001244:	333f      	adds	r3, #63	@ 0x3f
 8001246:	139b      	asrs	r3, r3, #14
 8001248:	b21b      	sxth	r3, r3
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	        sensorData->Quaternion.Y = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/(1<<14));
 8001258:	7b7b      	ldrb	r3, [r7, #13]
 800125a:	b21b      	sxth	r3, r3
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	7b3b      	ldrb	r3, [r7, #12]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21b      	sxth	r3, r3
 8001268:	2b00      	cmp	r3, #0
 800126a:	da02      	bge.n	8001272 <ReadData+0x16e>
 800126c:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 8001270:	333f      	adds	r3, #63	@ 0x3f
 8001272:	139b      	asrs	r3, r3, #14
 8001274:	b21b      	sxth	r3, r3
 8001276:	ee07 3a90 	vmov	s15, r3
 800127a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	        sensorData->Quaternion.Z = (float)(((int16_t)((buffer[7] << 8) | buffer[6]))/(1<<14));
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	b21b      	sxth	r3, r3
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	b21b      	sxth	r3, r3
 8001290:	4313      	orrs	r3, r2
 8001292:	b21b      	sxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	da02      	bge.n	800129e <ReadData+0x19a>
 8001298:	f503 537f 	add.w	r3, r3, #16320	@ 0x3fc0
 800129c:	333f      	adds	r3, #63	@ 0x3f
 800129e:	139b      	asrs	r3, r3, #14
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
	        memset(buffer, 0, sizeof(buffer));
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2208      	movs	r2, #8
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 f849 	bl	800a350 <memset>
	    }

	    if (sensors & SENSOR_LINACC) {
 80012be:	78fb      	ldrb	r3, [r7, #3]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d05f      	beq.n	8001388 <ReadData+0x284>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_LINACC, 1, buffer, 6, HAL_MAX_DELAY);
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2306      	movs	r3, #6
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 0308 	add.w	r3, r7, #8
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	2228      	movs	r2, #40	@ 0x28
 80012dc:	2152      	movs	r1, #82	@ 0x52
 80012de:	484c      	ldr	r0, [pc, #304]	@ (8001410 <ReadData+0x30c>)
 80012e0:	f004 fcc2 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->LineerAcc.X = (float)(((int16_t)((buffer[1] << 8) | buffer[0]))/100.0);
 80012e4:	7a7b      	ldrb	r3, [r7, #9]
 80012e6:	b21b      	sxth	r3, r3
 80012e8:	021b      	lsls	r3, r3, #8
 80012ea:	b21a      	sxth	r2, r3
 80012ec:	7a3b      	ldrb	r3, [r7, #8]
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	4313      	orrs	r3, r2
 80012f2:	b21b      	sxth	r3, r3
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f91d 	bl	8000534 <__aeabi_i2d>
 80012fa:	f04f 0200 	mov.w	r2, #0
 80012fe:	4b45      	ldr	r3, [pc, #276]	@ (8001414 <ReadData+0x310>)
 8001300:	f7ff faac 	bl	800085c <__aeabi_ddiv>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	f7ff fc54 	bl	8000bb8 <__aeabi_d2f>
 8001310:	4602      	mov	r2, r0
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	631a      	str	r2, [r3, #48]	@ 0x30
	        sensorData->LineerAcc.Y = (float)(((int16_t)((buffer[3] << 8) | buffer[2]))/100.0);
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	b21b      	sxth	r3, r3
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	b21a      	sxth	r2, r3
 800131e:	7abb      	ldrb	r3, [r7, #10]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	b21b      	sxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f904 	bl	8000534 <__aeabi_i2d>
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b38      	ldr	r3, [pc, #224]	@ (8001414 <ReadData+0x310>)
 8001332:	f7ff fa93 	bl	800085c <__aeabi_ddiv>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc3b 	bl	8000bb8 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	635a      	str	r2, [r3, #52]	@ 0x34
	        sensorData->LineerAcc.Z = (float)(((int16_t)((buffer[5] << 8) | buffer[4]))/100.0);
 8001348:	7b7b      	ldrb	r3, [r7, #13]
 800134a:	b21b      	sxth	r3, r3
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8eb 	bl	8000534 <__aeabi_i2d>
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b2c      	ldr	r3, [pc, #176]	@ (8001414 <ReadData+0x310>)
 8001364:	f7ff fa7a 	bl	800085c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc22 	bl	8000bb8 <__aeabi_d2f>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	639a      	str	r2, [r3, #56]	@ 0x38
	        memset(buffer, 0, sizeof(buffer));
 800137a:	f107 0308 	add.w	r3, r7, #8
 800137e:	2208      	movs	r2, #8
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f008 ffe4 	bl	800a350 <memset>
	    }

	    if (sensors & SENSOR_GYRO) {
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	d066      	beq.n	8001460 <ReadData+0x35c>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_GYRO, 1, buffer, 6, HAL_MAX_DELAY);
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	2306      	movs	r3, #6
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2301      	movs	r3, #1
 80013a4:	2214      	movs	r2, #20
 80013a6:	2152      	movs	r1, #82	@ 0x52
 80013a8:	4819      	ldr	r0, [pc, #100]	@ (8001410 <ReadData+0x30c>)
 80013aa:	f004 fc5d 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->Gyro.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 80013ae:	7a7b      	ldrb	r3, [r7, #9]
 80013b0:	b21b      	sxth	r3, r3
 80013b2:	021b      	lsls	r3, r3, #8
 80013b4:	b21a      	sxth	r2, r3
 80013b6:	7a3b      	ldrb	r3, [r7, #8]
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b21b      	sxth	r3, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff f8b8 	bl	8000534 <__aeabi_i2d>
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <ReadData+0x314>)
 80013ca:	f7ff fa47 	bl	800085c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fbef 	bl	8000bb8 <__aeabi_d2f>
 80013da:	4602      	mov	r2, r0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60da      	str	r2, [r3, #12]
	        sensorData->Gyro.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 80013e0:	7afb      	ldrb	r3, [r7, #11]
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	021b      	lsls	r3, r3, #8
 80013e6:	b21a      	sxth	r2, r3
 80013e8:	7abb      	ldrb	r3, [r7, #10]
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f89f 	bl	8000534 <__aeabi_i2d>
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <ReadData+0x314>)
 80013fc:	f7ff fa2e 	bl	800085c <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	f7ff fbd6 	bl	8000bb8 <__aeabi_d2f>
 800140c:	4602      	mov	r2, r0
 800140e:	e005      	b.n	800141c <ReadData+0x318>
 8001410:	20000250 	.word	0x20000250
 8001414:	40590000 	.word	0x40590000
 8001418:	40300000 	.word	0x40300000
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	611a      	str	r2, [r3, #16]
	        sensorData->Gyro.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 8001420:	7b7b      	ldrb	r3, [r7, #13]
 8001422:	b21b      	sxth	r3, r3
 8001424:	021b      	lsls	r3, r3, #8
 8001426:	b21a      	sxth	r2, r3
 8001428:	7b3b      	ldrb	r3, [r7, #12]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f87f 	bl	8000534 <__aeabi_i2d>
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4ba3      	ldr	r3, [pc, #652]	@ (80016c8 <ReadData+0x5c4>)
 800143c:	f7ff fa0e 	bl	800085c <__aeabi_ddiv>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbb6 	bl	8000bb8 <__aeabi_d2f>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	615a      	str	r2, [r3, #20]
	        memset(buffer, 0, sizeof(buffer));
 8001452:	f107 0308 	add.w	r3, r7, #8
 8001456:	2208      	movs	r2, #8
 8001458:	2100      	movs	r1, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f008 ff78 	bl	800a350 <memset>
	    }
	    if (sensors & SENSOR_ACCEL) {
 8001460:	78fb      	ldrb	r3, [r7, #3]
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	2b00      	cmp	r3, #0
 8001468:	d05f      	beq.n	800152a <ReadData+0x426>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_ACCEL, 1, buffer, 6, HAL_MAX_DELAY);
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	2306      	movs	r3, #6
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2301      	movs	r3, #1
 800147c:	2208      	movs	r2, #8
 800147e:	2152      	movs	r1, #82	@ 0x52
 8001480:	4892      	ldr	r0, [pc, #584]	@ (80016cc <ReadData+0x5c8>)
 8001482:	f004 fbf1 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->Accel.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/100.0);
 8001486:	7a7b      	ldrb	r3, [r7, #9]
 8001488:	b21b      	sxth	r3, r3
 800148a:	021b      	lsls	r3, r3, #8
 800148c:	b21a      	sxth	r2, r3
 800148e:	7a3b      	ldrb	r3, [r7, #8]
 8001490:	b21b      	sxth	r3, r3
 8001492:	4313      	orrs	r3, r2
 8001494:	b21b      	sxth	r3, r3
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f84c 	bl	8000534 <__aeabi_i2d>
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b8b      	ldr	r3, [pc, #556]	@ (80016d0 <ReadData+0x5cc>)
 80014a2:	f7ff f9db 	bl	800085c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fb83 	bl	8000bb8 <__aeabi_d2f>
 80014b2:	4602      	mov	r2, r0
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]
	        sensorData->Accel.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/100.0);
 80014b8:	7afb      	ldrb	r3, [r7, #11]
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	b21a      	sxth	r2, r3
 80014c0:	7abb      	ldrb	r3, [r7, #10]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	4313      	orrs	r3, r2
 80014c6:	b21b      	sxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff f833 	bl	8000534 <__aeabi_i2d>
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	4b7f      	ldr	r3, [pc, #508]	@ (80016d0 <ReadData+0x5cc>)
 80014d4:	f7ff f9c2 	bl	800085c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb6a 	bl	8000bb8 <__aeabi_d2f>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	605a      	str	r2, [r3, #4]
	        sensorData->Accel.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/100.0);
 80014ea:	7b7b      	ldrb	r3, [r7, #13]
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	7b3b      	ldrb	r3, [r7, #12]
 80014f4:	b21b      	sxth	r3, r3
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff f81a 	bl	8000534 <__aeabi_i2d>
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	4b72      	ldr	r3, [pc, #456]	@ (80016d0 <ReadData+0x5cc>)
 8001506:	f7ff f9a9 	bl	800085c <__aeabi_ddiv>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	f7ff fb51 	bl	8000bb8 <__aeabi_d2f>
 8001516:	4602      	mov	r2, r0
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	609a      	str	r2, [r3, #8]
	        memset(buffer, 0, sizeof(buffer));
 800151c:	f107 0308 	add.w	r3, r7, #8
 8001520:	2208      	movs	r2, #8
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f008 ff13 	bl	800a350 <memset>
	    }
	    if (sensors & SENSOR_MAG) {
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	f003 0320 	and.w	r3, r3, #32
 8001530:	2b00      	cmp	r3, #0
 8001532:	d05f      	beq.n	80015f4 <ReadData+0x4f0>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_MAG, 1, buffer, 6, HAL_MAX_DELAY);
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	9302      	str	r3, [sp, #8]
 800153a:	2306      	movs	r3, #6
 800153c:	9301      	str	r3, [sp, #4]
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	2301      	movs	r3, #1
 8001546:	220e      	movs	r2, #14
 8001548:	2152      	movs	r1, #82	@ 0x52
 800154a:	4860      	ldr	r0, [pc, #384]	@ (80016cc <ReadData+0x5c8>)
 800154c:	f004 fb8c 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->Magneto.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 8001550:	7a7b      	ldrb	r3, [r7, #9]
 8001552:	b21b      	sxth	r3, r3
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	7a3b      	ldrb	r3, [r7, #8]
 800155a:	b21b      	sxth	r3, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	b21b      	sxth	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffe7 	bl	8000534 <__aeabi_i2d>
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b57      	ldr	r3, [pc, #348]	@ (80016c8 <ReadData+0x5c4>)
 800156c:	f7ff f976 	bl	800085c <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb1e 	bl	8000bb8 <__aeabi_d2f>
 800157c:	4602      	mov	r2, r0
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	619a      	str	r2, [r3, #24]
	        sensorData->Magneto.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 8001582:	7afb      	ldrb	r3, [r7, #11]
 8001584:	b21b      	sxth	r3, r3
 8001586:	021b      	lsls	r3, r3, #8
 8001588:	b21a      	sxth	r2, r3
 800158a:	7abb      	ldrb	r3, [r7, #10]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21b      	sxth	r3, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffce 	bl	8000534 <__aeabi_i2d>
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b4a      	ldr	r3, [pc, #296]	@ (80016c8 <ReadData+0x5c4>)
 800159e:	f7ff f95d 	bl	800085c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fb05 	bl	8000bb8 <__aeabi_d2f>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	61da      	str	r2, [r3, #28]
	        sensorData->Magneto.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 80015b4:	7b7b      	ldrb	r3, [r7, #13]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	021b      	lsls	r3, r3, #8
 80015ba:	b21a      	sxth	r2, r3
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	b21b      	sxth	r3, r3
 80015c0:	4313      	orrs	r3, r2
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7fe ffb5 	bl	8000534 <__aeabi_i2d>
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <ReadData+0x5c4>)
 80015d0:	f7ff f944 	bl	800085c <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff faec 	bl	8000bb8 <__aeabi_d2f>
 80015e0:	4602      	mov	r2, r0
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	621a      	str	r2, [r3, #32]
	        memset(buffer, 0, sizeof(buffer));
 80015e6:	f107 0308 	add.w	r3, r7, #8
 80015ea:	2208      	movs	r2, #8
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 feae 	bl	800a350 <memset>
	    }
	    if (sensors & SENSOR_EULER) {
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d05f      	beq.n	80016be <ReadData+0x5ba>

	    	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, BNO_EULER, 1, buffer, 6, HAL_MAX_DELAY);
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	2306      	movs	r3, #6
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2301      	movs	r3, #1
 8001610:	221a      	movs	r2, #26
 8001612:	2152      	movs	r1, #82	@ 0x52
 8001614:	482d      	ldr	r0, [pc, #180]	@ (80016cc <ReadData+0x5c8>)
 8001616:	f004 fb27 	bl	8005c68 <HAL_I2C_Mem_Read>
	        sensorData->Euler.X = (float)(((int16_t) ((buffer[1] << 8) | buffer[0]))/16.0);
 800161a:	7a7b      	ldrb	r3, [r7, #9]
 800161c:	b21b      	sxth	r3, r3
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7a3b      	ldrb	r3, [r7, #8]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21b      	sxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ff82 	bl	8000534 <__aeabi_i2d>
 8001630:	f04f 0200 	mov.w	r2, #0
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <ReadData+0x5c4>)
 8001636:	f7ff f911 	bl	800085c <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fab9 	bl	8000bb8 <__aeabi_d2f>
 8001646:	4602      	mov	r2, r0
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	625a      	str	r2, [r3, #36]	@ 0x24
	        sensorData->Euler.Y = (float)(((int16_t) ((buffer[3] << 8) | buffer[2]))/16.0);
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	b21b      	sxth	r3, r3
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	7abb      	ldrb	r3, [r7, #10]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21b      	sxth	r3, r3
 800165c:	4618      	mov	r0, r3
 800165e:	f7fe ff69 	bl	8000534 <__aeabi_i2d>
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b18      	ldr	r3, [pc, #96]	@ (80016c8 <ReadData+0x5c4>)
 8001668:	f7ff f8f8 	bl	800085c <__aeabi_ddiv>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f7ff faa0 	bl	8000bb8 <__aeabi_d2f>
 8001678:	4602      	mov	r2, r0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
	        sensorData->Euler.Z = (float)(((int16_t) ((buffer[5] << 8) | buffer[4]))/16.0);
 800167e:	7b7b      	ldrb	r3, [r7, #13]
 8001680:	b21b      	sxth	r3, r3
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	b21a      	sxth	r2, r3
 8001686:	7b3b      	ldrb	r3, [r7, #12]
 8001688:	b21b      	sxth	r3, r3
 800168a:	4313      	orrs	r3, r2
 800168c:	b21b      	sxth	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff50 	bl	8000534 <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <ReadData+0x5c4>)
 800169a:	f7ff f8df 	bl	800085c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff fa87 	bl	8000bb8 <__aeabi_d2f>
 80016aa:	4602      	mov	r2, r0
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	        memset(buffer, 0, sizeof(buffer));
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2208      	movs	r2, #8
 80016b6:	2100      	movs	r1, #0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 fe49 	bl	800a350 <memset>
	    }
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40300000 	.word	0x40300000
 80016cc:	20000250 	.word	0x20000250
 80016d0:	40590000 	.word	0x40590000

080016d4 <Set_Operation_Mode>:
 *            NDOF_FMC_OFF
 *            NDOF]
 *
 *  @retval None
 */
void Set_Operation_Mode(Op_Modes_t Mode){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af04      	add	r7, sp, #16
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]

	SelectPage(PAGE_0);
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fcb6 	bl	8001050 <SelectPage>
	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &Mode, 1, 100) !=HAL_OK){
 80016e4:	2364      	movs	r3, #100	@ 0x64
 80016e6:	9302      	str	r3, [sp, #8]
 80016e8:	2301      	movs	r3, #1
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	1dfb      	adds	r3, r7, #7
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	223d      	movs	r2, #61	@ 0x3d
 80016f4:	2152      	movs	r1, #82	@ 0x52
 80016f6:	480d      	ldr	r0, [pc, #52]	@ (800172c <Set_Operation_Mode+0x58>)
 80016f8:	f004 f9bc 	bl	8005a74 <HAL_I2C_Mem_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <Set_Operation_Mode+0x36>
		printf("Operation mode could not be set!\r\n");
 8001702:	480b      	ldr	r0, [pc, #44]	@ (8001730 <Set_Operation_Mode+0x5c>)
 8001704:	f008 fd44 	bl	800a190 <puts>
 8001708:	e002      	b.n	8001710 <Set_Operation_Mode+0x3c>
	}
	else printf("Operation mode switching succeeded.\r\n");
 800170a:	480a      	ldr	r0, [pc, #40]	@ (8001734 <Set_Operation_Mode+0x60>)
 800170c:	f008 fd40 	bl	800a190 <puts>

	if(Mode == CONFIG_MODE) HAL_Delay(19);
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <Set_Operation_Mode+0x4a>
 8001716:	2013      	movs	r0, #19
 8001718:	f002 fdbc 	bl	8004294 <HAL_Delay>

	else HAL_Delay(9);

}
 800171c:	e002      	b.n	8001724 <Set_Operation_Mode+0x50>
	else HAL_Delay(9);
 800171e:	2009      	movs	r0, #9
 8001720:	f002 fdb8 	bl	8004294 <HAL_Delay>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000250 	.word	0x20000250
 8001730:	0800c13c 	.word	0x0800c13c
 8001734:	0800c160 	.word	0x0800c160

08001738 <SetPowerMODE>:
 *            BNO055_LOWPOWER_MODE
 *            BNO055_SUSPEND_MODE]
 *
 *  @retval None
 */
void SetPowerMODE(uint8_t BNO055_){
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af04      	add	r7, sp, #16
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]

	if(	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, PWR_MODE_ADDR, 1, &BNO055_, 1, 100) != HAL_OK)
 8001742:	2364      	movs	r3, #100	@ 0x64
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2301      	movs	r3, #1
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	1dfb      	adds	r3, r7, #7
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	223e      	movs	r2, #62	@ 0x3e
 8001752:	2152      	movs	r1, #82	@ 0x52
 8001754:	4809      	ldr	r0, [pc, #36]	@ (800177c <SetPowerMODE+0x44>)
 8001756:	f004 f98d 	bl	8005a74 <HAL_I2C_Mem_Write>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <SetPowerMODE+0x30>
	{
		printf("Power mode could not be set!\r\n");
 8001760:	4807      	ldr	r0, [pc, #28]	@ (8001780 <SetPowerMODE+0x48>)
 8001762:	f008 fd15 	bl	800a190 <puts>
 8001766:	e002      	b.n	800176e <SetPowerMODE+0x36>
	}
	else
	{
		printf("Power mode switching succeeded.\r\n");
 8001768:	4806      	ldr	r0, [pc, #24]	@ (8001784 <SetPowerMODE+0x4c>)
 800176a:	f008 fd11 	bl	800a190 <puts>
	}
	HAL_Delay(50);
 800176e:	2032      	movs	r0, #50	@ 0x32
 8001770:	f002 fd90 	bl	8004294 <HAL_Delay>

}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000250 	.word	0x20000250
 8001780:	0800c188 	.word	0x0800c188
 8001784:	0800c1a8 	.word	0x0800c1a8

08001788 <Clock_Source>:
 *           [CLOCK_EXTERNAL
 *            CLOCK_INTERNAL]
 *
 *  @retval None
 */
void Clock_Source(uint8_t source) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af04      	add	r7, sp, #16
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]

	//7th bit: External Crystal=1; Internal Crystal=0
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, SYS_TRIGGER_ADDR, 1, &source, sizeof(source), 100);
 8001792:	2364      	movs	r3, #100	@ 0x64
 8001794:	9302      	str	r3, [sp, #8]
 8001796:	2301      	movs	r3, #1
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	1dfb      	adds	r3, r7, #7
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	2301      	movs	r3, #1
 80017a0:	223f      	movs	r2, #63	@ 0x3f
 80017a2:	2152      	movs	r1, #82	@ 0x52
 80017a4:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <Clock_Source+0x2c>)
 80017a6:	f004 f965 	bl	8005a74 <HAL_I2C_Mem_Write>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000250 	.word	0x20000250

080017b8 <BNO055_Axis>:
 *  @param  remapcode and signcode
 *         	Default Parameters:[DEFAULT_AXIS_REMAP(0x24), DEFAULT_AXIS_SIGN(0x00)]
 *
 *  @retval None
 */
void BNO055_Axis(uint8_t remap, uint8_t sign){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af04      	add	r7, sp, #16
 80017be:	4603      	mov	r3, r0
 80017c0:	460a      	mov	r2, r1
 80017c2:	71fb      	strb	r3, [r7, #7]
 80017c4:	4613      	mov	r3, r2
 80017c6:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Write(&bno_i2c,P_BNO055, AXIS_MAP_CONFIG_ADDR, 1, &remap, 1, 100);
 80017c8:	2364      	movs	r3, #100	@ 0x64
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2301      	movs	r3, #1
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2301      	movs	r3, #1
 80017d6:	2241      	movs	r2, #65	@ 0x41
 80017d8:	2152      	movs	r1, #82	@ 0x52
 80017da:	480c      	ldr	r0, [pc, #48]	@ (800180c <BNO055_Axis+0x54>)
 80017dc:	f004 f94a 	bl	8005a74 <HAL_I2C_Mem_Write>
	HAL_Delay(20);
 80017e0:	2014      	movs	r0, #20
 80017e2:	f002 fd57 	bl	8004294 <HAL_Delay>
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, AXIS_MAP_SIGN_ADDR, 1, &sign, 1, 100);
 80017e6:	2364      	movs	r3, #100	@ 0x64
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	2301      	movs	r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	1dbb      	adds	r3, r7, #6
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	2301      	movs	r3, #1
 80017f4:	2242      	movs	r2, #66	@ 0x42
 80017f6:	2152      	movs	r1, #82	@ 0x52
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <BNO055_Axis+0x54>)
 80017fa:	f004 f93b 	bl	8005a74 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80017fe:	2064      	movs	r0, #100	@ 0x64
 8001800:	f002 fd48 	bl	8004294 <HAL_Delay>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000250 	.word	0x20000250

08001810 <SET_Accel_Range>:
 *            Range_8G
 *            Range_16G]
 *
 *  @retval None
 */
void SET_Accel_Range(uint8_t range){
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af04      	add	r7, sp, #16
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]

	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_CONFIG_ADDR, 1, &range, 1, 100);
 800181a:	2364      	movs	r3, #100	@ 0x64
 800181c:	9302      	str	r3, [sp, #8]
 800181e:	2301      	movs	r3, #1
 8001820:	9301      	str	r3, [sp, #4]
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	9300      	str	r3, [sp, #0]
 8001826:	2301      	movs	r3, #1
 8001828:	2208      	movs	r2, #8
 800182a:	2152      	movs	r1, #82	@ 0x52
 800182c:	4804      	ldr	r0, [pc, #16]	@ (8001840 <SET_Accel_Range+0x30>)
 800182e:	f004 f921 	bl	8005a74 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 8001832:	2064      	movs	r0, #100	@ 0x64
 8001834:	f002 fd2e 	bl	8004294 <HAL_Delay>

}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000250 	.word	0x20000250

08001844 <BNO055_Init>:
  * @param  Init argument to a BNO055_Init_t structure that contains
  *         the configuration information for the BNO055 device.
  *
  * @retval None
  */
void BNO055_Init(BNO055_Init_t Init){
 8001844:	b580      	push	{r7, lr}
 8001846:	b088      	sub	sp, #32
 8001848:	af04      	add	r7, sp, #16
 800184a:	463b      	mov	r3, r7
 800184c:	e883 0003 	stmia.w	r3, {r0, r1}

	//Set operation mode to config_mode for initialize all register
	Set_Operation_Mode(CONFIG_MODE);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff3f 	bl	80016d4 <Set_Operation_Mode>
	HAL_Delay(50);
 8001856:	2032      	movs	r0, #50	@ 0x32
 8001858:	f002 fd1c 	bl	8004294 <HAL_Delay>
	/*
	 * Set register page number to 1
	 * Configure Accelerometer range
	 */
	SelectPage(PAGE_1);
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff fbf7 	bl	8001050 <SelectPage>
	SET_Accel_Range(Init.ACC_Range);
 8001862:	79bb      	ldrb	r3, [r7, #6]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ffd3 	bl	8001810 <SET_Accel_Range>
	HAL_Delay(50);
 800186a:	2032      	movs	r0, #50	@ 0x32
 800186c:	f002 fd12 	bl	8004294 <HAL_Delay>

	//Set register page number to 0
	SelectPage(PAGE_0);
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fbed 	bl	8001050 <SelectPage>
	HAL_Delay(50);
 8001876:	2032      	movs	r0, #50	@ 0x32
 8001878:	f002 fd0c 	bl	8004294 <HAL_Delay>

	//Read clock status. If status=0 then it is free to configure the clock source
	uint8_t status;
	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, SYS_CLK_STATUS_ADDR, 1, &status, 1, 100);
 800187c:	2364      	movs	r3, #100	@ 0x64
 800187e:	9302      	str	r3, [sp, #8]
 8001880:	2301      	movs	r3, #1
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	f107 030f 	add.w	r3, r7, #15
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	2238      	movs	r2, #56	@ 0x38
 800188e:	2152      	movs	r1, #82	@ 0x52
 8001890:	481e      	ldr	r0, [pc, #120]	@ (800190c <BNO055_Init+0xc8>)
 8001892:	f004 f9e9 	bl	8005c68 <HAL_I2C_Mem_Read>
	HAL_Delay(50);
 8001896:	2032      	movs	r0, #50	@ 0x32
 8001898:	f002 fcfc 	bl	8004294 <HAL_Delay>
	//Checking if the status bit is 0
	if(status == 0)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <BNO055_Init+0x6c>
	{
		//Changing clock source
		Clock_Source(Init.Clock_Source);
 80018a2:	797b      	ldrb	r3, [r7, #5]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff6f 	bl	8001788 <Clock_Source>
		HAL_Delay(100);
 80018aa:	2064      	movs	r0, #100	@ 0x64
 80018ac:	f002 fcf2 	bl	8004294 <HAL_Delay>
	}

	//Configure axis remapping and signing
	BNO055_Axis(Init.Axis, Init.Axis_sign);
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	78ba      	ldrb	r2, [r7, #2]
 80018b4:	4611      	mov	r1, r2
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff ff7e 	bl	80017b8 <BNO055_Axis>
	HAL_Delay(100);
 80018bc:	2064      	movs	r0, #100	@ 0x64
 80018be:	f002 fce9 	bl	8004294 <HAL_Delay>

	//Configure data output format and the measurement unit
	HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, UNIT_SEL_ADDR, 1, &Init.Unit_Sel, sizeof(Init.Unit_Sel), 100);
 80018c2:	2364      	movs	r3, #100	@ 0x64
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	2301      	movs	r3, #1
 80018c8:	9301      	str	r3, [sp, #4]
 80018ca:	463b      	mov	r3, r7
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2301      	movs	r3, #1
 80018d0:	223b      	movs	r2, #59	@ 0x3b
 80018d2:	2152      	movs	r1, #82	@ 0x52
 80018d4:	480d      	ldr	r0, [pc, #52]	@ (800190c <BNO055_Init+0xc8>)
 80018d6:	f004 f8cd 	bl	8005a74 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80018da:	2064      	movs	r0, #100	@ 0x64
 80018dc:	f002 fcda 	bl	8004294 <HAL_Delay>

	//Set power mode
	SetPowerMODE(Init.Mode);
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff28 	bl	8001738 <SetPowerMODE>
	HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	@ 0x64
 80018ea:	f002 fcd3 	bl	8004294 <HAL_Delay>

	//Set operation mode
	Set_Operation_Mode(Init.OP_Modes);
 80018ee:	793b      	ldrb	r3, [r7, #4]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff feef 	bl	80016d4 <Set_Operation_Mode>
	HAL_Delay(100);
 80018f6:	2064      	movs	r0, #100	@ 0x64
 80018f8:	f002 fccc 	bl	8004294 <HAL_Delay>

	printf("BNO055 Initialization process is done!\r\n");
 80018fc:	4804      	ldr	r0, [pc, #16]	@ (8001910 <BNO055_Init+0xcc>)
 80018fe:	f008 fc47 	bl	800a190 <puts>
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000250 	.word	0x20000250
 8001910:	0800c1cc 	.word	0x0800c1cc

08001914 <setSensorOffsets>:
  * @param  22 byte long buffer containing offset data
  *
  * @retval None
  *
  */
void setSensorOffsets(const uint8_t *calibData) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af04      	add	r7, sp, #16
 800191a:	6078      	str	r0, [r7, #4]
    uint8_t lastMode = getCurrentMode();
 800191c:	f000 f82a 	bl	8001974 <getCurrentMode>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]

    // Switch to CONFIG mode
    Set_Operation_Mode(CONFIG_MODE);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff fed5 	bl	80016d4 <Set_Operation_Mode>
    printf("Switched to CONFIG mode.\r\n");
 800192a:	480e      	ldr	r0, [pc, #56]	@ (8001964 <setSensorOffsets+0x50>)
 800192c:	f008 fc30 	bl	800a190 <puts>

    // Write calibration data to the sensor's offset registers using memory write
    HAL_I2C_Mem_Write(&bno_i2c, P_BNO055, ACC_OFFSET_X_LSB_ADDR, 1, (uint8_t *)calibData, 22, 100);
 8001930:	2364      	movs	r3, #100	@ 0x64
 8001932:	9302      	str	r3, [sp, #8]
 8001934:	2316      	movs	r3, #22
 8001936:	9301      	str	r3, [sp, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	9300      	str	r3, [sp, #0]
 800193c:	2301      	movs	r3, #1
 800193e:	2255      	movs	r2, #85	@ 0x55
 8001940:	2152      	movs	r1, #82	@ 0x52
 8001942:	4809      	ldr	r0, [pc, #36]	@ (8001968 <setSensorOffsets+0x54>)
 8001944:	f004 f896 	bl	8005a74 <HAL_I2C_Mem_Write>
    printf("Wrote calibration data to sensor's offset registers.\r\n");
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <setSensorOffsets+0x58>)
 800194a:	f008 fc21 	bl	800a190 <puts>

    // Restore the previous mode
    Set_Operation_Mode(lastMode);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff febf 	bl	80016d4 <Set_Operation_Mode>
    printf("Restored to previous mode.\r\n");
 8001956:	4806      	ldr	r0, [pc, #24]	@ (8001970 <setSensorOffsets+0x5c>)
 8001958:	f008 fc1a 	bl	800a190 <puts>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	0800c224 	.word	0x0800c224
 8001968:	20000250 	.word	0x20000250
 800196c:	0800c278 	.word	0x0800c278
 8001970:	0800c25c 	.word	0x0800c25c

08001974 <getCurrentMode>:
  * @param  None
  *
  * @retval Operating mode
  *
  */
Op_Modes_t getCurrentMode(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af04      	add	r7, sp, #16

	Op_Modes_t mode;

	HAL_I2C_Mem_Read(&bno_i2c, P_BNO055, OPR_MODE_ADDR, 1, &mode, 1, 100);
 800197a:	2364      	movs	r3, #100	@ 0x64
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	1dfb      	adds	r3, r7, #7
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2301      	movs	r3, #1
 8001988:	223d      	movs	r2, #61	@ 0x3d
 800198a:	2152      	movs	r1, #82	@ 0x52
 800198c:	4803      	ldr	r0, [pc, #12]	@ (800199c <getCurrentMode+0x28>)
 800198e:	f004 f96b 	bl	8005c68 <HAL_I2C_Mem_Read>

    return mode;
 8001992:	79fb      	ldrb	r3, [r7, #7]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000250 	.word	0x20000250

080019a0 <_ZN7BALANCEC1Ev>:

/**
 * @brief Constructor for the BALANCE class.
 * @details Initializes the FSM to the S0_INIT state.
 */
BALANCE::BALANCE():state(S0_INIT)
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
{

}
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_ZN7BALANCE10get_M1_effEv>:

/**
 * @brief Retrieves the calculated effort for motor 1.
 * @return Motor 1 effort as a signed 32-bit integer.
 */
int32_t BALANCE::get_M1_eff() { return M1_eff; }
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_ZN7BALANCE10get_M2_effEv>:

/**
 * @brief Retrieves the calculated effort for motor 2.
 * @return Motor 2 effort as a signed 32-bit integer.
 */
int32_t BALANCE::get_M2_eff() { return M2_eff; }
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	69db      	ldr	r3, [r3, #28]
 80019e0:	4618      	mov	r0, r3
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_ZN13BATTERY_CHECKC1Ev>:

/**
 * @brief Constructor for the BATTERY_CHECK class.
 * @details Initializes the FSM to the S0_INIT state.
 */
BATTERY_CHECK::BATTERY_CHECK():state(S0_INIT)
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	701a      	strb	r2, [r3, #0]
{

}
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_ZN13BATTERY_CHECK3runEv>:
 *          voltage rises above a recovery threshold (~10.20V), the LED is turned off.
 *          This ensures that the LED won't be constantly switching back and forth when
 *          the battery voltage decreases.
 */
void BATTERY_CHECK::run(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
    // Execute control logic based on current FSM state
    switch(state)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d02c      	beq.n	8001a72 <_ZN13BATTERY_CHECK3runEv+0x6a>
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	dc49      	bgt.n	8001ab0 <_ZN13BATTERY_CHECK3runEv+0xa8>
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <_ZN13BATTERY_CHECK3runEv+0x1e>
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d007      	beq.n	8001a34 <_ZN13BATTERY_CHECK3runEv+0x2c>
 8001a24:	e044      	b.n	8001ab0 <_ZN13BATTERY_CHECK3runEv+0xa8>
    {
        case S0_INIT:
            // Initialize ADC reading and move to monitoring state
	    raw = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	805a      	strh	r2, [r3, #2]
            state = S1_CHECK_ADC;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
            break;
 8001a32:	e04a      	b.n	8001aca <_ZN13BATTERY_CHECK3runEv+0xc2>

        case S1_CHECK_ADC:
            // Read battery voltage using ADC
            HAL_ADC_Start(&hadc1);
 8001a34:	4827      	ldr	r0, [pc, #156]	@ (8001ad4 <_ZN13BATTERY_CHECK3runEv+0xcc>)
 8001a36:	f002 fc95 	bl	8004364 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3e:	4825      	ldr	r0, [pc, #148]	@ (8001ad4 <_ZN13BATTERY_CHECK3runEv+0xcc>)
 8001a40:	f002 fd44 	bl	80044cc <HAL_ADC_PollForConversion>
            raw = HAL_ADC_GetValue(&hadc1);
 8001a44:	4823      	ldr	r0, [pc, #140]	@ (8001ad4 <_ZN13BATTERY_CHECK3runEv+0xcc>)
 8001a46:	f002 fdcc 	bl	80045e2 <HAL_ADC_GetValue>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	805a      	strh	r2, [r3, #2]

            // If voltage is too low, activate LED indicator and transition to warning state
            if (raw <= 3300) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	885b      	ldrh	r3, [r3, #2]
 8001a56:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d832      	bhi.n	8001ac4 <_ZN13BATTERY_CHECK3runEv+0xbc>
                // Turn LED ON (PB12 high)
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a64:	481c      	ldr	r0, [pc, #112]	@ (8001ad8 <_ZN13BATTERY_CHECK3runEv+0xd0>)
 8001a66:	f003 fe8f 	bl	8005788 <HAL_GPIO_WritePin>
                state = S2_BATTERY_LOW;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	701a      	strb	r2, [r3, #0]
	    }
            break;
 8001a70:	e028      	b.n	8001ac4 <_ZN13BATTERY_CHECK3runEv+0xbc>

        case S2_BATTERY_LOW:
            // Continue monitoring battery voltage
            HAL_ADC_Start(&hadc1);
 8001a72:	4818      	ldr	r0, [pc, #96]	@ (8001ad4 <_ZN13BATTERY_CHECK3runEv+0xcc>)
 8001a74:	f002 fc76 	bl	8004364 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295
 8001a7c:	4815      	ldr	r0, [pc, #84]	@ (8001ad4 <_ZN13BATTERY_CHECK3runEv+0xcc>)
 8001a7e:	f002 fd25 	bl	80044cc <HAL_ADC_PollForConversion>
            raw = HAL_ADC_GetValue(&hadc1);
 8001a82:	4814      	ldr	r0, [pc, #80]	@ (8001ad4 <_ZN13BATTERY_CHECK3runEv+0xcc>)
 8001a84:	f002 fdad 	bl	80045e2 <HAL_ADC_GetValue>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	805a      	strh	r2, [r3, #2]

            // If voltage has recovered, turn off LED and return to monitoring state
            if (raw >= 3350) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	885b      	ldrh	r3, [r3, #2]
 8001a94:	f640 5215 	movw	r2, #3349	@ 0xd15
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d915      	bls.n	8001ac8 <_ZN13BATTERY_CHECK3runEv+0xc0>
                // Turn LED OFF (PB12 low)
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001aa2:	480d      	ldr	r0, [pc, #52]	@ (8001ad8 <_ZN13BATTERY_CHECK3runEv+0xd0>)
 8001aa4:	f003 fe70 	bl	8005788 <HAL_GPIO_WritePin>
                state = S1_CHECK_ADC;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
	    }
            break;
 8001aae:	e00b      	b.n	8001ac8 <_ZN13BATTERY_CHECK3runEv+0xc0>

        default:
            // Fail-safe: reset state and turn off LED
	    raw = 0;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	805a      	strh	r2, [r3, #2]
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001abc:	4806      	ldr	r0, [pc, #24]	@ (8001ad8 <_ZN13BATTERY_CHECK3runEv+0xd0>)
 8001abe:	f003 fe63 	bl	8005788 <HAL_GPIO_WritePin>
    }
}
 8001ac2:	e002      	b.n	8001aca <_ZN13BATTERY_CHECK3runEv+0xc2>
            break;
 8001ac4:	bf00      	nop
 8001ac6:	e000      	b.n	8001aca <_ZN13BATTERY_CHECK3runEv+0xc2>
            break;
 8001ac8:	bf00      	nop
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000208 	.word	0x20000208
 8001ad8:	40020400 	.word	0x40020400

08001adc <_ZN9BLUETOOTHC1Ev>:

/**
 * @brief Constructor for the BLUETOOTH class.
 * @details Initializes the FSM to the S0_INIT state and motor setpoints to zero.
 */
BLUETOOTH::BLUETOOTH():state(S0_INIT),M1_set(0), M2_set(0)
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	805a      	strh	r2, [r3, #2]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	809a      	strh	r2, [r3, #4]
{

}
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_ZN9BLUETOOTH10get_M1_setEv>:

/**
 * @brief Retrieves the setpoint for motor 1.
 * @return Motor 1 velocity setpoint.
 */
int16_t BLUETOOTH::get_M1_set() { return M1_set; }
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_ZN9BLUETOOTH10get_M2_setEv>:

/**
 * @brief Retrieves the setpoint for motor 2.
 * @return Motor 2 velocity setpoint.
 */
int16_t BLUETOOTH::get_M2_set() { return M2_set; }
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <Sensor_Init>:
 * @details Configures the BNO055 with normal operating mode, Android orientation,
 *          and unit settings. Applies hard-coded offset values for faster startup.
 *          Optional re-calibration section is provided but commented out.
 */
void Sensor_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
	BNO_Status_t Status = {0};
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	2100      	movs	r1, #0
 8001b44:	460a      	mov	r2, r1
 8001b46:	801a      	strh	r2, [r3, #0]
 8001b48:	460a      	mov	r2, r1
 8001b4a:	709a      	strb	r2, [r3, #2]

	// Init structure definition section
	BNO055_Init_t BNO055_InitStruct = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f8c3 2003 	str.w	r2, [r3, #3]

	// Reset BNO055 device
	ResetBNO055();
 8001b56:	f7ff fa9d 	bl	8001094 <ResetBNO055>

	/*============================ *BNO055 Initialization* ============================*/

	BNO055_InitStruct.ACC_Range = Range_16G;                  // Accelerometer range
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	72bb      	strb	r3, [r7, #10]
	BNO055_InitStruct.Axis = 0x24;                            // Axis remap value (see datasheet)
 8001b5e:	2324      	movs	r3, #36	@ 0x24
 8001b60:	717b      	strb	r3, [r7, #5]
	BNO055_InitStruct.Axis_sign = 0x03;                       // Axis sign config (see datasheet)
 8001b62:	2303      	movs	r3, #3
 8001b64:	71bb      	strb	r3, [r7, #6]
	BNO055_InitStruct.Clock_Source = CLOCK_EXTERNAL;          // Use external crystal
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	727b      	strb	r3, [r7, #9]
	BNO055_InitStruct.Mode = BNO055_NORMAL_MODE;              // Power mode
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	71fb      	strb	r3, [r7, #7]
	BNO055_InitStruct.OP_Modes = NDOF_FMC_OFF;                // Operating mode
 8001b6e:	230b      	movs	r3, #11
 8001b70:	723b      	strb	r3, [r7, #8]
	BNO055_InitStruct.Unit_Sel = (UNIT_ORI_ANDROID | UNIT_TEMP_CELCIUS | UNIT_EUL_DEG | UNIT_GYRO_DPS | UNIT_ACC_MS2);
 8001b72:	2380      	movs	r3, #128	@ 0x80
 8001b74:	713b      	strb	r3, [r7, #4]
	                                                           // Unit configuration
	BNO055_Init(BNO055_InitStruct);
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b7c:	f7ff fe62 	bl	8001844 <BNO055_Init>

	/**
	 * @note This writes previously stored sensor offsets directly to the IMU,
	 *       bypassing manual calibration. This is useful for consistent startup behavior.
	 */
	setSensorOffsets(OffsetDatas);
 8001b80:	480d      	ldr	r0, [pc, #52]	@ (8001bb8 <Sensor_Init+0x80>)
 8001b82:	f7ff fec7 	bl	8001914 <setSensorOffsets>
//	{
//		printf("Sensor calibration failed.\r\nFailed to retrieve offset data\r\n");
//	}

	// Print sensor system status and diagnostics
	Check_Status(&Status);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff f9fa 	bl	8000f84 <Check_Status>
	printf("Selftest Result: %d\t", Status.STresult);
 8001b90:	7b3b      	ldrb	r3, [r7, #12]
 8001b92:	4619      	mov	r1, r3
 8001b94:	4809      	ldr	r0, [pc, #36]	@ (8001bbc <Sensor_Init+0x84>)
 8001b96:	f008 fa93 	bl	800a0c0 <iprintf>
	printf("System Status: %d\t", Status.SYSStatus);
 8001b9a:	7bbb      	ldrb	r3, [r7, #14]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4808      	ldr	r0, [pc, #32]	@ (8001bc0 <Sensor_Init+0x88>)
 8001ba0:	f008 fa8e 	bl	800a0c0 <iprintf>
	printf("System Error: %d\r\n", Status.SYSError);
 8001ba4:	7b7b      	ldrb	r3, [r7, #13]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4806      	ldr	r0, [pc, #24]	@ (8001bc4 <Sensor_Init+0x8c>)
 8001baa:	f008 fa89 	bl	800a0c0 <iprintf>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	0800c4e8 	.word	0x0800c4e8
 8001bc0:	0800c500 	.word	0x0800c500
 8001bc4:	0800c514 	.word	0x0800c514

08001bc8 <_ZN14COMMAND_PARSERC1Ev>:

/**
 * @brief Constructor for COMMAND_PARSER.
 * @details Initializes all member variables to default values.
 */
COMMAND_PARSER::COMMAND_PARSER()
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
    : M1_set(0), M2_set(0), headset(0), mode(0) {}
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	805a      	strh	r2, [r3, #2]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	809a      	strh	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	719a      	strb	r2, [r3, #6]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	4618      	mov	r0, r3
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>:
/**
 * @brief Converts a single hexadecimal character to its integer value.
 * @param c Hexadecimal character (0–9, A–F, a–f)
 * @return Integer value from 0 to 15, or -1 if invalid.
 */
int COMMAND_PARSER::hex_char_to_val(char c) {
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	70fb      	strb	r3, [r7, #3]
    if (c >= '0' && c <= '9') return c - '0';
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c06:	d905      	bls.n	8001c14 <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x1e>
 8001c08:	78fb      	ldrb	r3, [r7, #3]
 8001c0a:	2b39      	cmp	r3, #57	@ 0x39
 8001c0c:	d802      	bhi.n	8001c14 <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x1e>
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	3b30      	subs	r3, #48	@ 0x30
 8001c12:	e013      	b.n	8001c3c <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x46>
    if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2b40      	cmp	r3, #64	@ 0x40
 8001c18:	d905      	bls.n	8001c26 <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x30>
 8001c1a:	78fb      	ldrb	r3, [r7, #3]
 8001c1c:	2b46      	cmp	r3, #70	@ 0x46
 8001c1e:	d802      	bhi.n	8001c26 <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x30>
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	3b37      	subs	r3, #55	@ 0x37
 8001c24:	e00a      	b.n	8001c3c <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x46>
    if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	2b60      	cmp	r3, #96	@ 0x60
 8001c2a:	d905      	bls.n	8001c38 <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x42>
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	2b66      	cmp	r3, #102	@ 0x66
 8001c30:	d802      	bhi.n	8001c38 <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x42>
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	3b57      	subs	r3, #87	@ 0x57
 8001c36:	e001      	b.n	8001c3c <_ZN14COMMAND_PARSER15hex_char_to_valEc+0x46>
    return -1;
 8001c38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <_ZN14COMMAND_PARSER13hex_to_signedEccPi>:
 * @param high High nibble character.
 * @param low Low nibble character.
 * @param valid Pointer to an int set to 1 if valid conversion, else 0.
 * @return Signed 8-bit integer.
 */
int8_t COMMAND_PARSER::hex_to_signed(char high, char low, int* valid) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	72fb      	strb	r3, [r7, #11]
 8001c56:	4613      	mov	r3, r2
 8001c58:	72bb      	strb	r3, [r7, #10]
    int hi = hex_char_to_val(high);
 8001c5a:	7afb      	ldrb	r3, [r7, #11]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7ff ffc9 	bl	8001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>
 8001c64:	61b8      	str	r0, [r7, #24]
    int lo = hex_char_to_val(low);
 8001c66:	7abb      	ldrb	r3, [r7, #10]
 8001c68:	4619      	mov	r1, r3
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff ffc3 	bl	8001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>
 8001c70:	6178      	str	r0, [r7, #20]

    if (hi < 0 || lo < 0) {
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db02      	blt.n	8001c7e <_ZN14COMMAND_PARSER13hex_to_signedEccPi+0x36>
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da04      	bge.n	8001c88 <_ZN14COMMAND_PARSER13hex_to_signedEccPi+0x40>
        *valid = 0;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
        return 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	e010      	b.n	8001caa <_ZN14COMMAND_PARSER13hex_to_signedEccPi+0x62>
    }

    *valid = 1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]
    int val = (hi << 4) | lo;
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	011b      	lsls	r3, r3, #4
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61fb      	str	r3, [r7, #28]
    if (val > 127) val -= 256;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c9c:	dd03      	ble.n	8001ca6 <_ZN14COMMAND_PARSER13hex_to_signedEccPi+0x5e>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001ca4:	61fb      	str	r3, [r7, #28]

    return static_cast<int8_t>(val);
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	b25b      	sxtb	r3, r3
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3720      	adds	r7, #32
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi>:
 * @brief Converts four hex characters to a signed 16-bit integer (two's complement).
 * @param c1–c4 Hexadecimal characters from MSB to LSB.
 * @param valid Pointer to an int set to 1 if valid conversion, else 0.
 * @return Signed 16-bit integer.
 */
int16_t COMMAND_PARSER::hex4_to_int16(char c1, char c2, char c3, char c4, int* valid) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b088      	sub	sp, #32
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	4608      	mov	r0, r1
 8001cbc:	4611      	mov	r1, r2
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	70fb      	strb	r3, [r7, #3]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	70bb      	strb	r3, [r7, #2]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	707b      	strb	r3, [r7, #1]
    int h1 = hex_char_to_val(c1);
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff90 	bl	8001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>
 8001cd6:	61f8      	str	r0, [r7, #28]
    int h2 = hex_char_to_val(c2);
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	4619      	mov	r1, r3
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff8a 	bl	8001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>
 8001ce2:	61b8      	str	r0, [r7, #24]
    int h3 = hex_char_to_val(c3);
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff84 	bl	8001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>
 8001cee:	6178      	str	r0, [r7, #20]
    int h4 = hex_char_to_val(c4);
 8001cf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff ff7d 	bl	8001bf6 <_ZN14COMMAND_PARSER15hex_char_to_valEc>
 8001cfc:	6138      	str	r0, [r7, #16]

    if (h1 < 0 || h2 < 0 || h3 < 0 || h4 < 0) {
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	db08      	blt.n	8001d16 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi+0x64>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	db05      	blt.n	8001d16 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi+0x64>
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db02      	blt.n	8001d16 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi+0x64>
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da04      	bge.n	8001d20 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi+0x6e>
        *valid = 0;
 8001d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
        return 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	e019      	b.n	8001d54 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi+0xa2>
    }

    *valid = 1;
 8001d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
    uint16_t val = (h1 << 12) | (h2 << 8) | (h3 << 4) | h4;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	031b      	lsls	r3, r3, #12
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	021b      	lsls	r3, r3, #8
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	b21b      	sxth	r3, r3
 8001d3e:	011b      	lsls	r3, r3, #4
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	81fb      	strh	r3, [r7, #14]

    return (val > 0x7FFF) ? static_cast<int16_t>(val - 0x10000) : static_cast<int16_t>(val);
 8001d50:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_ZN14COMMAND_PARSER5parseEv>:
 * - 'A': M1/M2 duty cycle (signed 8-bit hex)
 * - 'B': M1/M2 duty cycle (signed 8-bit hex)
 * - 'C': Reserved
 * - 'D': Heading (16-bit hex) + motor effort (8-bit hex)
 */
void COMMAND_PARSER::parse() {
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b090      	sub	sp, #64	@ 0x40
 8001d60:	af04      	add	r7, sp, #16
 8001d62:	6078      	str	r0, [r7, #4]
    if (command_ready) {
 8001d64:	4baa      	ldr	r3, [pc, #680]	@ (8002010 <_ZN14COMMAND_PARSER5parseEv+0x2b4>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 8186 	beq.w	8002086 <_ZN14COMMAND_PARSER5parseEv+0x32a>
        command_ready = 0;
 8001d7a:	4ba5      	ldr	r3, [pc, #660]	@ (8002010 <_ZN14COMMAND_PARSER5parseEv+0x2b4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]
        char mode_char = rx_buffer[0];
 8001d80:	4ba4      	ldr	r3, [pc, #656]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        mode = mode_char;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001d8e:	719a      	strb	r2, [r3, #6]

        if (mode_char == 'A' && buffer_index >= 5) {
 8001d90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d94:	2b41      	cmp	r3, #65	@ 0x41
 8001d96:	d15b      	bne.n	8001e50 <_ZN14COMMAND_PARSER5parseEv+0xf4>
 8001d98:	4b9f      	ldr	r3, [pc, #636]	@ (8002018 <_ZN14COMMAND_PARSER5parseEv+0x2bc>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b04      	cmp	r3, #4
 8001d9e:	d957      	bls.n	8001e50 <_ZN14COMMAND_PARSER5parseEv+0xf4>
            int validA1, validA2;
            int8_t M1 = hex_to_signed(rx_buffer[1], rx_buffer[2], &validA1);
 8001da0:	4b9c      	ldr	r3, [pc, #624]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001da2:	7859      	ldrb	r1, [r3, #1]
 8001da4:	4b9b      	ldr	r3, [pc, #620]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001da6:	789a      	ldrb	r2, [r3, #2]
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff ff4b 	bl	8001c48 <_ZN14COMMAND_PARSER13hex_to_signedEccPi>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            int8_t M2 = hex_to_signed(rx_buffer[3], rx_buffer[4], &validA2);
 8001db8:	4b96      	ldr	r3, [pc, #600]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001dba:	78d9      	ldrb	r1, [r3, #3]
 8001dbc:	4b95      	ldr	r3, [pc, #596]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001dbe:	791a      	ldrb	r2, [r3, #4]
 8001dc0:	f107 0318 	add.w	r3, r7, #24
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff3f 	bl	8001c48 <_ZN14COMMAND_PARSER13hex_to_signedEccPi>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

            if (validA1 && validA2) {
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d02b      	beq.n	8001e2e <_ZN14COMMAND_PARSER5parseEv+0xd2>
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d028      	beq.n	8001e2e <_ZN14COMMAND_PARSER5parseEv+0xd2>
                M1_set = M1 * 100;
 8001ddc:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	0092      	lsls	r2, r2, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	461a      	mov	r2, r3
 8001dea:	0091      	lsls	r1, r2, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	4413      	add	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	801a      	strh	r2, [r3, #0]
                M2_set = M2 * 100;
 8001dfc:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	0092      	lsls	r2, r2, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	0091      	lsls	r1, r2, #2
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	b21a      	sxth	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	805a      	strh	r2, [r3, #2]
                printf("Motor 1 Duty Cycle: %d | Motor 2 Duty Cycle: %d\r\n", M1, M2);
 8001e1c:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8001e20:	f997 202d 	ldrsb.w	r2, [r7, #45]	@ 0x2d
 8001e24:	4619      	mov	r1, r3
 8001e26:	487d      	ldr	r0, [pc, #500]	@ (800201c <_ZN14COMMAND_PARSER5parseEv+0x2c0>)
 8001e28:	f008 f94a 	bl	800a0c0 <iprintf>
            } else {
                printf("Invalid hex values: %c%c %c%c\r\n", rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4]);
            }
        }
 8001e2c:	e123      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
                printf("Invalid hex values: %c%c %c%c\r\n", rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4]);
 8001e2e:	4b79      	ldr	r3, [pc, #484]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e30:	785b      	ldrb	r3, [r3, #1]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4b77      	ldr	r3, [pc, #476]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e36:	789b      	ldrb	r3, [r3, #2]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b76      	ldr	r3, [pc, #472]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e3c:	78db      	ldrb	r3, [r3, #3]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4b74      	ldr	r3, [pc, #464]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e42:	791b      	ldrb	r3, [r3, #4]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	4603      	mov	r3, r0
 8001e48:	4875      	ldr	r0, [pc, #468]	@ (8002020 <_ZN14COMMAND_PARSER5parseEv+0x2c4>)
 8001e4a:	f008 f939 	bl	800a0c0 <iprintf>
        }
 8001e4e:	e112      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
        else if (mode_char == 'B' && buffer_index >= 5) {
 8001e50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001e54:	2b42      	cmp	r3, #66	@ 0x42
 8001e56:	d15b      	bne.n	8001f10 <_ZN14COMMAND_PARSER5parseEv+0x1b4>
 8001e58:	4b6f      	ldr	r3, [pc, #444]	@ (8002018 <_ZN14COMMAND_PARSER5parseEv+0x2bc>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d957      	bls.n	8001f10 <_ZN14COMMAND_PARSER5parseEv+0x1b4>
            int validB1, validB2;
            int8_t M1 = hex_to_signed(rx_buffer[1], rx_buffer[2], &validB1);
 8001e60:	4b6c      	ldr	r3, [pc, #432]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e62:	7859      	ldrb	r1, [r3, #1]
 8001e64:	4b6b      	ldr	r3, [pc, #428]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e66:	789a      	ldrb	r2, [r3, #2]
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff feeb 	bl	8001c48 <_ZN14COMMAND_PARSER13hex_to_signedEccPi>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            int8_t M2 = hex_to_signed(rx_buffer[3], rx_buffer[4], &validB2);
 8001e78:	4b66      	ldr	r3, [pc, #408]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e7a:	78d9      	ldrb	r1, [r3, #3]
 8001e7c:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001e7e:	791a      	ldrb	r2, [r3, #4]
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fedf 	bl	8001c48 <_ZN14COMMAND_PARSER13hex_to_signedEccPi>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            if (validB1 && validB2) {
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02b      	beq.n	8001eee <_ZN14COMMAND_PARSER5parseEv+0x192>
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d028      	beq.n	8001eee <_ZN14COMMAND_PARSER5parseEv+0x192>
                M1_set = M1 * 100;
 8001e9c:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	0091      	lsls	r1, r2, #2
 8001eac:	461a      	mov	r2, r3
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b21a      	sxth	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	801a      	strh	r2, [r3, #0]
                M2_set = M2 * 100;
 8001ebc:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	0092      	lsls	r2, r2, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	461a      	mov	r2, r3
 8001eca:	0091      	lsls	r1, r2, #2
 8001ecc:	461a      	mov	r2, r3
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	805a      	strh	r2, [r3, #2]
                printf("Motor 1 Duty Cycle: %d | Motor 2 Duty Cycle: %d\r\n", M1, M2);
 8001edc:	f997 302c 	ldrsb.w	r3, [r7, #44]	@ 0x2c
 8001ee0:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	484d      	ldr	r0, [pc, #308]	@ (800201c <_ZN14COMMAND_PARSER5parseEv+0x2c0>)
 8001ee8:	f008 f8ea 	bl	800a0c0 <iprintf>
            } else {
                printf("Invalid hex values: %c%c %c%c\r\n", rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4]);
            }
        }
 8001eec:	e0c3      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
                printf("Invalid hex values: %c%c %c%c\r\n", rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4]);
 8001eee:	4b49      	ldr	r3, [pc, #292]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001ef0:	785b      	ldrb	r3, [r3, #1]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4b47      	ldr	r3, [pc, #284]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001ef6:	789b      	ldrb	r3, [r3, #2]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b46      	ldr	r3, [pc, #280]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001efc:	78db      	ldrb	r3, [r3, #3]
 8001efe:	4618      	mov	r0, r3
 8001f00:	4b44      	ldr	r3, [pc, #272]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	4603      	mov	r3, r0
 8001f08:	4845      	ldr	r0, [pc, #276]	@ (8002020 <_ZN14COMMAND_PARSER5parseEv+0x2c4>)
 8001f0a:	f008 f8d9 	bl	800a0c0 <iprintf>
        }
 8001f0e:	e0b2      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
        else if (mode_char == 'C' && buffer_index >= 5) {
 8001f10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f14:	2b43      	cmp	r3, #67	@ 0x43
 8001f16:	d107      	bne.n	8001f28 <_ZN14COMMAND_PARSER5parseEv+0x1cc>
 8001f18:	4b3f      	ldr	r3, [pc, #252]	@ (8002018 <_ZN14COMMAND_PARSER5parseEv+0x2bc>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d903      	bls.n	8001f28 <_ZN14COMMAND_PARSER5parseEv+0x1cc>
            // TODO: Implement mode C functionality
            printf("Mode C: stub\r\n");
 8001f20:	4840      	ldr	r0, [pc, #256]	@ (8002024 <_ZN14COMMAND_PARSER5parseEv+0x2c8>)
 8001f22:	f008 f935 	bl	800a190 <puts>
 8001f26:	e0a6      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
        }
        else if (mode_char == 'D' && buffer_index >= 7) {
 8001f28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f2c:	2b44      	cmp	r3, #68	@ 0x44
 8001f2e:	f040 809a 	bne.w	8002066 <_ZN14COMMAND_PARSER5parseEv+0x30a>
 8001f32:	4b39      	ldr	r3, [pc, #228]	@ (8002018 <_ZN14COMMAND_PARSER5parseEv+0x2bc>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	f240 8095 	bls.w	8002066 <_ZN14COMMAND_PARSER5parseEv+0x30a>
            int valid_heading, valid_motorD;
            int16_t h = hex4_to_int16(rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4], &valid_heading);
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f3e:	7859      	ldrb	r1, [r3, #1]
 8001f40:	4b34      	ldr	r3, [pc, #208]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f42:	7898      	ldrb	r0, [r3, #2]
 8001f44:	4b33      	ldr	r3, [pc, #204]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f46:	78dc      	ldrb	r4, [r3, #3]
 8001f48:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f4a:	791b      	ldrb	r3, [r3, #4]
 8001f4c:	f107 020c 	add.w	r2, r7, #12
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	4623      	mov	r3, r4
 8001f56:	4602      	mov	r2, r0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff feaa 	bl	8001cb2 <_ZN14COMMAND_PARSER13hex4_to_int16EccccPi>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	853b      	strh	r3, [r7, #40]	@ 0x28
            float h_deg = ((float)h / 10.0f) * (180.0f / (float)M_PI);
 8001f62:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001f72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f76:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002028 <_ZN14COMMAND_PARSER5parseEv+0x2cc>
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            int8_t motor = hex_to_signed(rx_buffer[5], rx_buffer[6], &valid_motorD);
 8001f82:	4b24      	ldr	r3, [pc, #144]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f84:	7959      	ldrb	r1, [r3, #5]
 8001f86:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <_ZN14COMMAND_PARSER5parseEv+0x2b8>)
 8001f88:	799a      	ldrb	r2, [r3, #6]
 8001f8a:	f107 0308 	add.w	r3, r7, #8
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f7ff fe5a 	bl	8001c48 <_ZN14COMMAND_PARSER13hex_to_signedEccPi>
 8001f94:	4603      	mov	r3, r0
 8001f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if (valid_heading && valid_motorD) {
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d047      	beq.n	8002030 <_ZN14COMMAND_PARSER5parseEv+0x2d4>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d044      	beq.n	8002030 <_ZN14COMMAND_PARSER5parseEv+0x2d4>
                headset = h_deg;
 8001fa6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001faa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fae:	ee17 3a90 	vmov	r3, s15
 8001fb2:	b21a      	sxth	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	809a      	strh	r2, [r3, #4]
                M1_set = motor * 100;
 8001fb8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	0091      	lsls	r1, r2, #2
 8001fc8:	461a      	mov	r2, r3
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	b21a      	sxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	801a      	strh	r2, [r3, #0]
                M2_set = motor * 100;
 8001fd8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	0092      	lsls	r2, r2, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	0091      	lsls	r1, r2, #2
 8001fe8:	461a      	mov	r2, r3
 8001fea:	460b      	mov	r3, r1
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	805a      	strh	r2, [r3, #2]
                printf("Mode D - Heading: %d | Motor Effort: %d\r\n", headset, motor);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ffe:	4619      	mov	r1, r3
 8002000:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002004:	461a      	mov	r2, r3
 8002006:	4809      	ldr	r0, [pc, #36]	@ (800202c <_ZN14COMMAND_PARSER5parseEv+0x2d0>)
 8002008:	f008 f85a 	bl	800a0c0 <iprintf>
            } else {
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
                       rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4],
                       rx_buffer[5], rx_buffer[6]);
            }
        }
 800200c:	e033      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
 800200e:	bf00      	nop
 8002010:	200006e5 	.word	0x200006e5
 8002014:	200006a4 	.word	0x200006a4
 8002018:	200006e4 	.word	0x200006e4
 800201c:	0800c528 	.word	0x0800c528
 8002020:	0800c55c 	.word	0x0800c55c
 8002024:	0800c57c 	.word	0x0800c57c
 8002028:	42652ee0 	.word	0x42652ee0
 800202c:	0800c58c 	.word	0x0800c58c
                       rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4],
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 8002032:	785b      	ldrb	r3, [r3, #1]
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
 8002034:	4618      	mov	r0, r3
                       rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4],
 8002036:	4b16      	ldr	r3, [pc, #88]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 8002038:	789b      	ldrb	r3, [r3, #2]
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
 800203a:	461c      	mov	r4, r3
                       rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4],
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 800203e:	78db      	ldrb	r3, [r3, #3]
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
 8002040:	461d      	mov	r5, r3
                       rx_buffer[1], rx_buffer[2], rx_buffer[3], rx_buffer[4],
 8002042:	4b13      	ldr	r3, [pc, #76]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 8002044:	791b      	ldrb	r3, [r3, #4]
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
 8002046:	461a      	mov	r2, r3
                       rx_buffer[5], rx_buffer[6]);
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 800204a:	795b      	ldrb	r3, [r3, #5]
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
 800204c:	4619      	mov	r1, r3
                       rx_buffer[5], rx_buffer[6]);
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 8002050:	799b      	ldrb	r3, [r3, #6]
                printf("Invalid Mode D values: %c%c%c%c %c%c\r\n",
 8002052:	9302      	str	r3, [sp, #8]
 8002054:	9101      	str	r1, [sp, #4]
 8002056:	9200      	str	r2, [sp, #0]
 8002058:	462b      	mov	r3, r5
 800205a:	4622      	mov	r2, r4
 800205c:	4601      	mov	r1, r0
 800205e:	480d      	ldr	r0, [pc, #52]	@ (8002094 <_ZN14COMMAND_PARSER5parseEv+0x338>)
 8002060:	f008 f82e 	bl	800a0c0 <iprintf>
        }
 8002064:	e007      	b.n	8002076 <_ZN14COMMAND_PARSER5parseEv+0x31a>
        else {
            printf("Unknown or too-short command. Mode: %c | Length: %d\r\n", mode_char, buffer_index);
 8002066:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800206a:	4a0b      	ldr	r2, [pc, #44]	@ (8002098 <_ZN14COMMAND_PARSER5parseEv+0x33c>)
 800206c:	7812      	ldrb	r2, [r2, #0]
 800206e:	4619      	mov	r1, r3
 8002070:	480a      	ldr	r0, [pc, #40]	@ (800209c <_ZN14COMMAND_PARSER5parseEv+0x340>)
 8002072:	f008 f825 	bl	800a0c0 <iprintf>
        }

        // Reset buffer for next command
        buffer_index = 0;
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <_ZN14COMMAND_PARSER5parseEv+0x33c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, BUFFER_SIZE);
 800207c:	2240      	movs	r2, #64	@ 0x40
 800207e:	2100      	movs	r1, #0
 8002080:	4803      	ldr	r0, [pc, #12]	@ (8002090 <_ZN14COMMAND_PARSER5parseEv+0x334>)
 8002082:	f008 f965 	bl	800a350 <memset>
    }
}
 8002086:	bf00      	nop
 8002088:	3730      	adds	r7, #48	@ 0x30
 800208a:	46bd      	mov	sp, r7
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	bf00      	nop
 8002090:	200006a4 	.word	0x200006a4
 8002094:	0800c5b8 	.word	0x0800c5b8
 8002098:	200006e4 	.word	0x200006e4
 800209c:	0800c5e0 	.word	0x0800c5e0

080020a0 <_ZNK14COMMAND_PARSER10get_M1_setEv>:

/**
 * @brief Gets the parsed motor 1 setpoint.
 * @return Motor 1 effort in encoder units.
 */
int16_t COMMAND_PARSER::get_M1_set() const { return M1_set; }
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_ZNK14COMMAND_PARSER10get_M2_setEv>:

/**
 * @brief Gets the parsed motor 2 setpoint.
 * @return Motor 2 effort in encoder units.
 */
int16_t COMMAND_PARSER::get_M2_set() const { return M2_set; }
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_ZNK14COMMAND_PARSER11get_headsetEv>:

/**
 * @brief Gets the parsed heading setpoint.
 * @return Heading setpoint in degrees.
 */
int16_t COMMAND_PARSER::get_headset() const { return headset; }
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_ZNK14COMMAND_PARSER8get_modeEv>:

/**
 * @brief Gets the mode character from the last command.
 * @return Mode character ('A', 'B', 'C', 'D', etc.)
 */
char COMMAND_PARSER::get_mode() const { return mode; }
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	799b      	ldrb	r3, [r3, #6]
 80020fa:	4618      	mov	r0, r3
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <encoder_init>:
/**
 * @brief Initializes the encoder structure and starts the hardware timer.
 * @param encoder Pointer to encoder structure to initialize.
 * @param htim Pointer to a TIM_HandleTypeDef configured in encoder mode.
 */
void encoder_init(encoder_t *encoder, TIM_HandleTypeDef *htim) {
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
 800210e:	6039      	str	r1, [r7, #0]
    encoder->htim = htim;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	601a      	str	r2, [r3, #0]
    encoder->last_count = 0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
    encoder->position = 0;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
    encoder->last_time_us = micros();
 8002122:	f001 ff9f 	bl	8004064 <micros>
 8002126:	4602      	mov	r2, r0
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	60da      	str	r2, [r3, #12]
    encoder->delta = 0;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    encoder->speed_cps = 0.0f;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	615a      	str	r2, [r3, #20]

    HAL_TIM_Encoder_Start(encoder->htim, TIM_CHANNEL_ALL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	213c      	movs	r1, #60	@ 0x3c
 8002140:	4618      	mov	r0, r3
 8002142:	f005 fa83 	bl	800764c <HAL_TIM_Encoder_Start>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <encoder_update>:
 * @brief Updates the encoder's delta, position, and speed.
 * @details Computes the count delta between updates and handles overflow.
 *          Speed is calculated in counts per second (CPS).
 * @param encoder Pointer to encoder structure to update.
 */
void encoder_update(encoder_t *encoder) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    int32_t new_count = (int32_t)__HAL_TIM_GET_COUNTER(encoder->htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	613b      	str	r3, [r7, #16]
    uint32_t now = micros();
 8002162:	f001 ff7f 	bl	8004064 <micros>
 8002166:	60f8      	str	r0, [r7, #12]
    int32_t delta = new_count - encoder->last_count;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]

    // Handle 16-bit counter overflow
    if (delta > 32767) delta -= 65536;
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002178:	db04      	blt.n	8002184 <encoder_update+0x34>
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e007      	b.n	8002194 <encoder_update+0x44>
    else if (delta < -32768) delta += 65536;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800218a:	da03      	bge.n	8002194 <encoder_update+0x44>
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002192:	617b      	str	r3, [r7, #20]

    encoder->delta = delta;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	611a      	str	r2, [r3, #16]
    encoder->position += delta;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	609a      	str	r2, [r3, #8]

    uint32_t dt_us = now - encoder->last_time_us;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	60bb      	str	r3, [r7, #8]
    if (dt_us > 0) {
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d012      	beq.n	80021dc <encoder_update+0x8c>
        encoder->speed_cps = ((float)delta * 1e6f) / (float)dt_us;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c0:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80021f0 <encoder_update+0xa0>
 80021c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	edc3 7a05 	vstr	s15, [r3, #20]
    }

    encoder->last_count = new_count;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]
    encoder->last_time_us = now;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	60da      	str	r2, [r3, #12]
}
 80021e8:	bf00      	nop
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	49742400 	.word	0x49742400

080021f4 <encoder_getspeed>:
/**
 * @brief Retrieves the calculated speed in counts per second.
 * @param encoder Pointer to encoder structure.
 * @return Speed in counts per second (CPS).
 */
float encoder_getspeed(encoder_t *encoder) {
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
    return encoder->speed_cps;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	ee07 3a90 	vmov	s15, r3
}
 8002204:	eeb0 0a67 	vmov.f32	s0, s15
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <encoder_reset>:

/**
 * @brief Resets the encoder's position, delta, and speed.
 * @param encoder Pointer to encoder structure.
 */
void encoder_reset(encoder_t *encoder) {
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
    encoder->last_count = 0;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	605a      	str	r2, [r3, #4]
    encoder->position = 0;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
    encoder->last_time_us = micros();
 8002226:	f001 ff1d 	bl	8004064 <micros>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	60da      	str	r2, [r3, #12]
    encoder->delta = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	611a      	str	r2, [r3, #16]
    encoder->speed_cps = 0.0f;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2200      	movs	r2, #0
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_ZN7HEADINGC1Ev>:

/**
 * @brief Constructor for the HEADING class.
 * @details Initializes FSM state to S0_INIT.
 */
HEADING::HEADING():state(S0_INIT)
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	701a      	strb	r2, [r3, #0]
{

}
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_ZN7HEADING10get_M1_effEv>:

/**
 * @brief Returns the current motor 1 effort calculated by the heading controller.
 * @return Signed 32-bit PWM effort value for motor 1.
 */
int32_t HEADING::get_M1_eff() { return M1_eff; }
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_ZN7HEADING10get_M2_effEv>:

/**
 * @brief Returns the current motor 2 effort calculated by the heading controller.
 * @return Signed 32-bit PWM effort value for motor 2.
 */
int32_t HEADING::get_M2_eff() { return M2_eff; }
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <_ZN7HEADING3runEv>:
 * @brief Executes one iteration of the heading control FSM.
 * @details Based on IMU Euler angle data and a commanded heading setpoint,
 *          calculates a control effort using PID logic and outputs motor efforts.
 */
void HEADING::run(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    switch(state)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d05c      	beq.n	8002366 <_ZN7HEADING3runEv+0xca>
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	f300 815e 	bgt.w	800256e <_ZN7HEADING3runEv+0x2d2>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <_ZN7HEADING3runEv+0x20>
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d020      	beq.n	80022fc <_ZN7HEADING3runEv+0x60>
	    }
            break;

        default:
            // Failsafe/default case
	    break;
 80022ba:	e158      	b.n	800256e <_ZN7HEADING3runEv+0x2d2>
	    angle = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	805a      	strh	r2, [r3, #2]
	    prev_angle = 0;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	809a      	strh	r2, [r3, #4]
	    position = 0;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
	    headset = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	609a      	str	r2, [r3, #8]
	    delta = 0;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	821a      	strh	r2, [r3, #16]
	    Kp = 130;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4aa6      	ldr	r2, [pc, #664]	@ (8002578 <_ZN7HEADING3runEv+0x2dc>)
 80022de:	61da      	str	r2, [r3, #28]
	    Ki = 250;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4aa6      	ldr	r2, [pc, #664]	@ (800257c <_ZN7HEADING3runEv+0x2e0>)
 80022e4:	621a      	str	r2, [r3, #32]
	    Kd = 0;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	@ 0x24
	    ctrl = 0;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	871a      	strh	r2, [r3, #56]	@ 0x38
            state = S1_IDLE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
            break;
 80022fa:	e154      	b.n	80025a6 <_ZN7HEADING3runEv+0x30a>
	    ReadData(&BNO055, SENSOR_EULER);
 80022fc:	2140      	movs	r1, #64	@ 0x40
 80022fe:	48a0      	ldr	r0, [pc, #640]	@ (8002580 <_ZN7HEADING3runEv+0x2e4>)
 8002300:	f7fe ff00 	bl	8001104 <ReadData>
	    prev_angle = BNO055.Euler.X;
 8002304:	4b9e      	ldr	r3, [pc, #632]	@ (8002580 <_ZN7HEADING3runEv+0x2e4>)
 8002306:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800230a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800230e:	ee17 3a90 	vmov	r3, s15
 8002312:	b21a      	sxth	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	809a      	strh	r2, [r3, #4]
	    last_time = micros();
 8002318:	f001 fea4 	bl	8004064 <micros>
 800231c:	4602      	mov	r2, r0
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	@ 0x44
	    error = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	629a      	str	r2, [r3, #40]	@ 0x28
	    prev_error = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	62da      	str	r2, [r3, #44]	@ 0x2c
	    error_diff = 0;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	@ 0x30
	    error_sum = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	635a      	str	r2, [r3, #52]	@ 0x34
	    M1_eff = 0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	615a      	str	r2, [r3, #20]
	    M2_eff = 0;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	619a      	str	r2, [r3, #24]
	    if (parser.get_mode() == 'D') {
 8002346:	488f      	ldr	r0, [pc, #572]	@ (8002584 <_ZN7HEADING3runEv+0x2e8>)
 8002348:	f7ff fed1 	bl	80020ee <_ZNK14COMMAND_PARSER8get_modeEv>
 800234c:	4603      	mov	r3, r0
 800234e:	2b44      	cmp	r3, #68	@ 0x44
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 810a 	beq.w	8002572 <_ZN7HEADING3runEv+0x2d6>
		state = S2_RUN;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2202      	movs	r2, #2
 8002362:	701a      	strb	r2, [r3, #0]
            break;
 8002364:	e105      	b.n	8002572 <_ZN7HEADING3runEv+0x2d6>
	    ReadData(&BNO055, SENSOR_EULER);
 8002366:	2140      	movs	r1, #64	@ 0x40
 8002368:	4885      	ldr	r0, [pc, #532]	@ (8002580 <_ZN7HEADING3runEv+0x2e4>)
 800236a:	f7fe fecb 	bl	8001104 <ReadData>
	    angle = BNO055.Euler.X;
 800236e:	4b84      	ldr	r3, [pc, #528]	@ (8002580 <_ZN7HEADING3runEv+0x2e4>)
 8002370:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002378:	ee17 3a90 	vmov	r3, s15
 800237c:	b21a      	sxth	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	805a      	strh	r2, [r3, #2]
	    delta = angle - prev_angle;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002388:	b29a      	uxth	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002390:	b29b      	uxth	r3, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21a      	sxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	821a      	strh	r2, [r3, #16]
	    if (delta > 180) delta -= 360;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023a2:	2bb4      	cmp	r3, #180	@ 0xb4
 80023a4:	dd0a      	ble.n	80023bc <_ZN7HEADING3runEv+0x120>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	b21a      	sxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	821a      	strh	r2, [r3, #16]
 80023ba:	e00f      	b.n	80023dc <_ZN7HEADING3runEv+0x140>
	    else if (delta < -180) delta += 360;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023c2:	f113 0fb4 	cmn.w	r3, #180	@ 0xb4
 80023c6:	da09      	bge.n	80023dc <_ZN7HEADING3runEv+0x140>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	821a      	strh	r2, [r3, #16]
	    position += delta;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80023e6:	441a      	add	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	60da      	str	r2, [r3, #12]
	    prev_angle = angle;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	809a      	strh	r2, [r3, #4]
	    printf("IMU Position: %ld\r\n", position);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4619      	mov	r1, r3
 80023fc:	4862      	ldr	r0, [pc, #392]	@ (8002588 <_ZN7HEADING3runEv+0x2ec>)
 80023fe:	f007 fe5f 	bl	800a0c0 <iprintf>
	    if (USER) {
 8002402:	4b62      	ldr	r3, [pc, #392]	@ (800258c <_ZN7HEADING3runEv+0x2f0>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d016      	beq.n	800243a <_ZN7HEADING3runEv+0x19e>
	        USER = 0;
 800240c:	4b5f      	ldr	r3, [pc, #380]	@ (800258c <_ZN7HEADING3runEv+0x2f0>)
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
	        position = headset;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	60da      	str	r2, [r3, #12]
	        prev_angle = BNO055.Euler.X;
 800241a:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <_ZN7HEADING3runEv+0x2e4>)
 800241c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	ee17 3a90 	vmov	r3, s15
 8002428:	b21a      	sxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	809a      	strh	r2, [r3, #4]
	        printf("Heading reset: position = %ld\r\n", position);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	4619      	mov	r1, r3
 8002434:	4856      	ldr	r0, [pc, #344]	@ (8002590 <_ZN7HEADING3runEv+0x2f4>)
 8002436:	f007 fe43 	bl	800a0c0 <iprintf>
	    now = micros();
 800243a:	f001 fe13 	bl	8004064 <micros>
 800243e:	4602      	mov	r2, r0
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	641a      	str	r2, [r3, #64]	@ 0x40
	    dt = now - last_time;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244c:	1ad2      	subs	r2, r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	63da      	str	r2, [r3, #60]	@ 0x3c
	    last_time = now;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	645a      	str	r2, [r3, #68]	@ 0x44
	    headset = parser.get_headset();
 800245a:	484a      	ldr	r0, [pc, #296]	@ (8002584 <_ZN7HEADING3runEv+0x2e8>)
 800245c:	f7ff fe3a 	bl	80020d4 <_ZNK14COMMAND_PARSER11get_headsetEv>
 8002460:	4603      	mov	r3, r0
 8002462:	461a      	mov	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	609a      	str	r2, [r3, #8]
	    error = headset - position;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	1ad2      	subs	r2, r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	629a      	str	r2, [r3, #40]	@ 0x28
	    error_sum += error * dt;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247a:	461a      	mov	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002480:	4619      	mov	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34
	    if (error_sum > 1500000000) error_sum = 1500000000;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002496:	4a3f      	ldr	r2, [pc, #252]	@ (8002594 <_ZN7HEADING3runEv+0x2f8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	dd02      	ble.n	80024a2 <_ZN7HEADING3runEv+0x206>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3d      	ldr	r2, [pc, #244]	@ (8002594 <_ZN7HEADING3runEv+0x2f8>)
 80024a0:	635a      	str	r2, [r3, #52]	@ 0x34
	    if (error_sum < -1500000000) error_sum = -1500000000;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002598 <_ZN7HEADING3runEv+0x2fc>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	da02      	bge.n	80024b2 <_ZN7HEADING3runEv+0x216>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002598 <_ZN7HEADING3runEv+0x2fc>)
 80024b0:	635a      	str	r2, [r3, #52]	@ 0x34
	    ctrl = (Kp * (float)error)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	ed93 7a07 	vldr	s14, [r3, #28]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024c4:	ee27 7a27 	vmul.f32	s14, s14, s15
	         + (Ki * (float)error_sum / 1000000.0f)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	edd3 6a08 	vldr	s13, [r3, #32]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	ee07 3a90 	vmov	s15, r3
 80024d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024da:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024de:	ed9f 6a2f 	vldr	s12, [pc, #188]	@ 800259c <_ZN7HEADING3runEv+0x300>
 80024e2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80024e6:	ee37 7a27 	vadd.f32	s14, s14, s15
	         + (Kd * (float)error_diff * 1000000.0f / (float)dt);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002500:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800259c <_ZN7HEADING3runEv+0x300>
 8002504:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800250c:	ee07 3a90 	vmov	s15, r3
 8002510:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002514:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002518:	ee77 7a27 	vadd.f32	s15, s14, s15
	    ctrl = (Kp * (float)error)
 800251c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002520:	ee17 3a90 	vmov	r3, s15
 8002524:	b21a      	sxth	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	871a      	strh	r2, [r3, #56]	@ 0x38
	    printf("Control Effort: %ld\r\n", (int32_t)ctrl);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 8002530:	4619      	mov	r1, r3
 8002532:	481b      	ldr	r0, [pc, #108]	@ (80025a0 <_ZN7HEADING3runEv+0x304>)
 8002534:	f007 fdc4 	bl	800a0c0 <iprintf>
	    M1_eff = -ctrl;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 800253e:	425a      	negs	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	615a      	str	r2, [r3, #20]
	    M2_eff = ctrl;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	@ 0x38
 800254a:	461a      	mov	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	619a      	str	r2, [r3, #24]
	    if (parser.get_mode() != 'D') {
 8002550:	480c      	ldr	r0, [pc, #48]	@ (8002584 <_ZN7HEADING3runEv+0x2e8>)
 8002552:	f7ff fdcc 	bl	80020ee <_ZNK14COMMAND_PARSER8get_modeEv>
 8002556:	4603      	mov	r3, r0
 8002558:	2b44      	cmp	r3, #68	@ 0x44
 800255a:	bf14      	ite	ne
 800255c:	2301      	movne	r3, #1
 800255e:	2300      	moveq	r3, #0
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01e      	beq.n	80025a4 <_ZN7HEADING3runEv+0x308>
		state = S1_IDLE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	701a      	strb	r2, [r3, #0]
            break;
 800256c:	e01a      	b.n	80025a4 <_ZN7HEADING3runEv+0x308>
	    break;
 800256e:	bf00      	nop
 8002570:	e019      	b.n	80025a6 <_ZN7HEADING3runEv+0x30a>
            break;
 8002572:	bf00      	nop
 8002574:	e017      	b.n	80025a6 <_ZN7HEADING3runEv+0x30a>
 8002576:	bf00      	nop
 8002578:	43020000 	.word	0x43020000
 800257c:	437a0000 	.word	0x437a0000
 8002580:	20000640 	.word	0x20000640
 8002584:	20000698 	.word	0x20000698
 8002588:	0800c618 	.word	0x0800c618
 800258c:	200006a0 	.word	0x200006a0
 8002590:	0800c62c 	.word	0x0800c62c
 8002594:	59682f00 	.word	0x59682f00
 8002598:	a697d100 	.word	0xa697d100
 800259c:	49742400 	.word	0x49742400
 80025a0:	0800c64c 	.word	0x0800c64c
            break;
 80025a4:	bf00      	nop
    }
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop

080025b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025b4:	f001 fdfc 	bl	80041b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025b8:	f000 f84a 	bl	8002650 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025bc:	f000 fbfe 	bl	8002dbc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80025c0:	f000 fbdc 	bl	8002d7c <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 80025c4:	f000 f8b6 	bl	8002734 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80025c8:	f000 f910 	bl	80027ec <_ZL12MX_I2C1_Initv>
  MX_TIM1_Init();
 80025cc:	f000 f942 	bl	8002854 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 80025d0:	f000 fa44 	bl	8002a5c <_ZL12MX_TIM3_Initv>
  MX_TIM4_Init();
 80025d4:	f000 faa0 	bl	8002b18 <_ZL12MX_TIM4_Initv>
  MX_TIM5_Init();
 80025d8:	f000 fafc 	bl	8002bd4 <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 80025dc:	f000 fb72 	bl	8002cc4 <_ZL19MX_USART2_UART_Initv>
  MX_USART6_UART_Init();
 80025e0:	f000 fb9e 	bl	8002d20 <_ZL19MX_USART6_UART_Initv>
  MX_TIM2_Init();
 80025e4:	f000 f9de 	bl	80029a4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */
  UART_DMA_IDLE_Init(&huart2);	// Start DMA IDLE Line detection.
 80025e8:	4810      	ldr	r0, [pc, #64]	@ (800262c <main+0x7c>)
 80025ea:	f001 fd47 	bl	800407c <UART_DMA_IDLE_Init>

  Sensor_Init();  	//Initialization of BNO055 sensor groups
 80025ee:	f7ff faa3 	bl	8001b38 <Sensor_Init>

  // Code for setting modified velocity
  AR = htim1.Init.Period;
 80025f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <main+0x80>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <main+0x84>)
 80025fa:	601a      	str	r2, [r3, #0]
  //  V = (AR * 20) / 100;	// 20% Velocity Modifier
  V = 5000;	// Velocity setpoint in encoder counts per second
 80025fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002638 <main+0x88>)
 80025fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002602:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);	// Start timer 2 to allow use of time_utils
 8002604:	480d      	ldr	r0, [pc, #52]	@ (800263c <main+0x8c>)
 8002606:	f004 fdbd 	bl	8007184 <HAL_TIM_Base_Start>
//				  // this remains untested

      // The following block of code is meant for use while the robot is being controlled by my lab
      // partner's smart knob controller

      parser.parse();	// Run command parsing script to generate motor commands based on smart knob input
 800260a:	480d      	ldr	r0, [pc, #52]	@ (8002640 <main+0x90>)
 800260c:	f7ff fba6 	bl	8001d5c <_ZN14COMMAND_PARSER5parseEv>
      heading.run();	// Run heading control task to generate motor commands based on the robot's heading
 8002610:	480c      	ldr	r0, [pc, #48]	@ (8002644 <main+0x94>)
 8002612:	f7ff fe43 	bl	800229c <_ZN7HEADING3runEv>

      // The following block of code should always run, regardless of the controller input

      motor_task.run();		// Run motor control task to receive commands from controller tasks
 8002616:	480c      	ldr	r0, [pc, #48]	@ (8002648 <main+0x98>)
 8002618:	f000 fe32 	bl	8003280 <_ZN10MOTOR_TASK3runEv>
				  // and apply PWM duty cycle accordingly
      battery_check.run();	// Run battery check task to turn on an LED when battery is too low
 800261c:	480b      	ldr	r0, [pc, #44]	@ (800264c <main+0x9c>)
 800261e:	f7ff f9f3 	bl	8001a08 <_ZN13BATTERY_CHECK3runEv>
      HAL_Delay(1);		// Slight delay to prevent control loops from running too fast
 8002622:	2001      	movs	r0, #1
 8002624:	f001 fe36 	bl	8004294 <HAL_Delay>
      parser.parse();	// Run command parsing script to generate motor commands based on smart knob input
 8002628:	bf00      	nop
 800262a:	e7ee      	b.n	800260a <main+0x5a>
 800262c:	2000040c 	.word	0x2000040c
 8002630:	200002a4 	.word	0x200002a4
 8002634:	200006e8 	.word	0x200006e8
 8002638:	200006ec 	.word	0x200006ec
 800263c:	200002ec 	.word	0x200002ec
 8002640:	20000698 	.word	0x20000698
 8002644:	200004fc 	.word	0x200004fc
 8002648:	20000590 	.word	0x20000590
 800264c:	2000063c 	.word	0x2000063c

08002650 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b094      	sub	sp, #80	@ 0x50
 8002654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002656:	f107 0320 	add.w	r3, r7, #32
 800265a:	2230      	movs	r2, #48	@ 0x30
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f007 fe76 	bl	800a350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002664:	f107 030c 	add.w	r3, r7, #12
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	4b2c      	ldr	r3, [pc, #176]	@ (800272c <_Z18SystemClock_Configv+0xdc>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4a2b      	ldr	r2, [pc, #172]	@ (800272c <_Z18SystemClock_Configv+0xdc>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6413      	str	r3, [r2, #64]	@ 0x40
 8002684:	4b29      	ldr	r3, [pc, #164]	@ (800272c <_Z18SystemClock_Configv+0xdc>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002690:	2300      	movs	r3, #0
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	4b26      	ldr	r3, [pc, #152]	@ (8002730 <_Z18SystemClock_Configv+0xe0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a25      	ldr	r2, [pc, #148]	@ (8002730 <_Z18SystemClock_Configv+0xe0>)
 800269a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b23      	ldr	r3, [pc, #140]	@ (8002730 <_Z18SystemClock_Configv+0xe0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026a8:	607b      	str	r3, [r7, #4]
 80026aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026ac:	2301      	movs	r3, #1
 80026ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b6:	2302      	movs	r3, #2
 80026b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80026c0:	2319      	movs	r3, #25
 80026c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80026c4:	23c0      	movs	r3, #192	@ 0xc0
 80026c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026c8:	2302      	movs	r3, #2
 80026ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026cc:	2304      	movs	r3, #4
 80026ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026d0:	f107 0320 	add.w	r3, r7, #32
 80026d4:	4618      	mov	r0, r3
 80026d6:	f004 f8ad 	bl	8006834 <HAL_RCC_OscConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80026ea:	f000 fbe3 	bl	8002eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026ee:	230f      	movs	r3, #15
 80026f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026f2:	2302      	movs	r3, #2
 80026f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	2103      	movs	r1, #3
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fb0a 	bl	8006d24 <HAL_RCC_ClockConfig>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	bf14      	ite	ne
 8002716:	2301      	movne	r3, #1
 8002718:	2300      	moveq	r3, #0
 800271a:	b2db      	uxtb	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002720:	f000 fbc8 	bl	8002eb4 <Error_Handler>
  }
}
 8002724:	bf00      	nop
 8002726:	3750      	adds	r7, #80	@ 0x50
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40023800 	.word	0x40023800
 8002730:	40007000 	.word	0x40007000

08002734 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800273a:	463b      	mov	r3, r7
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002746:	4b26      	ldr	r3, [pc, #152]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002748:	4a26      	ldr	r2, [pc, #152]	@ (80027e4 <_ZL12MX_ADC1_Initv+0xb0>)
 800274a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800274c:	4b24      	ldr	r3, [pc, #144]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 800274e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002754:	4b22      	ldr	r3, [pc, #136]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002760:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002762:	2200      	movs	r2, #0
 8002764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002766:	4b1e      	ldr	r3, [pc, #120]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800276e:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002770:	2200      	movs	r2, #0
 8002772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002774:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002776:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <_ZL12MX_ADC1_Initv+0xb4>)
 8002778:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800277a:	4b19      	ldr	r3, [pc, #100]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 800277c:	2200      	movs	r2, #0
 800277e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002780:	4b17      	ldr	r3, [pc, #92]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002782:	2201      	movs	r2, #1
 8002784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002786:	4b16      	ldr	r3, [pc, #88]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002788:	2200      	movs	r2, #0
 800278a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800278e:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002790:	2201      	movs	r2, #1
 8002792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002794:	4812      	ldr	r0, [pc, #72]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 8002796:	f001 fda1 	bl	80042dc <HAL_ADC_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf14      	ite	ne
 80027a0:	2301      	movne	r3, #1
 80027a2:	2300      	moveq	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 80027aa:	f000 fb83 	bl	8002eb4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027ae:	2308      	movs	r3, #8
 80027b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80027b2:	2301      	movs	r3, #1
 80027b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027ba:	463b      	mov	r3, r7
 80027bc:	4619      	mov	r1, r3
 80027be:	4808      	ldr	r0, [pc, #32]	@ (80027e0 <_ZL12MX_ADC1_Initv+0xac>)
 80027c0:	f001 ff1c 	bl	80045fc <HAL_ADC_ConfigChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 80027d4:	f000 fb6e 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000208 	.word	0x20000208
 80027e4:	40012000 	.word	0x40012000
 80027e8:	0f000001 	.word	0x0f000001

080027ec <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027f0:	4b15      	ldr	r3, [pc, #84]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 80027f2:	4a16      	ldr	r2, [pc, #88]	@ (800284c <_ZL12MX_I2C1_Initv+0x60>)
 80027f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 80027f8:	4a15      	ldr	r2, [pc, #84]	@ (8002850 <_ZL12MX_I2C1_Initv+0x64>)
 80027fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002802:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 800280a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800280e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002810:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 8002818:	2200      	movs	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 800281e:	2200      	movs	r2, #0
 8002820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 8002824:	2200      	movs	r2, #0
 8002826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002828:	4807      	ldr	r0, [pc, #28]	@ (8002848 <_ZL12MX_I2C1_Initv+0x5c>)
 800282a:	f002 ffdf 	bl	80057ec <HAL_I2C_Init>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800283e:	f000 fb39 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000250 	.word	0x20000250
 800284c:	40005400 	.word	0x40005400
 8002850:	00061a80 	.word	0x00061a80

08002854 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b092      	sub	sp, #72	@ 0x48
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002864:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
 8002874:	615a      	str	r2, [r3, #20]
 8002876:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2220      	movs	r2, #32
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f007 fd66 	bl	800a350 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002884:	4b45      	ldr	r3, [pc, #276]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 8002886:	4a46      	ldr	r2, [pc, #280]	@ (80029a0 <_ZL12MX_TIM1_Initv+0x14c>)
 8002888:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800288a:	4b44      	ldr	r3, [pc, #272]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 800288c:	2200      	movs	r2, #0
 800288e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002890:	4b42      	ldr	r3, [pc, #264]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 8002892:	2200      	movs	r2, #0
 8002894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4799;
 8002896:	4b41      	ldr	r3, [pc, #260]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 8002898:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 800289c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289e:	4b3f      	ldr	r3, [pc, #252]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80028a4:	4b3d      	ldr	r3, [pc, #244]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028aa:	4b3c      	ldr	r3, [pc, #240]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028b0:	483a      	ldr	r0, [pc, #232]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 80028b2:	f004 fcc1 	bl	8007238 <HAL_TIM_PWM_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf14      	ite	ne
 80028bc:	2301      	movne	r3, #1
 80028be:	2300      	moveq	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80028c6:	f000 faf5 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80028ca:	2350      	movs	r3, #80	@ 0x50
 80028cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80028d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80028d6:	4619      	mov	r1, r3
 80028d8:	4830      	ldr	r0, [pc, #192]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 80028da:	f005 fba7 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf14      	ite	ne
 80028e4:	2301      	movne	r3, #1
 80028e6:	2300      	moveq	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 80028ee:	f000 fae1 	bl	8002eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f2:	2360      	movs	r3, #96	@ 0x60
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80028f6:	2300      	movs	r3, #0
 80028f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80028fa:	2302      	movs	r3, #2
 80028fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028fe:	2300      	movs	r3, #0
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002906:	2300      	movs	r3, #0
 8002908:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800290e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002912:	2200      	movs	r2, #0
 8002914:	4619      	mov	r1, r3
 8002916:	4821      	ldr	r0, [pc, #132]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 8002918:	f004 ff26 	bl	8007768 <HAL_TIM_PWM_ConfigChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	bf14      	ite	ne
 8002922:	2301      	movne	r3, #1
 8002924:	2300      	moveq	r3, #0
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 800292c:	f000 fac2 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002934:	2204      	movs	r2, #4
 8002936:	4619      	mov	r1, r3
 8002938:	4818      	ldr	r0, [pc, #96]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 800293a:	f004 ff15 	bl	8007768 <HAL_TIM_PWM_ConfigChannel>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <_ZL12MX_TIM1_Initv+0xfe>
  {
    Error_Handler();
 800294e:	f000 fab1 	bl	8002eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800296a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002970:	1d3b      	adds	r3, r7, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4809      	ldr	r0, [pc, #36]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 8002976:	f005 fbc7 	bl	8008108 <HAL_TIMEx_ConfigBreakDeadTime>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <_ZL12MX_TIM1_Initv+0x13a>
  {
    Error_Handler();
 800298a:	f000 fa93 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800298e:	4803      	ldr	r0, [pc, #12]	@ (800299c <_ZL12MX_TIM1_Initv+0x148>)
 8002990:	f001 f936 	bl	8003c00 <HAL_TIM_MspPostInit>

}
 8002994:	bf00      	nop
 8002996:	3748      	adds	r7, #72	@ 0x48
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200002a4 	.word	0x200002a4
 80029a0:	40010000 	.word	0x40010000

080029a4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]
 80029b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b8:	463b      	mov	r3, r7
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029c0:	4b25      	ldr	r3, [pc, #148]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80029c8:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029ca:	225f      	movs	r2, #95	@ 0x5f
 80029cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ce:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80029d4:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029d6:	f04f 32ff 	mov.w	r2, #4294967295
 80029da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029e8:	481b      	ldr	r0, [pc, #108]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 80029ea:	f004 fb7b 	bl	80070e4 <HAL_TIM_Base_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 80029fe:	f000 fa59 	bl	8002eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a08:	f107 0308 	add.w	r3, r7, #8
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	4812      	ldr	r0, [pc, #72]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a10:	f004 ff6c 	bl	80078ec <HAL_TIM_ConfigClockSource>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf14      	ite	ne
 8002a1a:	2301      	movne	r3, #1
 8002a1c:	2300      	moveq	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <_ZL12MX_TIM2_Initv+0x84>
  {
    Error_Handler();
 8002a24:	f000 fa46 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a30:	463b      	mov	r3, r7
 8002a32:	4619      	mov	r1, r3
 8002a34:	4808      	ldr	r0, [pc, #32]	@ (8002a58 <_ZL12MX_TIM2_Initv+0xb4>)
 8002a36:	f005 faf9 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	bf14      	ite	ne
 8002a40:	2301      	movne	r3, #1
 8002a42:	2300      	moveq	r3, #0
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <_ZL12MX_TIM2_Initv+0xaa>
  {
    Error_Handler();
 8002a4a:	f000 fa33 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200002ec 	.word	0x200002ec

08002a5c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	@ 0x30
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a62:	f107 030c 	add.w	r3, r7, #12
 8002a66:	2224      	movs	r2, #36	@ 0x24
 8002a68:	2100      	movs	r1, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f007 fc70 	bl	800a350 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002a7a:	4a26      	ldr	r2, [pc, #152]	@ (8002b14 <_ZL12MX_TIM3_Initv+0xb8>)
 8002a7c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a7e:	4b24      	ldr	r3, [pc, #144]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a84:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a8a:	4b21      	ldr	r3, [pc, #132]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002a8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a90:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aba:	2300      	movs	r3, #0
 8002abc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002ac2:	f107 030c 	add.w	r3, r7, #12
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4811      	ldr	r0, [pc, #68]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002aca:	f004 fd19 	bl	8007500 <HAL_TIM_Encoder_Init>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8002ade:	f000 f9e9 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aea:	1d3b      	adds	r3, r7, #4
 8002aec:	4619      	mov	r1, r3
 8002aee:	4808      	ldr	r0, [pc, #32]	@ (8002b10 <_ZL12MX_TIM3_Initv+0xb4>)
 8002af0:	f005 fa9c 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8002b04:	f000 f9d6 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b08:	bf00      	nop
 8002b0a:	3730      	adds	r7, #48	@ 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20000334 	.word	0x20000334
 8002b14:	40000400 	.word	0x40000400

08002b18 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	@ 0x30
 8002b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b1e:	f107 030c 	add.w	r3, r7, #12
 8002b22:	2224      	movs	r2, #36	@ 0x24
 8002b24:	2100      	movs	r1, #0
 8002b26:	4618      	mov	r0, r3
 8002b28:	f007 fc12 	bl	800a350 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b34:	4b25      	ldr	r3, [pc, #148]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b36:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <_ZL12MX_TIM4_Initv+0xb8>)
 8002b38:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b3a:	4b24      	ldr	r3, [pc, #144]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b40:	4b22      	ldr	r3, [pc, #136]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b46:	4b21      	ldr	r3, [pc, #132]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b62:	2301      	movs	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b72:	2301      	movs	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b7e:	f107 030c 	add.w	r3, r7, #12
 8002b82:	4619      	mov	r1, r3
 8002b84:	4811      	ldr	r0, [pc, #68]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002b86:	f004 fcbb 	bl	8007500 <HAL_TIM_Encoder_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8002b9a:	f000 f98b 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4808      	ldr	r0, [pc, #32]	@ (8002bcc <_ZL12MX_TIM4_Initv+0xb4>)
 8002bac:	f005 fa3e 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8002bc0:	f000 f978 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002bc4:	bf00      	nop
 8002bc6:	3730      	adds	r7, #48	@ 0x30
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	2000037c 	.word	0x2000037c
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bda:	f107 0320 	add.w	r3, r7, #32
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002be4:	1d3b      	adds	r3, r7, #4
 8002be6:	2200      	movs	r2, #0
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	605a      	str	r2, [r3, #4]
 8002bec:	609a      	str	r2, [r3, #8]
 8002bee:	60da      	str	r2, [r3, #12]
 8002bf0:	611a      	str	r2, [r3, #16]
 8002bf2:	615a      	str	r2, [r3, #20]
 8002bf4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bf6:	4b31      	ldr	r3, [pc, #196]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002bf8:	4a31      	ldr	r2, [pc, #196]	@ (8002cc0 <_ZL12MX_TIM5_Initv+0xec>)
 8002bfa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002bfc:	4b2f      	ldr	r3, [pc, #188]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c02:	4b2e      	ldr	r3, [pc, #184]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4799;
 8002c08:	4b2c      	ldr	r3, [pc, #176]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c0a:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002c0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c10:	4b2a      	ldr	r3, [pc, #168]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c16:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002c1c:	4827      	ldr	r0, [pc, #156]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c1e:	f004 fb0b 	bl	8007238 <HAL_TIM_PWM_Init>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <_ZL12MX_TIM5_Initv+0x62>
  {
    Error_Handler();
 8002c32:	f000 f93f 	bl	8002eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002c36:	2350      	movs	r3, #80	@ 0x50
 8002c38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c3e:	f107 0320 	add.w	r3, r7, #32
 8002c42:	4619      	mov	r1, r3
 8002c44:	481d      	ldr	r0, [pc, #116]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c46:	f005 f9f1 	bl	800802c <HAL_TIMEx_MasterConfigSynchronization>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	bf14      	ite	ne
 8002c50:	2301      	movne	r3, #1
 8002c52:	2300      	moveq	r3, #0
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <_ZL12MX_TIM5_Initv+0x8a>
  {
    Error_Handler();
 8002c5a:	f000 f92b 	bl	8002eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c5e:	2360      	movs	r3, #96	@ 0x60
 8002c60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002c66:	2302      	movs	r3, #2
 8002c68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c6e:	1d3b      	adds	r3, r7, #4
 8002c70:	2200      	movs	r2, #0
 8002c72:	4619      	mov	r1, r3
 8002c74:	4811      	ldr	r0, [pc, #68]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c76:	f004 fd77 	bl	8007768 <HAL_TIM_PWM_ConfigChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <_ZL12MX_TIM5_Initv+0xba>
  {
    Error_Handler();
 8002c8a:	f000 f913 	bl	8002eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	2204      	movs	r2, #4
 8002c92:	4619      	mov	r1, r3
 8002c94:	4809      	ldr	r0, [pc, #36]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002c96:	f004 fd67 	bl	8007768 <HAL_TIM_PWM_ConfigChannel>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 8002caa:	f000 f903 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002cae:	4803      	ldr	r0, [pc, #12]	@ (8002cbc <_ZL12MX_TIM5_Initv+0xe8>)
 8002cb0:	f000 ffa6 	bl	8003c00 <HAL_TIM_MspPostInit>

}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	@ 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	200003c4 	.word	0x200003c4
 8002cc0:	40000c00 	.word	0x40000c00

08002cc4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc8:	4b13      	ldr	r3, [pc, #76]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cca:	4a14      	ldr	r2, [pc, #80]	@ (8002d1c <_ZL19MX_USART2_UART_Initv+0x58>)
 8002ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cce:	4b12      	ldr	r3, [pc, #72]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd6:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cea:	220c      	movs	r2, #12
 8002cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cee:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cfa:	4807      	ldr	r0, [pc, #28]	@ (8002d18 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002cfc:	f005 fa56 	bl	80081ac <HAL_UART_Init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002d10:	f000 f8d0 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	2000040c 	.word	0x2000040c
 8002d1c:	40004400 	.word	0x40004400

08002d20 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002d24:	4b13      	ldr	r3, [pc, #76]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d26:	4a14      	ldr	r2, [pc, #80]	@ (8002d78 <_ZL19MX_USART6_UART_Initv+0x58>)
 8002d28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002d2a:	4b12      	ldr	r3, [pc, #72]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002d32:	4b10      	ldr	r3, [pc, #64]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002d38:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002d44:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d46:	220c      	movs	r2, #12
 8002d48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d50:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002d56:	4807      	ldr	r0, [pc, #28]	@ (8002d74 <_ZL19MX_USART6_UART_Initv+0x54>)
 8002d58:	f005 fa28 	bl	80081ac <HAL_UART_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <_ZL19MX_USART6_UART_Initv+0x50>
  {
    Error_Handler();
 8002d6c:	f000 f8a2 	bl	8002eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002d70:	bf00      	nop
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	20000454 	.word	0x20000454
 8002d78:	40011400 	.word	0x40011400

08002d7c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	4b0c      	ldr	r3, [pc, #48]	@ (8002db8 <_ZL11MX_DMA_Initv+0x3c>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002db8 <_ZL11MX_DMA_Initv+0x3c>)
 8002d8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <_ZL11MX_DMA_Initv+0x3c>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2100      	movs	r1, #0
 8002da2:	2010      	movs	r0, #16
 8002da4:	f001 ff33 	bl	8004c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002da8:	2010      	movs	r0, #16
 8002daa:	f001 ff4c 	bl	8004c46 <HAL_NVIC_EnableIRQ>

}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023800 	.word	0x40023800

08002dbc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	60da      	str	r2, [r3, #12]
 8002dd0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a2a      	ldr	r2, [pc, #168]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b28      	ldr	r3, [pc, #160]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	4b24      	ldr	r3, [pc, #144]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a23      	ldr	r2, [pc, #140]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b21      	ldr	r3, [pc, #132]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e84 <_ZL12MX_GPIO_Initv+0xc8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8002e26:	2200      	movs	r2, #0
 8002e28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e2c:	4816      	ldr	r0, [pc, #88]	@ (8002e88 <_ZL12MX_GPIO_Initv+0xcc>)
 8002e2e:	f002 fcab 	bl	8005788 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e44:	f107 030c 	add.w	r3, r7, #12
 8002e48:	4619      	mov	r1, r3
 8002e4a:	480f      	ldr	r0, [pc, #60]	@ (8002e88 <_ZL12MX_GPIO_Initv+0xcc>)
 8002e4c:	f002 fb18 	bl	8005480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e56:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	4619      	mov	r1, r3
 8002e66:	4808      	ldr	r0, [pc, #32]	@ (8002e88 <_ZL12MX_GPIO_Initv+0xcc>)
 8002e68:	f002 fb0a 	bl	8005480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2028      	movs	r0, #40	@ 0x28
 8002e72:	f001 fecc 	bl	8004c0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002e76:	2028      	movs	r0, #40	@ 0x28
 8002e78:	f001 fee5 	bl	8004c46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002e7c:	bf00      	nop
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020400 	.word	0x40020400

08002e8c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

// User Button Interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_15) {  // PB15
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e9c:	d102      	bne.n	8002ea4 <HAL_GPIO_EXTI_Callback+0x18>
        USER = 1;  // Set User Button flag
 8002e9e:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <HAL_GPIO_EXTI_Callback+0x24>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
    }
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	200006a0 	.word	0x200006a0

08002eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb8:	b672      	cpsid	i
}
 8002eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <Error_Handler+0x8>

08002ec0 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    HEADING heading = HEADING();
 8002ec4:	4809      	ldr	r0, [pc, #36]	@ (8002eec <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8002ec6:	f7ff f9c3 	bl	8002250 <_ZN7HEADINGC1Ev>
    BALANCE balance = BALANCE();
 8002eca:	4809      	ldr	r0, [pc, #36]	@ (8002ef0 <_Z41__static_initialization_and_destruction_0v+0x30>)
 8002ecc:	f7fe fd68 	bl	80019a0 <_ZN7BALANCEC1Ev>
    MOTOR_TASK motor_task = MOTOR_TASK();
 8002ed0:	4808      	ldr	r0, [pc, #32]	@ (8002ef4 <_Z41__static_initialization_and_destruction_0v+0x34>)
 8002ed2:	f000 f959 	bl	8003188 <_ZN10MOTOR_TASKC1Ev>
    BLUETOOTH bluetooth = BLUETOOTH();
 8002ed6:	4808      	ldr	r0, [pc, #32]	@ (8002ef8 <_Z41__static_initialization_and_destruction_0v+0x38>)
 8002ed8:	f7fe fe00 	bl	8001adc <_ZN9BLUETOOTHC1Ev>
    BATTERY_CHECK battery_check = BATTERY_CHECK();
 8002edc:	4807      	ldr	r0, [pc, #28]	@ (8002efc <_Z41__static_initialization_and_destruction_0v+0x3c>)
 8002ede:	f7fe fd85 	bl	80019ec <_ZN13BATTERY_CHECKC1Ev>
    COMMAND_PARSER parser;
 8002ee2:	4807      	ldr	r0, [pc, #28]	@ (8002f00 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8002ee4:	f7fe fe70 	bl	8001bc8 <_ZN14COMMAND_PARSERC1Ev>
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	200004fc 	.word	0x200004fc
 8002ef0:	20000544 	.word	0x20000544
 8002ef4:	20000590 	.word	0x20000590
 8002ef8:	20000634 	.word	0x20000634
 8002efc:	2000063c 	.word	0x2000063c
 8002f00:	20000698 	.word	0x20000698

08002f04 <_GLOBAL__sub_I_hadc1>:
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	f7ff ffda 	bl	8002ec0 <_Z41__static_initialization_and_destruction_0v>
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <motor_enable>:
/**
 * @brief Enables both PWM channels for the motor.
 * @param p_mot Pointer to motor object to enable.
 * @details Starts the timer's PWM outputs on the assigned motor channels.
 */
void motor_enable(motor_t* p_mot) {
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(p_mot->htim, p_mot->ch_A);  // Start Timer Channel A
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	4610      	mov	r0, r2
 8002f22:	f004 f9d9 	bl	80072d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(p_mot->htim, p_mot->ch_B);  // Start Timer Channel B
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f004 f9d1 	bl	80072d8 <HAL_TIM_PWM_Start>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <motor_disable>:
/**
 * @brief Disables both PWM channels for the motor.
 * @param p_mot Pointer to motor object to disable.
 * @details Stops the timer's PWM outputs on the assigned motor channels.
 */
void motor_disable(motor_t* p_mot) {
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(p_mot->htim, p_mot->ch_A);   // Stop Timer Channel A
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4610      	mov	r0, r2
 8002f52:	f004 fa71 	bl	8007438 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(p_mot->htim, p_mot->ch_B);   // Stop Timer Channel B
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4610      	mov	r0, r2
 8002f62:	f004 fa69 	bl	8007438 <HAL_TIM_PWM_Stop>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <motor_set_duty>:
 * @param duty Signed value representing the duty cycle (positive = forward, negative = reverse).
 * @details Saturates the input duty cycle to match the timer auto-reload (ARR) value.
 *          Enforces a deadzone below which effort is ignored. Uses two complementary
 *          PWM channels to drive H-bridge outputs.
 */
void motor_set_duty(motor_t* p_mot, int32_t duty) {
 8002f6e:	b480      	push	{r7}
 8002f70:	b087      	sub	sp, #28
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
 8002f76:	6039      	str	r1, [r7, #0]
    // Get the auto-reload value (ARR) for max PWM range
    int32_t AR = p_mot->htim->Init.Period;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	617b      	str	r3, [r7, #20]

    // Clamp duty cycle to valid range [-AR, AR]
    if (duty > AR) duty = AR;
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	dd01      	ble.n	8002f8c <motor_set_duty+0x1e>
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	603b      	str	r3, [r7, #0]
    if (duty < -AR) duty = -AR;
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	425b      	negs	r3, r3
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	da02      	bge.n	8002f9c <motor_set_duty+0x2e>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	425b      	negs	r3, r3
 8002f9a:	603b      	str	r3, [r7, #0]

    // Deadzone filtering
    int32_t abs_duty = (duty < 0) ? -duty : duty;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bfb8      	it	lt
 8002fa2:	425b      	neglt	r3, r3
 8002fa4:	613b      	str	r3, [r7, #16]
    if (abs_duty < MOTOR_DEADZONE_PWM) {
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8002fac:	da03      	bge.n	8002fb6 <motor_set_duty+0x48>
        duty = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	603b      	str	r3, [r7, #0]
        abs_duty = 0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	613b      	str	r3, [r7, #16]
    }

    // Store current duty cycle in struct
    p_mot->duty = duty;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	601a      	str	r2, [r3, #0]

    // Determine PWM pulse width (absolute value of duty)
    uint32_t pulse = (duty > 0) ? duty : -duty;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bfb8      	it	lt
 8002fc2:	425b      	neglt	r3, r3
 8002fc4:	60fb      	str	r3, [r7, #12]

    if (duty > 0) {
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	dd46      	ble.n	800305a <motor_set_duty+0xec>
        // Forward direction
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_A, pulse);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <motor_set_duty+0x72>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fde:	e018      	b.n	8003012 <motor_set_duty+0xa4>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d105      	bne.n	8002ff4 <motor_set_duty+0x86>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6393      	str	r3, [r2, #56]	@ 0x38
 8002ff2:	e00e      	b.n	8003012 <motor_set_duty+0xa4>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d105      	bne.n	8003008 <motor_set_duty+0x9a>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003006:	e004      	b.n	8003012 <motor_set_duty+0xa4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <motor_set_duty+0xb8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2200      	movs	r2, #0
 8003022:	635a      	str	r2, [r3, #52]	@ 0x34
    else {
        // Motor stopped
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_A, 0);
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
    }
}
 8003024:	e0aa      	b.n	800317c <motor_set_duty+0x20e>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	2b04      	cmp	r3, #4
 800302c:	d105      	bne.n	800303a <motor_set_duty+0xcc>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2300      	movs	r3, #0
 8003036:	6393      	str	r3, [r2, #56]	@ 0x38
 8003038:	e0a0      	b.n	800317c <motor_set_duty+0x20e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b08      	cmp	r3, #8
 8003040:	d105      	bne.n	800304e <motor_set_duty+0xe0>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800304c:	e096      	b.n	800317c <motor_set_duty+0x20e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2300      	movs	r3, #0
 8003056:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003058:	e090      	b.n	800317c <motor_set_duty+0x20e>
    else if (duty < 0) {
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	da46      	bge.n	80030ee <motor_set_duty+0x180>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_A, 0);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <motor_set_duty+0x106>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2200      	movs	r2, #0
 8003070:	635a      	str	r2, [r3, #52]	@ 0x34
 8003072:	e018      	b.n	80030a6 <motor_set_duty+0x138>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d105      	bne.n	8003088 <motor_set_duty+0x11a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	6393      	str	r3, [r2, #56]	@ 0x38
 8003086:	e00e      	b.n	80030a6 <motor_set_duty+0x138>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d105      	bne.n	800309c <motor_set_duty+0x12e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	2300      	movs	r3, #0
 8003098:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800309a:	e004      	b.n	80030a6 <motor_set_duty+0x138>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, pulse);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d105      	bne.n	80030ba <motor_set_duty+0x14c>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80030b8:	e060      	b.n	800317c <motor_set_duty+0x20e>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, pulse);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d105      	bne.n	80030ce <motor_set_duty+0x160>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6393      	str	r3, [r2, #56]	@ 0x38
 80030cc:	e056      	b.n	800317c <motor_set_duty+0x20e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d105      	bne.n	80030e2 <motor_set_duty+0x174>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80030e0:	e04c      	b.n	800317c <motor_set_duty+0x20e>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80030ec:	e046      	b.n	800317c <motor_set_duty+0x20e>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_A, 0);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <motor_set_duty+0x194>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2200      	movs	r2, #0
 80030fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8003100:	e018      	b.n	8003134 <motor_set_duty+0x1c6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b04      	cmp	r3, #4
 8003108:	d105      	bne.n	8003116 <motor_set_duty+0x1a8>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	2300      	movs	r3, #0
 8003112:	6393      	str	r3, [r2, #56]	@ 0x38
 8003114:	e00e      	b.n	8003134 <motor_set_duty+0x1c6>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b08      	cmp	r3, #8
 800311c:	d105      	bne.n	800312a <motor_set_duty+0x1bc>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2300      	movs	r3, #0
 8003126:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003128:	e004      	b.n	8003134 <motor_set_duty+0x1c6>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2300      	movs	r3, #0
 8003132:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <motor_set_duty+0x1da>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2200      	movs	r2, #0
 8003144:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003146:	e019      	b.n	800317c <motor_set_duty+0x20e>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b04      	cmp	r3, #4
 800314e:	d105      	bne.n	800315c <motor_set_duty+0x1ee>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	2300      	movs	r3, #0
 8003158:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800315a:	e00f      	b.n	800317c <motor_set_duty+0x20e>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b08      	cmp	r3, #8
 8003162:	d105      	bne.n	8003170 <motor_set_duty+0x202>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	2300      	movs	r3, #0
 800316c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800316e:	e005      	b.n	800317c <motor_set_duty+0x20e>
        __HAL_TIM_SET_COMPARE(p_mot->htim, p_mot->ch_B, 0);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2300      	movs	r3, #0
 8003178:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800317a:	e7ff      	b.n	800317c <motor_set_duty+0x20e>
 800317c:	bf00      	nop
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <_ZN10MOTOR_TASKC1Ev>:

/**
 * @brief Constructor for the MOTOR_TASK class.
 * @details Initializes the FSM state and configures motor and encoder objects.
 */
MOTOR_TASK::MOTOR_TASK() : state(S0_INIT),
 8003188:	b490      	push	{r4, r7}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	701a      	strb	r2, [r3, #0]
motor1{ .duty = 0, .htim = &htim1, .ch_A = TIM_CHANNEL_1, .ch_B = TIM_CHANNEL_2 },
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <_ZN10MOTOR_TASKC1Ev+0x38>)
 800319a:	1d1c      	adds	r4, r3, #4
 800319c:	4613      	mov	r3, r2
 800319e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
motor2{ .duty = 0, .htim = &htim5, .ch_A = TIM_CHANNEL_1, .ch_B = TIM_CHANNEL_2 }
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a07      	ldr	r2, [pc, #28]	@ (80031c4 <_ZN10MOTOR_TASKC1Ev+0x3c>)
 80031a8:	f103 0414 	add.w	r4, r3, #20
 80031ac:	4613      	mov	r3, r2
 80031ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
{

}
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc90      	pop	{r4, r7}
 80031be:	4770      	bx	lr
 80031c0:	0800c664 	.word	0x0800c664
 80031c4:	0800c674 	.word	0x0800c674

080031c8 <_ZN10MOTOR_TASK10should_runEv>:

/**
 * @brief Checks whether the motor task should be running.
 * @return True if any setpoints or efforts from control modules are non-zero.
 */
bool MOTOR_TASK::should_run() {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
    return (parser.get_M1_set() != 0) ||
 80031d0:	4827      	ldr	r0, [pc, #156]	@ (8003270 <_ZN10MOTOR_TASK10should_runEv+0xa8>)
 80031d2:	f7fe ff65 	bl	80020a0 <_ZNK14COMMAND_PARSER10get_M1_setEv>
 80031d6:	4603      	mov	r3, r0
           (parser.get_M2_set() != 0) ||
           (bluetooth.get_M1_set() != 0) ||
           (bluetooth.get_M2_set() != 0) ||
           (heading.get_M1_eff() != 0.0f) ||
           (heading.get_M2_eff() != 0.0f) ||
           (balance.get_M1_eff() != 0.0f) ||
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d141      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (parser.get_M2_set() != 0) ||
 80031dc:	4824      	ldr	r0, [pc, #144]	@ (8003270 <_ZN10MOTOR_TASK10should_runEv+0xa8>)
 80031de:	f7fe ff6c 	bl	80020ba <_ZNK14COMMAND_PARSER10get_M2_setEv>
 80031e2:	4603      	mov	r3, r0
    return (parser.get_M1_set() != 0) ||
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d13b      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (bluetooth.get_M1_set() != 0) ||
 80031e8:	4822      	ldr	r0, [pc, #136]	@ (8003274 <_ZN10MOTOR_TASK10should_runEv+0xac>)
 80031ea:	f7fe fc8b 	bl	8001b04 <_ZN9BLUETOOTH10get_M1_setEv>
 80031ee:	4603      	mov	r3, r0
           (parser.get_M2_set() != 0) ||
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d135      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (bluetooth.get_M2_set() != 0) ||
 80031f4:	481f      	ldr	r0, [pc, #124]	@ (8003274 <_ZN10MOTOR_TASK10should_runEv+0xac>)
 80031f6:	f7fe fc92 	bl	8001b1e <_ZN9BLUETOOTH10get_M2_setEv>
 80031fa:	4603      	mov	r3, r0
           (bluetooth.get_M1_set() != 0) ||
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d12f      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (heading.get_M1_eff() != 0.0f) ||
 8003200:	481d      	ldr	r0, [pc, #116]	@ (8003278 <_ZN10MOTOR_TASK10should_runEv+0xb0>)
 8003202:	f7ff f833 	bl	800226c <_ZN7HEADING10get_M1_effEv>
 8003206:	ee07 0a90 	vmov	s15, r0
 800320a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
           (bluetooth.get_M2_set() != 0) ||
 800320e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003216:	d123      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (heading.get_M2_eff() != 0.0f) ||
 8003218:	4817      	ldr	r0, [pc, #92]	@ (8003278 <_ZN10MOTOR_TASK10should_runEv+0xb0>)
 800321a:	f7ff f833 	bl	8002284 <_ZN7HEADING10get_M2_effEv>
 800321e:	ee07 0a90 	vmov	s15, r0
 8003222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
           (heading.get_M1_eff() != 0.0f) ||
 8003226:	eef5 7a40 	vcmp.f32	s15, #0.0
 800322a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322e:	d117      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (balance.get_M1_eff() != 0.0f) ||
 8003230:	4812      	ldr	r0, [pc, #72]	@ (800327c <_ZN10MOTOR_TASK10should_runEv+0xb4>)
 8003232:	f7fe fbc3 	bl	80019bc <_ZN7BALANCE10get_M1_effEv>
 8003236:	ee07 0a90 	vmov	s15, r0
 800323a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
           (heading.get_M2_eff() != 0.0f) ||
 800323e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	d10b      	bne.n	8003260 <_ZN10MOTOR_TASK10should_runEv+0x98>
           (balance.get_M2_eff() != 0.0f);
 8003248:	480c      	ldr	r0, [pc, #48]	@ (800327c <_ZN10MOTOR_TASK10should_runEv+0xb4>)
 800324a:	f7fe fbc3 	bl	80019d4 <_ZN7BALANCE10get_M2_effEv>
 800324e:	ee07 0a90 	vmov	s15, r0
 8003252:	eef8 7ae7 	vcvt.f32.s32	s15, s15
           (balance.get_M1_eff() != 0.0f) ||
 8003256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	d001      	beq.n	8003264 <_ZN10MOTOR_TASK10should_runEv+0x9c>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <_ZN10MOTOR_TASK10should_runEv+0x9e>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	20000698 	.word	0x20000698
 8003274:	20000634 	.word	0x20000634
 8003278:	200004fc 	.word	0x200004fc
 800327c:	20000544 	.word	0x20000544

08003280 <_ZN10MOTOR_TASK3runEv>:
 * @brief Executes one iteration of the MOTOR_TASK FSM.
 * @details Manages motor state transitions, runs PID control using encoder feedback,
 *          and integrates control efforts from balance and heading modules.
 */
void MOTOR_TASK::run(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	ed2d 8b02 	vpush	{d8}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
    switch (state)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b02      	cmp	r3, #2
 8003292:	f000 80a7 	beq.w	80033e4 <_ZN10MOTOR_TASK3runEv+0x164>
 8003296:	2b02      	cmp	r3, #2
 8003298:	f300 82a3 	bgt.w	80037e2 <_ZN10MOTOR_TASK3runEv+0x562>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d002      	beq.n	80032a6 <_ZN10MOTOR_TASK3runEv+0x26>
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d053      	beq.n	800334c <_ZN10MOTOR_TASK3runEv+0xcc>
 80032a4:	e29d      	b.n	80037e2 <_ZN10MOTOR_TASK3runEv+0x562>
    {
        case S0_INIT:
            // Initialize motors and encoders
            motor_enable(&motor1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fe2f 	bl	8002f0e <motor_enable>
            motor_enable(&motor2);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3314      	adds	r3, #20
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fe2a 	bl	8002f0e <motor_enable>
            M1_set = 0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	859a      	strh	r2, [r3, #44]	@ 0x2c
            M2_set = 0;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
            motor_set_duty(&motor1, M1_set);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1d1a      	adds	r2, r3, #4
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80032d0:	4619      	mov	r1, r3
 80032d2:	4610      	mov	r0, r2
 80032d4:	f7ff fe4b 	bl	8002f6e <motor_set_duty>
            motor_set_duty(&motor2, M2_set);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f103 0214 	add.w	r2, r3, #20
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f7ff fe41 	bl	8002f6e <motor_set_duty>

            encoder_init(&encoder1, &htim3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3330      	adds	r3, #48	@ 0x30
 80032f0:	494c      	ldr	r1, [pc, #304]	@ (8003424 <_ZN10MOTOR_TASK3runEv+0x1a4>)
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe ff07 	bl	8002106 <encoder_init>
            encoder_init(&encoder2, &htim4);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3348      	adds	r3, #72	@ 0x48
 80032fc:	494a      	ldr	r1, [pc, #296]	@ (8003428 <_ZN10MOTOR_TASK3runEv+0x1a8>)
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe ff01 	bl	8002106 <encoder_init>
            encoder_reset(&encoder1);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3330      	adds	r3, #48	@ 0x30
 8003308:	4618      	mov	r0, r3
 800330a:	f7fe ff82 	bl	8002212 <encoder_reset>
            encoder_reset(&encoder2);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3348      	adds	r3, #72	@ 0x48
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe ff7d 	bl	8002212 <encoder_reset>

            // Set PID gains
            Kp1 = 1.2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a44      	ldr	r2, [pc, #272]	@ (800342c <_ZN10MOTOR_TASK3runEv+0x1ac>)
 800331c:	661a      	str	r2, [r3, #96]	@ 0x60
            Ki1 = 6;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a43      	ldr	r2, [pc, #268]	@ (8003430 <_ZN10MOTOR_TASK3runEv+0x1b0>)
 8003322:	665a      	str	r2, [r3, #100]	@ 0x64
            Kd1 = 0.0f;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	669a      	str	r2, [r3, #104]	@ 0x68
            Kp2 = 1.2;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a3f      	ldr	r2, [pc, #252]	@ (800342c <_ZN10MOTOR_TASK3runEv+0x1ac>)
 8003330:	67da      	str	r2, [r3, #124]	@ 0x7c
            Ki2 = 6;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a3e      	ldr	r2, [pc, #248]	@ (8003430 <_ZN10MOTOR_TASK3runEv+0x1b0>)
 8003336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
            Kd2 = 0.0f;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            state = S1_IDLE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
            break;
 800334a:	e258      	b.n	80037fe <_ZN10MOTOR_TASK3runEv+0x57e>

        case S1_IDLE:
            // Motors idle and waiting for activity
            motor_set_duty(&motor1, 0);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3304      	adds	r3, #4
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fe0b 	bl	8002f6e <motor_set_duty>
            motor_set_duty(&motor2, 0);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3314      	adds	r3, #20
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f7ff fe05 	bl	8002f6e <motor_set_duty>

            encoder_update(&encoder1);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3330      	adds	r3, #48	@ 0x30
 8003368:	4618      	mov	r0, r3
 800336a:	f7fe fef1 	bl	8002150 <encoder_update>
            encoder_update(&encoder2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	3348      	adds	r3, #72	@ 0x48
 8003372:	4618      	mov	r0, r3
 8003374:	f7fe feec 	bl	8002150 <encoder_update>
            last_time = micros();
 8003378:	f000 fe74 	bl	8004064 <micros>
 800337c:	4602      	mov	r2, r0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

            // Reset PID state
            error1 = error2 = prev_error1 = prev_error2 = 0;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	671a      	str	r2, [r3, #112]	@ 0x70
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	66da      	str	r2, [r3, #108]	@ 0x6c
            error_diff1 = error_diff2 = 0;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	675a      	str	r2, [r3, #116]	@ 0x74
            error_sum1 = error_sum2 = 0;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	679a      	str	r2, [r3, #120]	@ 0x78

            if (should_run()) {
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff fefa 	bl	80031c8 <_ZN10MOTOR_TASK10should_runEv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 820e 	beq.w	80037f8 <_ZN10MOTOR_TASK3runEv+0x578>
                state = S2_RUN;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	701a      	strb	r2, [r3, #0]
            }
            break;
 80033e2:	e209      	b.n	80037f8 <_ZN10MOTOR_TASK3runEv+0x578>

        case S2_RUN:
            // Get setpoints: prefer parser over Bluetooth
            M1_set = (parser.get_M1_set() != 0) ? parser.get_M1_set() : bluetooth.get_M1_set();
 80033e4:	4813      	ldr	r0, [pc, #76]	@ (8003434 <_ZN10MOTOR_TASK3runEv+0x1b4>)
 80033e6:	f7fe fe5b 	bl	80020a0 <_ZNK14COMMAND_PARSER10get_M1_setEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <_ZN10MOTOR_TASK3runEv+0x17c>
 80033f0:	4810      	ldr	r0, [pc, #64]	@ (8003434 <_ZN10MOTOR_TASK3runEv+0x1b4>)
 80033f2:	f7fe fe55 	bl	80020a0 <_ZNK14COMMAND_PARSER10get_M1_setEv>
 80033f6:	4603      	mov	r3, r0
 80033f8:	461a      	mov	r2, r3
 80033fa:	e004      	b.n	8003406 <_ZN10MOTOR_TASK3runEv+0x186>
 80033fc:	480e      	ldr	r0, [pc, #56]	@ (8003438 <_ZN10MOTOR_TASK3runEv+0x1b8>)
 80033fe:	f7fe fb81 	bl	8001b04 <_ZN9BLUETOOTH10get_M1_setEv>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	859a      	strh	r2, [r3, #44]	@ 0x2c
            M2_set = (parser.get_M2_set() != 0) ? parser.get_M2_set() : bluetooth.get_M2_set();
 800340a:	480a      	ldr	r0, [pc, #40]	@ (8003434 <_ZN10MOTOR_TASK3runEv+0x1b4>)
 800340c:	f7fe fe55 	bl	80020ba <_ZNK14COMMAND_PARSER10get_M2_setEv>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <_ZN10MOTOR_TASK3runEv+0x1bc>
 8003416:	4807      	ldr	r0, [pc, #28]	@ (8003434 <_ZN10MOTOR_TASK3runEv+0x1b4>)
 8003418:	f7fe fe4f 	bl	80020ba <_ZNK14COMMAND_PARSER10get_M2_setEv>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	e011      	b.n	8003446 <_ZN10MOTOR_TASK3runEv+0x1c6>
 8003422:	bf00      	nop
 8003424:	20000334 	.word	0x20000334
 8003428:	2000037c 	.word	0x2000037c
 800342c:	3f99999a 	.word	0x3f99999a
 8003430:	40c00000 	.word	0x40c00000
 8003434:	20000698 	.word	0x20000698
 8003438:	20000634 	.word	0x20000634
 800343c:	48c3      	ldr	r0, [pc, #780]	@ (800374c <_ZN10MOTOR_TASK3runEv+0x4cc>)
 800343e:	f7fe fb6e 	bl	8001b1e <_ZN9BLUETOOTH10get_M2_setEv>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	85da      	strh	r2, [r3, #46]	@ 0x2e

            encoder_update(&encoder1);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3330      	adds	r3, #48	@ 0x30
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe fe7e 	bl	8002150 <encoder_update>
            encoder_update(&encoder2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3348      	adds	r3, #72	@ 0x48
 8003458:	4618      	mov	r0, r3
 800345a:	f7fe fe79 	bl	8002150 <encoder_update>

            now = micros();
 800345e:	f000 fe01 	bl	8004064 <micros>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
            dt = now - last_time;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003476:	1ad2      	subs	r2, r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            if (dt == 0) dt = 1;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003484:	2b00      	cmp	r3, #0
 8003486:	d103      	bne.n	8003490 <_ZN10MOTOR_TASK3runEv+0x210>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
            last_time = now;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

            // Calculate PID error terms
            error1 = M1_set - encoder_getspeed(&encoder1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 80034a2:	ee07 3a90 	vmov	s15, r3
 80034a6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3330      	adds	r3, #48	@ 0x30
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe fea0 	bl	80021f4 <encoder_getspeed>
 80034b4:	eef0 7a40 	vmov.f32	s15, s0
 80034b8:	ee78 7a67 	vsub.f32	s15, s16, s15
 80034bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034c0:	ee17 2a90 	vmov	r2, s15
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	66da      	str	r2, [r3, #108]	@ 0x6c
            error2 = M2_set - encoder_getspeed(&encoder2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80034ce:	ee07 3a90 	vmov	s15, r3
 80034d2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3348      	adds	r3, #72	@ 0x48
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fe fe8a 	bl	80021f4 <encoder_getspeed>
 80034e0:	eef0 7a40 	vmov.f32	s15, s0
 80034e4:	ee78 7a67 	vsub.f32	s15, s16, s15
 80034e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80034ec:	ee17 2a90 	vmov	r2, s15
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            error_sum1 += error1 * dt;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80034fa:	461a      	mov	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003500:	4619      	mov	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003508:	fb01 f303 	mul.w	r3, r1, r3
 800350c:	4413      	add	r3, r2
 800350e:	461a      	mov	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	679a      	str	r2, [r3, #120]	@ 0x78
            error_sum2 += error2 * dt;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	4619      	mov	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	461a      	mov	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            // Anti-windup clamp
            if (error_sum1 > 1500000000) error_sum1 = 1500000000;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800353c:	4a84      	ldr	r2, [pc, #528]	@ (8003750 <_ZN10MOTOR_TASK3runEv+0x4d0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	dd02      	ble.n	8003548 <_ZN10MOTOR_TASK3runEv+0x2c8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a82      	ldr	r2, [pc, #520]	@ (8003750 <_ZN10MOTOR_TASK3runEv+0x4d0>)
 8003546:	679a      	str	r2, [r3, #120]	@ 0x78
            if (error_sum1 < -1500000000) error_sum1 = -1500000000;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354c:	4a81      	ldr	r2, [pc, #516]	@ (8003754 <_ZN10MOTOR_TASK3runEv+0x4d4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	da02      	bge.n	8003558 <_ZN10MOTOR_TASK3runEv+0x2d8>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a7f      	ldr	r2, [pc, #508]	@ (8003754 <_ZN10MOTOR_TASK3runEv+0x4d4>)
 8003556:	679a      	str	r2, [r3, #120]	@ 0x78
            if (error_sum2 > 1500000000) error_sum2 = 1500000000;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800355e:	4a7c      	ldr	r2, [pc, #496]	@ (8003750 <_ZN10MOTOR_TASK3runEv+0x4d0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	dd03      	ble.n	800356c <_ZN10MOTOR_TASK3runEv+0x2ec>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a7a      	ldr	r2, [pc, #488]	@ (8003750 <_ZN10MOTOR_TASK3runEv+0x4d0>)
 8003568:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            if (error_sum2 < -1500000000) error_sum2 = -1500000000;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003572:	4a78      	ldr	r2, [pc, #480]	@ (8003754 <_ZN10MOTOR_TASK3runEv+0x4d4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	da03      	bge.n	8003580 <_ZN10MOTOR_TASK3runEv+0x300>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a76      	ldr	r2, [pc, #472]	@ (8003754 <_ZN10MOTOR_TASK3runEv+0x4d4>)
 800357c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

            error_diff1 = error1 - prev_error1;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003588:	1ad2      	subs	r2, r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	675a      	str	r2, [r3, #116]	@ 0x74
            error_diff2 = error2 - prev_error2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800359a:	1ad2      	subs	r2, r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            prev_error1 = error1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	671a      	str	r2, [r3, #112]	@ 0x70
            prev_error2 = error2;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

            // PID control output
            M1_eff = (Kp1 * (float)error1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c0:	ee07 3a90 	vmov	s15, r3
 80035c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c8:	ee27 7a27 	vmul.f32	s14, s14, s15
                   + (Ki1 * (float)error_sum1 / 1000000.0f)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035d6:	ee07 3a90 	vmov	s15, r3
 80035da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80035e2:	ed9f 6a5d 	vldr	s12, [pc, #372]	@ 8003758 <_ZN10MOTOR_TASK3runEv+0x4d8>
 80035e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80035ea:	ee37 7a27 	vadd.f32	s14, s14, s15
                   + (Kd1 * (float)error_diff1 * 1000000.0f / (float)dt);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	edd3 6a1a 	vldr	s13, [r3, #104]	@ 0x68
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003604:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8003758 <_ZN10MOTOR_TASK3runEv+0x4d8>
 8003608:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003612:	ee07 3a90 	vmov	s15, r3
 8003616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800361a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800361e:	ee77 7a27 	vadd.f32	s15, s14, s15
            M1_eff = (Kp1 * (float)error1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

            M2_eff = (Kp2 * (float)error2)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	ed93 7a1f 	vldr	s14, [r3, #124]	@ 0x7c
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363c:	ee27 7a27 	vmul.f32	s14, s14, s15
                   + (Ki2 * (float)error_sum2 / 1000000.0f)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	edd3 6a20 	vldr	s13, [r3, #128]	@ 0x80
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003654:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003658:	ed9f 6a3f 	vldr	s12, [pc, #252]	@ 8003758 <_ZN10MOTOR_TASK3runEv+0x4d8>
 800365c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003660:	ee37 7a27 	vadd.f32	s14, s14, s15
                   + (Kd2 * (float)error_diff2 * 1000000.0f / (float)dt);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	edd3 6a21 	vldr	s13, [r3, #132]	@ 0x84
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003670:	ee07 3a90 	vmov	s15, r3
 8003674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800367c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8003758 <_ZN10MOTOR_TASK3runEv+0x4d8>
 8003680:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368a:	ee07 3a90 	vmov	s15, r3
 800368e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003692:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003696:	ee77 7a27 	vadd.f32	s15, s14, s15
            M2_eff = (Kp2 * (float)error2)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

            // Add control efforts from heading and balance FSMs
            M1_eff += heading.get_M1_eff();
 80036a0:	482e      	ldr	r0, [pc, #184]	@ (800375c <_ZN10MOTOR_TASK3runEv+0x4dc>)
 80036a2:	f7fe fde3 	bl	800226c <_ZN7HEADING10get_M1_effEv>
 80036a6:	ee07 0a90 	vmov	s15, r0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80036b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
            M2_eff += heading.get_M2_eff();
 80036be:	4827      	ldr	r0, [pc, #156]	@ (800375c <_ZN10MOTOR_TASK3runEv+0x4dc>)
 80036c0:	f7fe fde0 	bl	8002284 <_ZN7HEADING10get_M2_effEv>
 80036c4:	ee07 0a90 	vmov	s15, r0
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80036ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
            M1_eff += balance.get_M1_eff();
 80036dc:	4820      	ldr	r0, [pc, #128]	@ (8003760 <_ZN10MOTOR_TASK3runEv+0x4e0>)
 80036de:	f7fe f96d 	bl	80019bc <_ZN7BALANCE10get_M1_effEv>
 80036e2:	ee07 0a90 	vmov	s15, r0
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80036ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
            M2_eff += balance.get_M2_eff();
 80036fa:	4819      	ldr	r0, [pc, #100]	@ (8003760 <_ZN10MOTOR_TASK3runEv+0x4e0>)
 80036fc:	f7fe f96a 	bl	80019d4 <_ZN7BALANCE10get_M2_effEv>
 8003700:	ee07 0a90 	vmov	s15, r0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800370a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800370e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

            // Clamp output effort to safe range
            M1_eff = std::max(-4799.0f, std::min(M1_eff, (float)4799.0f));
 8003718:	4b12      	ldr	r3, [pc, #72]	@ (8003764 <_ZN10MOTOR_TASK3runEv+0x4e4>)
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3324      	adds	r3, #36	@ 0x24
 8003720:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <_ZN10MOTOR_TASK3runEv+0x4e8>)
 8003722:	60fa      	str	r2, [r7, #12]
 8003724:	f107 020c 	add.w	r2, r7, #12
 8003728:	4611      	mov	r1, r2
 800372a:	4618      	mov	r0, r3
 800372c:	f000 f870 	bl	8003810 <_ZSt3minIfERKT_S2_S2_>
 8003730:	4602      	mov	r2, r0
 8003732:	f107 0308 	add.w	r3, r7, #8
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 f882 	bl	8003842 <_ZSt3maxIfERKT_S2_S2_>
 800373e:	4603      	mov	r3, r0
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	625a      	str	r2, [r3, #36]	@ 0x24
            M2_eff = std::max(-4799.0f, std::min(M2_eff, (float)4799.0f));
 8003746:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <_ZN10MOTOR_TASK3runEv+0x4e4>)
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	e00f      	b.n	800376c <_ZN10MOTOR_TASK3runEv+0x4ec>
 800374c:	20000634 	.word	0x20000634
 8003750:	59682f00 	.word	0x59682f00
 8003754:	a697d100 	.word	0xa697d100
 8003758:	49742400 	.word	0x49742400
 800375c:	200004fc 	.word	0x200004fc
 8003760:	20000544 	.word	0x20000544
 8003764:	c595f800 	.word	0xc595f800
 8003768:	4595f800 	.word	0x4595f800
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3328      	adds	r3, #40	@ 0x28
 8003770:	4a26      	ldr	r2, [pc, #152]	@ (800380c <_ZN10MOTOR_TASK3runEv+0x58c>)
 8003772:	617a      	str	r2, [r7, #20]
 8003774:	f107 0214 	add.w	r2, r7, #20
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f000 f848 	bl	8003810 <_ZSt3minIfERKT_S2_S2_>
 8003780:	4602      	mov	r2, r0
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	4611      	mov	r1, r2
 8003788:	4618      	mov	r0, r3
 800378a:	f000 f85a 	bl	8003842 <_ZSt3maxIfERKT_S2_S2_>
 800378e:	4603      	mov	r3, r0
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	629a      	str	r2, [r3, #40]	@ 0x28

            motor_set_duty(&motor1, (int32_t)M1_eff);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	1d1a      	adds	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80037a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037a4:	ee17 1a90 	vmov	r1, s15
 80037a8:	4610      	mov	r0, r2
 80037aa:	f7ff fbe0 	bl	8002f6e <motor_set_duty>
            motor_set_duty(&motor2, (int32_t)M2_eff);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f103 0214 	add.w	r2, r3, #20
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80037ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037be:	ee17 1a90 	vmov	r1, s15
 80037c2:	4610      	mov	r0, r2
 80037c4:	f7ff fbd3 	bl	8002f6e <motor_set_duty>

            if (!should_run()) {
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7ff fcfd 	bl	80031c8 <_ZN10MOTOR_TASK10should_runEv>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f083 0301 	eor.w	r3, r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d010      	beq.n	80037fc <_ZN10MOTOR_TASK3runEv+0x57c>
                state = S1_IDLE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
            }
            break;
 80037e0:	e00c      	b.n	80037fc <_ZN10MOTOR_TASK3runEv+0x57c>

        default:
            motor_disable(&motor1);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	3304      	adds	r3, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fba9 	bl	8002f3e <motor_disable>
            motor_disable(&motor2);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3314      	adds	r3, #20
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fba4 	bl	8002f3e <motor_disable>
    }
}
 80037f6:	e002      	b.n	80037fe <_ZN10MOTOR_TASK3runEv+0x57e>
            break;
 80037f8:	bf00      	nop
 80037fa:	e000      	b.n	80037fe <_ZN10MOTOR_TASK3runEv+0x57e>
            break;
 80037fc:	bf00      	nop
}
 80037fe:	bf00      	nop
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	ecbd 8b02 	vpop	{d8}
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	4595f800 	.word	0x4595f800

08003810 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	ed93 7a00 	vldr	s14, [r3]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	d501      	bpl.n	8003834 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	e000      	b.n	8003836 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8003834:	687b      	ldr	r3, [r7, #4]
    }
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8003842:	b480      	push	{r7}
 8003844:	b083      	sub	sp, #12
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	ed93 7a00 	vldr	s14, [r3]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003860:	d501      	bpl.n	8003866 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	e000      	b.n	8003868 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8003866:	687b      	ldr	r3, [r7, #4]
    }
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <_write>:
 * @return Number of bytes transmitted.
 *
 * @note This function overrides the `_write` syscall used by `printf()` in newlib,
 *       allowing standard output to be redirected to a UART peripheral (e.g., huart6).
 */
int _write(int file, char *ptr, int len) {
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart6, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	b29a      	uxth	r2, r3
 8003884:	f04f 33ff 	mov.w	r3, #4294967295
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	4804      	ldr	r0, [pc, #16]	@ (800389c <_write+0x28>)
 800388c:	f004 fcde 	bl	800824c <HAL_UART_Transmit>
    return len;
 8003890:	687b      	ldr	r3, [r7, #4]
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	20000454 	.word	0x20000454

080038a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]
 80038aa:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_MspInit+0x4c>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	4a0f      	ldr	r2, [pc, #60]	@ (80038ec <HAL_MspInit+0x4c>)
 80038b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038b6:	4b0d      	ldr	r3, [pc, #52]	@ (80038ec <HAL_MspInit+0x4c>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	603b      	str	r3, [r7, #0]
 80038c6:	4b09      	ldr	r3, [pc, #36]	@ (80038ec <HAL_MspInit+0x4c>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ca:	4a08      	ldr	r2, [pc, #32]	@ (80038ec <HAL_MspInit+0x4c>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80038d2:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <HAL_MspInit+0x4c>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08a      	sub	sp, #40	@ 0x28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	f107 0314 	add.w	r3, r7, #20
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	@ (800396c <HAL_ADC_MspInit+0x7c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d127      	bne.n	8003962 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	4b16      	ldr	r3, [pc, #88]	@ (8003970 <HAL_ADC_MspInit+0x80>)
 8003918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800391a:	4a15      	ldr	r2, [pc, #84]	@ (8003970 <HAL_ADC_MspInit+0x80>)
 800391c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003920:	6453      	str	r3, [r2, #68]	@ 0x44
 8003922:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_ADC_MspInit+0x80>)
 8003924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <HAL_ADC_MspInit+0x80>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	4a0e      	ldr	r2, [pc, #56]	@ (8003970 <HAL_ADC_MspInit+0x80>)
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	6313      	str	r3, [r2, #48]	@ 0x30
 800393e:	4b0c      	ldr	r3, [pc, #48]	@ (8003970 <HAL_ADC_MspInit+0x80>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800394a:	2301      	movs	r3, #1
 800394c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800394e:	2303      	movs	r3, #3
 8003950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003952:	2300      	movs	r3, #0
 8003954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003956:	f107 0314 	add.w	r3, r7, #20
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	@ (8003974 <HAL_ADC_MspInit+0x84>)
 800395e:	f001 fd8f 	bl	8005480 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003962:	bf00      	nop
 8003964:	3728      	adds	r7, #40	@ 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	40012000 	.word	0x40012000
 8003970:	40023800 	.word	0x40023800
 8003974:	40020400 	.word	0x40020400

08003978 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	@ 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a19      	ldr	r2, [pc, #100]	@ (80039fc <HAL_I2C_MspInit+0x84>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d12c      	bne.n	80039f4 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <HAL_I2C_MspInit+0x88>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a2:	4a17      	ldr	r2, [pc, #92]	@ (8003a00 <HAL_I2C_MspInit+0x88>)
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039aa:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_I2C_MspInit+0x88>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039bc:	2312      	movs	r3, #18
 80039be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c4:	2303      	movs	r3, #3
 80039c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039c8:	2304      	movs	r3, #4
 80039ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	4619      	mov	r1, r3
 80039d2:	480c      	ldr	r0, [pc, #48]	@ (8003a04 <HAL_I2C_MspInit+0x8c>)
 80039d4:	f001 fd54 	bl	8005480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039d8:	2300      	movs	r3, #0
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <HAL_I2C_MspInit+0x88>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	4a07      	ldr	r2, [pc, #28]	@ (8003a00 <HAL_I2C_MspInit+0x88>)
 80039e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80039e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <HAL_I2C_MspInit+0x88>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	@ 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40005400 	.word	0x40005400
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020400 	.word	0x40020400

08003a08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a15      	ldr	r2, [pc, #84]	@ (8003a6c <HAL_TIM_PWM_MspInit+0x64>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10e      	bne.n	8003a38 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <HAL_TIM_PWM_MspInit+0x68>)
 8003a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a22:	4a13      	ldr	r2, [pc, #76]	@ (8003a70 <HAL_TIM_PWM_MspInit+0x68>)
 8003a24:	f043 0301 	orr.w	r3, r3, #1
 8003a28:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a2a:	4b11      	ldr	r3, [pc, #68]	@ (8003a70 <HAL_TIM_PWM_MspInit+0x68>)
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003a36:	e012      	b.n	8003a5e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM5)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a74 <HAL_TIM_PWM_MspInit+0x6c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10d      	bne.n	8003a5e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	60bb      	str	r3, [r7, #8]
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <HAL_TIM_PWM_MspInit+0x68>)
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	4a09      	ldr	r2, [pc, #36]	@ (8003a70 <HAL_TIM_PWM_MspInit+0x68>)
 8003a4c:	f043 0308 	orr.w	r3, r3, #8
 8003a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a52:	4b07      	ldr	r3, [pc, #28]	@ (8003a70 <HAL_TIM_PWM_MspInit+0x68>)
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	68bb      	ldr	r3, [r7, #8]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40000c00 	.word	0x40000c00

08003a78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08a      	sub	sp, #40	@ 0x28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	605a      	str	r2, [r3, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
 8003a8c:	60da      	str	r2, [r3, #12]
 8003a8e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a98:	d12b      	bne.n	8003af2 <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	4b17      	ldr	r3, [pc, #92]	@ (8003afc <HAL_TIM_Base_MspInit+0x84>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	4a16      	ldr	r2, [pc, #88]	@ (8003afc <HAL_TIM_Base_MspInit+0x84>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aaa:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <HAL_TIM_Base_MspInit+0x84>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	4b10      	ldr	r3, [pc, #64]	@ (8003afc <HAL_TIM_Base_MspInit+0x84>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	4a0f      	ldr	r2, [pc, #60]	@ (8003afc <HAL_TIM_Base_MspInit+0x84>)
 8003ac0:	f043 0301 	orr.w	r3, r3, #1
 8003ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8003afc <HAL_TIM_Base_MspInit+0x84>)
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae6:	f107 0314 	add.w	r3, r7, #20
 8003aea:	4619      	mov	r1, r3
 8003aec:	4804      	ldr	r0, [pc, #16]	@ (8003b00 <HAL_TIM_Base_MspInit+0x88>)
 8003aee:	f001 fcc7 	bl	8005480 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003af2:	bf00      	nop
 8003af4:	3728      	adds	r7, #40	@ 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020000 	.word	0x40020000

08003b04 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b08c      	sub	sp, #48	@ 0x30
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	2200      	movs	r2, #0
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	605a      	str	r2, [r3, #4]
 8003b16:	609a      	str	r2, [r3, #8]
 8003b18:	60da      	str	r2, [r3, #12]
 8003b1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a32      	ldr	r2, [pc, #200]	@ (8003bec <HAL_TIM_Encoder_MspInit+0xe8>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d12c      	bne.n	8003b80 <HAL_TIM_Encoder_MspInit+0x7c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	4b31      	ldr	r3, [pc, #196]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2e:	4a30      	ldr	r2, [pc, #192]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b30:	f043 0302 	orr.w	r3, r3, #2
 8003b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b36:	4b2e      	ldr	r3, [pc, #184]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b4c:	f043 0301 	orr.w	r3, r3, #1
 8003b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b52:	4b27      	ldr	r3, [pc, #156]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	617b      	str	r3, [r7, #20]
 8003b5c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b5e:	23c0      	movs	r3, #192	@ 0xc0
 8003b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	f107 031c 	add.w	r3, r7, #28
 8003b76:	4619      	mov	r1, r3
 8003b78:	481e      	ldr	r0, [pc, #120]	@ (8003bf4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003b7a:	f001 fc81 	bl	8005480 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b7e:	e030      	b.n	8003be2 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d12b      	bne.n	8003be2 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	4b18      	ldr	r3, [pc, #96]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b92:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b94:	f043 0304 	orr.w	r3, r3, #4
 8003b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b9a:	4b15      	ldr	r3, [pc, #84]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bae:	4a10      	ldr	r2, [pc, #64]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_TIM_Encoder_MspInit+0xec>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc2:	23c0      	movs	r3, #192	@ 0xc0
 8003bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bd2:	2302      	movs	r3, #2
 8003bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd6:	f107 031c 	add.w	r3, r7, #28
 8003bda:	4619      	mov	r1, r3
 8003bdc:	4807      	ldr	r0, [pc, #28]	@ (8003bfc <HAL_TIM_Encoder_MspInit+0xf8>)
 8003bde:	f001 fc4f 	bl	8005480 <HAL_GPIO_Init>
}
 8003be2:	bf00      	nop
 8003be4:	3730      	adds	r7, #48	@ 0x30
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40000400 	.word	0x40000400
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40020000 	.word	0x40020000
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40020400 	.word	0x40020400

08003c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	f107 0314 	add.w	r3, r7, #20
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a24      	ldr	r2, [pc, #144]	@ (8003cb0 <HAL_TIM_MspPostInit+0xb0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d11f      	bne.n	8003c62 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	4b23      	ldr	r3, [pc, #140]	@ (8003cb4 <HAL_TIM_MspPostInit+0xb4>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a22      	ldr	r2, [pc, #136]	@ (8003cb4 <HAL_TIM_MspPostInit+0xb4>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b20      	ldr	r3, [pc, #128]	@ (8003cb4 <HAL_TIM_MspPostInit+0xb4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	f107 0314 	add.w	r3, r7, #20
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4817      	ldr	r0, [pc, #92]	@ (8003cb8 <HAL_TIM_MspPostInit+0xb8>)
 8003c5c:	f001 fc10 	bl	8005480 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003c60:	e022      	b.n	8003ca8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM5)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <HAL_TIM_MspPostInit+0xbc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d11d      	bne.n	8003ca8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]
 8003c70:	4b10      	ldr	r3, [pc, #64]	@ (8003cb4 <HAL_TIM_MspPostInit+0xb4>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	4a0f      	ldr	r2, [pc, #60]	@ (8003cb4 <HAL_TIM_MspPostInit+0xb4>)
 8003c76:	f043 0301 	orr.w	r3, r3, #1
 8003c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <HAL_TIM_MspPostInit+0xb4>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c90:	2300      	movs	r3, #0
 8003c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c94:	2300      	movs	r3, #0
 8003c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c98:	2302      	movs	r3, #2
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9c:	f107 0314 	add.w	r3, r7, #20
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	4805      	ldr	r0, [pc, #20]	@ (8003cb8 <HAL_TIM_MspPostInit+0xb8>)
 8003ca4:	f001 fbec 	bl	8005480 <HAL_GPIO_Init>
}
 8003ca8:	bf00      	nop
 8003caa:	3728      	adds	r7, #40	@ 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	40010000 	.word	0x40010000
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40000c00 	.word	0x40000c00

08003cc0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08c      	sub	sp, #48	@ 0x30
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 031c 	add.w	r3, r7, #28
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a51      	ldr	r2, [pc, #324]	@ (8003e24 <HAL_UART_MspInit+0x164>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d162      	bne.n	8003da8 <HAL_UART_MspInit+0xe8>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	4b50      	ldr	r3, [pc, #320]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	4a4f      	ldr	r2, [pc, #316]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cf2:	4b4d      	ldr	r3, [pc, #308]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfa:	61bb      	str	r3, [r7, #24]
 8003cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	4b49      	ldr	r3, [pc, #292]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	4a48      	ldr	r2, [pc, #288]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d0e:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d26:	2303      	movs	r3, #3
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d2a:	2307      	movs	r3, #7
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d2e:	f107 031c 	add.w	r3, r7, #28
 8003d32:	4619      	mov	r1, r3
 8003d34:	483d      	ldr	r0, [pc, #244]	@ (8003e2c <HAL_UART_MspInit+0x16c>)
 8003d36:	f001 fba3 	bl	8005480 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8003e34 <HAL_UART_MspInit+0x174>)
 8003d3e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003d40:	4b3b      	ldr	r3, [pc, #236]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003d46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d48:	4b39      	ldr	r3, [pc, #228]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d4e:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d54:	4b36      	ldr	r3, [pc, #216]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d5a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d5c:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d62:	4b33      	ldr	r3, [pc, #204]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003d68:	4b31      	ldr	r3, [pc, #196]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d6e:	4b30      	ldr	r3, [pc, #192]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d74:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003d7a:	482d      	ldr	r0, [pc, #180]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d7c:	f000 ff7e 	bl	8004c7c <HAL_DMA_Init>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8003d86:	f7ff f895 	bl	8002eb4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d90:	4a27      	ldr	r2, [pc, #156]	@ (8003e30 <HAL_UART_MspInit+0x170>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2026      	movs	r0, #38	@ 0x26
 8003d9c:	f000 ff37 	bl	8004c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003da0:	2026      	movs	r0, #38	@ 0x26
 8003da2:	f000 ff50 	bl	8004c46 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8003da6:	e039      	b.n	8003e1c <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART6)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	@ (8003e38 <HAL_UART_MspInit+0x178>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d134      	bne.n	8003e1c <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003db2:	2300      	movs	r3, #0
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	4a1b      	ldr	r2, [pc, #108]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003dbc:	f043 0320 	orr.w	r3, r3, #32
 8003dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dc2:	4b19      	ldr	r3, [pc, #100]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd6:	4a14      	ldr	r2, [pc, #80]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <HAL_UART_MspInit+0x168>)
 8003de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003dea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df0:	2302      	movs	r3, #2
 8003df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003dfc:	2308      	movs	r3, #8
 8003dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	4809      	ldr	r0, [pc, #36]	@ (8003e2c <HAL_UART_MspInit+0x16c>)
 8003e08:	f001 fb3a 	bl	8005480 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	2047      	movs	r0, #71	@ 0x47
 8003e12:	f000 fefc 	bl	8004c0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003e16:	2047      	movs	r0, #71	@ 0x47
 8003e18:	f000 ff15 	bl	8004c46 <HAL_NVIC_EnableIRQ>
}
 8003e1c:	bf00      	nop
 8003e1e:	3730      	adds	r7, #48	@ 0x30
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40004400 	.word	0x40004400
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020000 	.word	0x40020000
 8003e30:	2000049c 	.word	0x2000049c
 8003e34:	40026088 	.word	0x40026088
 8003e38:	40011400 	.word	0x40011400

08003e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <NMI_Handler+0x4>

08003e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <HardFault_Handler+0x4>

08003e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <MemManage_Handler+0x4>

08003e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <BusFault_Handler+0x4>

08003e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <UsageFault_Handler+0x4>

08003e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e92:	f000 f9df 	bl	8004254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ea0:	4802      	ldr	r0, [pc, #8]	@ (8003eac <DMA1_Stream5_IRQHandler+0x10>)
 8003ea2:	f001 f883 	bl	8004fac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000049c 	.word	0x2000049c

08003eb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003eb4:	4803      	ldr	r0, [pc, #12]	@ (8003ec4 <USART2_IRQHandler+0x14>)
 8003eb6:	f004 faf9 	bl	80084ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  UART_DMA_IDLE_IRQHandler(&huart2);
 8003eba:	4802      	ldr	r0, [pc, #8]	@ (8003ec4 <USART2_IRQHandler+0x14>)
 8003ebc:	f000 f8fe 	bl	80040bc <UART_DMA_IDLE_IRQHandler>
  /* USER CODE END USART2_IRQn 1 */
}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	2000040c 	.word	0x2000040c

08003ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8003ecc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003ed0:	f001 fc74 	bl	80057bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003edc:	4802      	ldr	r0, [pc, #8]	@ (8003ee8 <USART6_IRQHandler+0x10>)
 8003ede:	f004 fae5 	bl	80084ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003ee2:	bf00      	nop
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000454 	.word	0x20000454

08003eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  return 1;
 8003ef0:	2301      	movs	r3, #1
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <_kill>:

int _kill(int pid, int sig)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f06:	f006 fa75 	bl	800a3f4 <__errno>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2216      	movs	r2, #22
 8003f0e:	601a      	str	r2, [r3, #0]
  return -1;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_exit>:

void _exit (int status)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003f24:	f04f 31ff 	mov.w	r1, #4294967295
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff ffe7 	bl	8003efc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003f2e:	bf00      	nop
 8003f30:	e7fd      	b.n	8003f2e <_exit+0x12>

08003f32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b086      	sub	sp, #24
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	e00a      	b.n	8003f5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003f44:	f3af 8000 	nop.w
 8003f48:	4601      	mov	r1, r0
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	60ba      	str	r2, [r7, #8]
 8003f50:	b2ca      	uxtb	r2, r1
 8003f52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	3301      	adds	r3, #1
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	dbf0      	blt.n	8003f44 <_read+0x12>
  }

  return len;
 8003f62:	687b      	ldr	r3, [r7, #4]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <_close>:
  }
  return len;
}

int _close(int file)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f94:	605a      	str	r2, [r3, #4]
  return 0;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <_isatty>:

int _isatty(int file)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003fac:	2301      	movs	r3, #1
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b085      	sub	sp, #20
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3714      	adds	r7, #20
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fdc:	4a14      	ldr	r2, [pc, #80]	@ (8004030 <_sbrk+0x5c>)
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <_sbrk+0x60>)
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fe8:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <_sbrk+0x64>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ff0:	4b11      	ldr	r3, [pc, #68]	@ (8004038 <_sbrk+0x64>)
 8003ff2:	4a12      	ldr	r2, [pc, #72]	@ (800403c <_sbrk+0x68>)
 8003ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <_sbrk+0x64>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	429a      	cmp	r2, r3
 8004002:	d207      	bcs.n	8004014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004004:	f006 f9f6 	bl	800a3f4 <__errno>
 8004008:	4603      	mov	r3, r0
 800400a:	220c      	movs	r2, #12
 800400c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800400e:	f04f 33ff 	mov.w	r3, #4294967295
 8004012:	e009      	b.n	8004028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004014:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <_sbrk+0x64>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800401a:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <_sbrk+0x64>)
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4413      	add	r3, r2
 8004022:	4a05      	ldr	r2, [pc, #20]	@ (8004038 <_sbrk+0x64>)
 8004024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004026:	68fb      	ldr	r3, [r7, #12]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20020000 	.word	0x20020000
 8004034:	00000400 	.word	0x00000400
 8004038:	200006f0 	.word	0x200006f0
 800403c:	20000848 	.word	0x20000848

08004040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004044:	4b06      	ldr	r3, [pc, #24]	@ (8004060 <SystemInit+0x20>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	4a05      	ldr	r2, [pc, #20]	@ (8004060 <SystemInit+0x20>)
 800404c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004054:	bf00      	nop
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	e000ed00 	.word	0xe000ed00

08004064 <micros>:
/**
 * @brief Returns the number of microseconds since TIM2 was started.
 * @details Reads the current counter value from the TIM2 peripheral.
 * @return Current microsecond timestamp as a 32-bit unsigned integer.
 */
uint32_t micros(void) {
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2);
 8004068:	4b03      	ldr	r3, [pc, #12]	@ (8004078 <micros+0x14>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 800406e:	4618      	mov	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	200002ec 	.word	0x200002ec

0800407c <UART_DMA_IDLE_Init>:
 * @param huart Pointer to the UART handle to configure.
 * @details Starts the DMA reception and enables UART idle line detection to
 *          trigger when a message has ended. Assumes a '\r\n' terminated protocol.
 */
void UART_DMA_IDLE_Init(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
    huart_ptr = huart;
 8004084:	4a0b      	ldr	r2, [pc, #44]	@ (80040b4 <UART_DMA_IDLE_Init+0x38>)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_DMA(huart_ptr, rx_buffer, BUFFER_SIZE);
 800408a:	4b0a      	ldr	r3, [pc, #40]	@ (80040b4 <UART_DMA_IDLE_Init+0x38>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2240      	movs	r2, #64	@ 0x40
 8004090:	4909      	ldr	r1, [pc, #36]	@ (80040b8 <UART_DMA_IDLE_Init+0x3c>)
 8004092:	4618      	mov	r0, r3
 8004094:	f004 f965 	bl	8008362 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(huart_ptr, UART_IT_IDLE);
 8004098:	4b06      	ldr	r3, [pc, #24]	@ (80040b4 <UART_DMA_IDLE_Init+0x38>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	4b04      	ldr	r3, [pc, #16]	@ (80040b4 <UART_DMA_IDLE_Init+0x38>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f042 0210 	orr.w	r2, r2, #16
 80040aa:	60da      	str	r2, [r3, #12]
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	200006f4 	.word	0x200006f4
 80040b8:	200006a4 	.word	0x200006a4

080040bc <UART_DMA_IDLE_IRQHandler>:
 * @param huart Pointer to the UART handle triggering the interrupt.
 * @details Stops DMA temporarily, calculates received length, and checks for a
 *          complete command (terminated by "\r\n"). If found, sets `command_ready`.
 */
void UART_DMA_IDLE_IRQHandler(UART_HandleTypeDef *huart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
    if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d139      	bne.n	8004146 <UART_DMA_IDLE_IRQHandler+0x8a>
    {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040d2:	2300      	movs	r3, #0
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60fb      	str	r3, [r7, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	68fb      	ldr	r3, [r7, #12]
        HAL_UART_DMAStop(huart);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f004 f95f 	bl	80083ac <HAL_UART_DMAStop>

        uint16_t dma_remaining = __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	82bb      	strh	r3, [r7, #20]
        uint16_t received_len = BUFFER_SIZE - dma_remaining;
 80040f8:	8abb      	ldrh	r3, [r7, #20]
 80040fa:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80040fe:	827b      	strh	r3, [r7, #18]

        // Look for a complete command ending with \r\n
        for (uint16_t i = 0; i < received_len - 1; i++)
 8004100:	2300      	movs	r3, #0
 8004102:	82fb      	strh	r3, [r7, #22]
 8004104:	e015      	b.n	8004132 <UART_DMA_IDLE_IRQHandler+0x76>
        {
            if (rx_buffer[i] == '\r' && rx_buffer[i+1] == '\n')
 8004106:	8afb      	ldrh	r3, [r7, #22]
 8004108:	4a11      	ldr	r2, [pc, #68]	@ (8004150 <UART_DMA_IDLE_IRQHandler+0x94>)
 800410a:	5cd3      	ldrb	r3, [r2, r3]
 800410c:	2b0d      	cmp	r3, #13
 800410e:	d10d      	bne.n	800412c <UART_DMA_IDLE_IRQHandler+0x70>
 8004110:	8afb      	ldrh	r3, [r7, #22]
 8004112:	3301      	adds	r3, #1
 8004114:	4a0e      	ldr	r2, [pc, #56]	@ (8004150 <UART_DMA_IDLE_IRQHandler+0x94>)
 8004116:	5cd3      	ldrb	r3, [r2, r3]
 8004118:	2b0a      	cmp	r3, #10
 800411a:	d107      	bne.n	800412c <UART_DMA_IDLE_IRQHandler+0x70>
            {
                buffer_index = i;  // Exclude \r\n
 800411c:	8afb      	ldrh	r3, [r7, #22]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	4b0c      	ldr	r3, [pc, #48]	@ (8004154 <UART_DMA_IDLE_IRQHandler+0x98>)
 8004122:	701a      	strb	r2, [r3, #0]
                command_ready = 1;
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <UART_DMA_IDLE_IRQHandler+0x9c>)
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
                break;
 800412a:	e007      	b.n	800413c <UART_DMA_IDLE_IRQHandler+0x80>
        for (uint16_t i = 0; i < received_len - 1; i++)
 800412c:	8afb      	ldrh	r3, [r7, #22]
 800412e:	3301      	adds	r3, #1
 8004130:	82fb      	strh	r3, [r7, #22]
 8004132:	8afa      	ldrh	r2, [r7, #22]
 8004134:	8a7b      	ldrh	r3, [r7, #18]
 8004136:	3b01      	subs	r3, #1
 8004138:	429a      	cmp	r2, r3
 800413a:	dbe4      	blt.n	8004106 <UART_DMA_IDLE_IRQHandler+0x4a>
            }
        }

        // Restart DMA reception
        HAL_UART_Receive_DMA(huart, rx_buffer, BUFFER_SIZE);
 800413c:	2240      	movs	r2, #64	@ 0x40
 800413e:	4904      	ldr	r1, [pc, #16]	@ (8004150 <UART_DMA_IDLE_IRQHandler+0x94>)
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f004 f90e 	bl	8008362 <HAL_UART_Receive_DMA>
    }
}
 8004146:	bf00      	nop
 8004148:	3718      	adds	r7, #24
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	200006a4 	.word	0x200006a4
 8004154:	200006e4 	.word	0x200006e4
 8004158:	200006e5 	.word	0x200006e5

0800415c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack    		 /* set stack pointer */
 800415c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004194 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004160:	f7ff ff6e 	bl	8004040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004164:	480c      	ldr	r0, [pc, #48]	@ (8004198 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004166:	490d      	ldr	r1, [pc, #52]	@ (800419c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004168:	4a0d      	ldr	r2, [pc, #52]	@ (80041a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800416a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800416c:	e002      	b.n	8004174 <LoopCopyDataInit>

0800416e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800416e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004170:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004172:	3304      	adds	r3, #4

08004174 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004174:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004176:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004178:	d3f9      	bcc.n	800416e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800417a:	4a0a      	ldr	r2, [pc, #40]	@ (80041a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800417c:	4c0a      	ldr	r4, [pc, #40]	@ (80041a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004180:	e001      	b.n	8004186 <LoopFillZerobss>

08004182 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004182:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004184:	3204      	adds	r2, #4

08004186 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004186:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004188:	d3fb      	bcc.n	8004182 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800418a:	f006 f939 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800418e:	f7fe fa0f 	bl	80025b0 <main>
  bx  lr    
 8004192:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800419c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80041a0:	0800ca30 	.word	0x0800ca30
  ldr r2, =_sbss
 80041a4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80041a8:	20000848 	.word	0x20000848

080041ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041ac:	e7fe      	b.n	80041ac <ADC_IRQHandler>
	...

080041b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041b4:	4b0e      	ldr	r3, [pc, #56]	@ (80041f0 <HAL_Init+0x40>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_Init+0x40>)
 80041ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80041be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <HAL_Init+0x40>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a0a      	ldr	r2, [pc, #40]	@ (80041f0 <HAL_Init+0x40>)
 80041c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_Init+0x40>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <HAL_Init+0x40>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d8:	2003      	movs	r0, #3
 80041da:	f000 fd0d 	bl	8004bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041de:	200f      	movs	r0, #15
 80041e0:	f000 f808 	bl	80041f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e4:	f7ff fb5c 	bl	80038a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	40023c00 	.word	0x40023c00

080041f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_InitTick+0x54>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b12      	ldr	r3, [pc, #72]	@ (800424c <HAL_InitTick+0x58>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	4619      	mov	r1, r3
 8004206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800420a:	fbb3 f3f1 	udiv	r3, r3, r1
 800420e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fd25 	bl	8004c62 <HAL_SYSTICK_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e00e      	b.n	8004240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b0f      	cmp	r3, #15
 8004226:	d80a      	bhi.n	800423e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004228:	2200      	movs	r2, #0
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	f04f 30ff 	mov.w	r0, #4294967295
 8004230:	f000 fced 	bl	8004c0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004234:	4a06      	ldr	r2, [pc, #24]	@ (8004250 <HAL_InitTick+0x5c>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	e000      	b.n	8004240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	20000018 	.word	0x20000018
 800424c:	20000020 	.word	0x20000020
 8004250:	2000001c 	.word	0x2000001c

08004254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004258:	4b06      	ldr	r3, [pc, #24]	@ (8004274 <HAL_IncTick+0x20>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <HAL_IncTick+0x24>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4413      	add	r3, r2
 8004264:	4a04      	ldr	r2, [pc, #16]	@ (8004278 <HAL_IncTick+0x24>)
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	20000020 	.word	0x20000020
 8004278:	200006f8 	.word	0x200006f8

0800427c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  return uwTick;
 8004280:	4b03      	ldr	r3, [pc, #12]	@ (8004290 <HAL_GetTick+0x14>)
 8004282:	681b      	ldr	r3, [r3, #0]
}
 8004284:	4618      	mov	r0, r3
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	200006f8 	.word	0x200006f8

08004294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800429c:	f7ff ffee 	bl	800427c <HAL_GetTick>
 80042a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ac:	d005      	beq.n	80042ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ae:	4b0a      	ldr	r3, [pc, #40]	@ (80042d8 <HAL_Delay+0x44>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ba:	bf00      	nop
 80042bc:	f7ff ffde 	bl	800427c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d8f7      	bhi.n	80042bc <HAL_Delay+0x28>
  {
  }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000020 	.word	0x20000020

080042dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e033      	b.n	800435a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d109      	bne.n	800430e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff faf8 	bl	80038f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f003 0310 	and.w	r3, r3, #16
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004322:	f023 0302 	bic.w	r3, r3, #2
 8004326:	f043 0202 	orr.w	r2, r3, #2
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 fa96 	bl	8004860 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	f023 0303 	bic.w	r3, r3, #3
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40
 800434a:	e001      	b.n	8004350 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
	...

08004364 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_ADC_Start+0x1a>
 800437a:	2302      	movs	r3, #2
 800437c:	e097      	b.n	80044ae <HAL_ADC_Start+0x14a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d018      	beq.n	80043c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043a4:	4b45      	ldr	r3, [pc, #276]	@ (80044bc <HAL_ADC_Start+0x158>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a45      	ldr	r2, [pc, #276]	@ (80044c0 <HAL_ADC_Start+0x15c>)
 80043aa:	fba2 2303 	umull	r2, r3, r2, r3
 80043ae:	0c9a      	lsrs	r2, r3, #18
 80043b0:	4613      	mov	r3, r2
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	4413      	add	r3, r2
 80043b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80043b8:	e002      	b.n	80043c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3b01      	subs	r3, #1
 80043be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f9      	bne.n	80043ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d15f      	bne.n	8004494 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80043dc:	f023 0301 	bic.w	r3, r3, #1
 80043e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80043fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d106      	bne.n	8004422 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004418:	f023 0206 	bic.w	r2, r3, #6
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004420:	e002      	b.n	8004428 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004430:	4b24      	ldr	r3, [pc, #144]	@ (80044c4 <HAL_ADC_Start+0x160>)
 8004432:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800443c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d129      	bne.n	80044ac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689a      	ldr	r2, [r3, #8]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	e020      	b.n	80044ac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a16      	ldr	r2, [pc, #88]	@ (80044c8 <HAL_ADC_Start+0x164>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d11b      	bne.n	80044ac <HAL_ADC_Start+0x148>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d114      	bne.n	80044ac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004490:	609a      	str	r2, [r3, #8]
 8004492:	e00b      	b.n	80044ac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004498:	f043 0210 	orr.w	r2, r3, #16
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a4:	f043 0201 	orr.w	r2, r3, #1
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	20000018 	.word	0x20000018
 80044c0:	431bde83 	.word	0x431bde83
 80044c4:	40012300 	.word	0x40012300
 80044c8:	40012000 	.word	0x40012000

080044cc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044e8:	d113      	bne.n	8004512 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80044f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044f8:	d10b      	bne.n	8004512 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e063      	b.n	80045da <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8004512:	f7ff feb3 	bl	800427c <HAL_GetTick>
 8004516:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004518:	e021      	b.n	800455e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d01d      	beq.n	800455e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_ADC_PollForConversion+0x6c>
 8004528:	f7ff fea8 	bl	800427c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d212      	bcs.n	800455e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b02      	cmp	r3, #2
 8004544:	d00b      	beq.n	800455e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f043 0204 	orr.w	r2, r3, #4
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e03d      	b.n	80045da <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d1d6      	bne.n	800451a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0212 	mvn.w	r2, #18
 8004574:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d123      	bne.n	80045d8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004594:	2b00      	cmp	r3, #0
 8004596:	d11f      	bne.n	80045d8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d006      	beq.n	80045b4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d111      	bne.n	80045d8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d105      	bne.n	80045d8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x1c>
 8004614:	2302      	movs	r3, #2
 8004616:	e113      	b.n	8004840 <HAL_ADC_ConfigChannel+0x244>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	2b09      	cmp	r3, #9
 8004626:	d925      	bls.n	8004674 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68d9      	ldr	r1, [r3, #12]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	b29b      	uxth	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	4613      	mov	r3, r2
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4413      	add	r3, r2
 800463c:	3b1e      	subs	r3, #30
 800463e:	2207      	movs	r2, #7
 8004640:	fa02 f303 	lsl.w	r3, r2, r3
 8004644:	43da      	mvns	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	400a      	ands	r2, r1
 800464c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68d9      	ldr	r1, [r3, #12]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	4618      	mov	r0, r3
 8004660:	4603      	mov	r3, r0
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4403      	add	r3, r0
 8004666:	3b1e      	subs	r3, #30
 8004668:	409a      	lsls	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	e022      	b.n	80046ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6919      	ldr	r1, [r3, #16]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	2207      	movs	r2, #7
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	400a      	ands	r2, r1
 8004696:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4618      	mov	r0, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4403      	add	r3, r0
 80046b0:	409a      	lsls	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b06      	cmp	r3, #6
 80046c0:	d824      	bhi.n	800470c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	3b05      	subs	r3, #5
 80046d4:	221f      	movs	r2, #31
 80046d6:	fa02 f303 	lsl.w	r3, r2, r3
 80046da:	43da      	mvns	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	400a      	ands	r2, r1
 80046e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4618      	mov	r0, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	3b05      	subs	r3, #5
 80046fe:	fa00 f203 	lsl.w	r2, r0, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	635a      	str	r2, [r3, #52]	@ 0x34
 800470a:	e04c      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	2b0c      	cmp	r3, #12
 8004712:	d824      	bhi.n	800475e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	3b23      	subs	r3, #35	@ 0x23
 8004726:	221f      	movs	r2, #31
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43da      	mvns	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	400a      	ands	r2, r1
 8004734:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	4618      	mov	r0, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	3b23      	subs	r3, #35	@ 0x23
 8004750:	fa00 f203 	lsl.w	r2, r0, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30
 800475c:	e023      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	3b41      	subs	r3, #65	@ 0x41
 8004770:	221f      	movs	r2, #31
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	400a      	ands	r2, r1
 800477e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	4618      	mov	r0, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	3b41      	subs	r3, #65	@ 0x41
 800479a:	fa00 f203 	lsl.w	r2, r0, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80047a6:	4b29      	ldr	r3, [pc, #164]	@ (800484c <HAL_ADC_ConfigChannel+0x250>)
 80047a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a28      	ldr	r2, [pc, #160]	@ (8004850 <HAL_ADC_ConfigChannel+0x254>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d10f      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x1d8>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b12      	cmp	r3, #18
 80047ba:	d10b      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004850 <HAL_ADC_ConfigChannel+0x254>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d12b      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x23a>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004854 <HAL_ADC_ConfigChannel+0x258>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d003      	beq.n	80047f0 <HAL_ADC_ConfigChannel+0x1f4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b11      	cmp	r3, #17
 80047ee:	d122      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a11      	ldr	r2, [pc, #68]	@ (8004854 <HAL_ADC_ConfigChannel+0x258>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d111      	bne.n	8004836 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004812:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <HAL_ADC_ConfigChannel+0x25c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a11      	ldr	r2, [pc, #68]	@ (800485c <HAL_ADC_ConfigChannel+0x260>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	0c9a      	lsrs	r2, r3, #18
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004828:	e002      	b.n	8004830 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	3b01      	subs	r3, #1
 800482e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f9      	bne.n	800482a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	40012300 	.word	0x40012300
 8004850:	40012000 	.word	0x40012000
 8004854:	10000012 	.word	0x10000012
 8004858:	20000018 	.word	0x20000018
 800485c:	431bde83 	.word	0x431bde83

08004860 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004868:	4b79      	ldr	r3, [pc, #484]	@ (8004a50 <ADC_Init+0x1f0>)
 800486a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	021a      	lsls	r2, r3, #8
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80048b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6899      	ldr	r1, [r3, #8]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	4a58      	ldr	r2, [pc, #352]	@ (8004a54 <ADC_Init+0x1f4>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d022      	beq.n	800493e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689a      	ldr	r2, [r3, #8]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004906:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689a      	ldr	r2, [r3, #8]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	e00f      	b.n	800495e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800494c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800495c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0202 	bic.w	r2, r2, #2
 800496c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6899      	ldr	r1, [r3, #8]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	7e1b      	ldrb	r3, [r3, #24]
 8004978:	005a      	lsls	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d01b      	beq.n	80049c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800499a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80049aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	3b01      	subs	r3, #1
 80049b8:	035a      	lsls	r2, r3, #13
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	e007      	b.n	80049d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049d2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80049e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	051a      	lsls	r2, r3, #20
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6899      	ldr	r1, [r3, #8]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a16:	025a      	lsls	r2, r3, #9
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6899      	ldr	r1, [r3, #8]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	029a      	lsls	r2, r3, #10
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	609a      	str	r2, [r3, #8]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	40012300 	.word	0x40012300
 8004a54:	0f000001 	.word	0x0f000001

08004a58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f003 0307 	and.w	r3, r3, #7
 8004a66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a68:	4b0c      	ldr	r3, [pc, #48]	@ (8004a9c <__NVIC_SetPriorityGrouping+0x44>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a74:	4013      	ands	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a8a:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <__NVIC_SetPriorityGrouping+0x44>)
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	60d3      	str	r3, [r2, #12]
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	e000ed00 	.word	0xe000ed00

08004aa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa4:	4b04      	ldr	r3, [pc, #16]	@ (8004ab8 <__NVIC_GetPriorityGrouping+0x18>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	0a1b      	lsrs	r3, r3, #8
 8004aaa:	f003 0307 	and.w	r3, r3, #7
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db0b      	blt.n	8004ae6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	f003 021f 	and.w	r2, r3, #31
 8004ad4:	4907      	ldr	r1, [pc, #28]	@ (8004af4 <__NVIC_EnableIRQ+0x38>)
 8004ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	2001      	movs	r0, #1
 8004ade:	fa00 f202 	lsl.w	r2, r0, r2
 8004ae2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
 8004af2:	bf00      	nop
 8004af4:	e000e100 	.word	0xe000e100

08004af8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	db0a      	blt.n	8004b22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	b2da      	uxtb	r2, r3
 8004b10:	490c      	ldr	r1, [pc, #48]	@ (8004b44 <__NVIC_SetPriority+0x4c>)
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	0112      	lsls	r2, r2, #4
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	440b      	add	r3, r1
 8004b1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b20:	e00a      	b.n	8004b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	4908      	ldr	r1, [pc, #32]	@ (8004b48 <__NVIC_SetPriority+0x50>)
 8004b28:	79fb      	ldrb	r3, [r7, #7]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	3b04      	subs	r3, #4
 8004b30:	0112      	lsls	r2, r2, #4
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	440b      	add	r3, r1
 8004b36:	761a      	strb	r2, [r3, #24]
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	e000e100 	.word	0xe000e100
 8004b48:	e000ed00 	.word	0xe000ed00

08004b4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b089      	sub	sp, #36	@ 0x24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	f1c3 0307 	rsb	r3, r3, #7
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	bf28      	it	cs
 8004b6a:	2304      	movcs	r3, #4
 8004b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	3304      	adds	r3, #4
 8004b72:	2b06      	cmp	r3, #6
 8004b74:	d902      	bls.n	8004b7c <NVIC_EncodePriority+0x30>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3b03      	subs	r3, #3
 8004b7a:	e000      	b.n	8004b7e <NVIC_EncodePriority+0x32>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b80:	f04f 32ff 	mov.w	r2, #4294967295
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	43da      	mvns	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	401a      	ands	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b94:	f04f 31ff 	mov.w	r1, #4294967295
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b9e:	43d9      	mvns	r1, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ba4:	4313      	orrs	r3, r2
         );
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3724      	adds	r7, #36	@ 0x24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
	...

08004bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bc4:	d301      	bcc.n	8004bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e00f      	b.n	8004bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <SysTick_Config+0x40>)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bd2:	210f      	movs	r1, #15
 8004bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bd8:	f7ff ff8e 	bl	8004af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bdc:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <SysTick_Config+0x40>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004be2:	4b04      	ldr	r3, [pc, #16]	@ (8004bf4 <SysTick_Config+0x40>)
 8004be4:	2207      	movs	r2, #7
 8004be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	e000e010 	.word	0xe000e010

08004bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ff29 	bl	8004a58 <__NVIC_SetPriorityGrouping>
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	4603      	mov	r3, r0
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
 8004c1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c20:	f7ff ff3e 	bl	8004aa0 <__NVIC_GetPriorityGrouping>
 8004c24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	6978      	ldr	r0, [r7, #20]
 8004c2c:	f7ff ff8e 	bl	8004b4c <NVIC_EncodePriority>
 8004c30:	4602      	mov	r2, r0
 8004c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c36:	4611      	mov	r1, r2
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7ff ff5d 	bl	8004af8 <__NVIC_SetPriority>
}
 8004c3e:	bf00      	nop
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7ff ff31 	bl	8004abc <__NVIC_EnableIRQ>
}
 8004c5a:	bf00      	nop
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b082      	sub	sp, #8
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ffa2 	bl	8004bb4 <SysTick_Config>
 8004c70:	4603      	mov	r3, r0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c88:	f7ff faf8 	bl	800427c <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e099      	b.n	8004dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0201 	bic.w	r2, r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cb8:	e00f      	b.n	8004cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004cba:	f7ff fadf 	bl	800427c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b05      	cmp	r3, #5
 8004cc6:	d908      	bls.n	8004cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e078      	b.n	8004dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e8      	bne.n	8004cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4b38      	ldr	r3, [pc, #224]	@ (8004dd4 <HAL_DMA_Init+0x158>)
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d26:	697a      	ldr	r2, [r7, #20]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d107      	bne.n	8004d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d117      	bne.n	8004d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d00e      	beq.n	8004d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 fb01 	bl	8005388 <DMA_CheckFifoParam>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2240      	movs	r2, #64	@ 0x40
 8004d90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e016      	b.n	8004dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	697a      	ldr	r2, [r7, #20]
 8004da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fab8 	bl	800531c <DMA_CalcBaseAndBitshift>
 8004dac:	4603      	mov	r3, r0
 8004dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db4:	223f      	movs	r2, #63	@ 0x3f
 8004db6:	409a      	lsls	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	f010803f 	.word	0xf010803f

08004dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d101      	bne.n	8004dfe <HAL_DMA_Start_IT+0x26>
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	e040      	b.n	8004e80 <HAL_DMA_Start_IT+0xa8>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d12f      	bne.n	8004e72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2202      	movs	r2, #2
 8004e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	68b9      	ldr	r1, [r7, #8]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa4a 	bl	80052c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	223f      	movs	r2, #63	@ 0x3f
 8004e32:	409a      	lsls	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0216 	orr.w	r2, r2, #22
 8004e46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d007      	beq.n	8004e60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0208 	orr.w	r2, r2, #8
 8004e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e005      	b.n	8004e7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e94:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004e96:	f7ff f9f1 	bl	800427c <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d008      	beq.n	8004eba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2280      	movs	r2, #128	@ 0x80
 8004eac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e052      	b.n	8004f60 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 0216 	bic.w	r2, r2, #22
 8004ec8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ed8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <HAL_DMA_Abort+0x62>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d007      	beq.n	8004efa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0208 	bic.w	r2, r2, #8
 8004ef8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 0201 	bic.w	r2, r2, #1
 8004f08:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f0a:	e013      	b.n	8004f34 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004f0c:	f7ff f9b6 	bl	800427c <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b05      	cmp	r3, #5
 8004f18:	d90c      	bls.n	8004f34 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2203      	movs	r2, #3
 8004f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e015      	b.n	8004f60 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e4      	bne.n	8004f0c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f46:	223f      	movs	r2, #63	@ 0x3f
 8004f48:	409a      	lsls	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d004      	beq.n	8004f86 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2280      	movs	r2, #128	@ 0x80
 8004f80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e00c      	b.n	8004fa0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2205      	movs	r2, #5
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004fb8:	4b8e      	ldr	r3, [pc, #568]	@ (80051f4 <HAL_DMA_IRQHandler+0x248>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a8e      	ldr	r2, [pc, #568]	@ (80051f8 <HAL_DMA_IRQHandler+0x24c>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	0a9b      	lsrs	r3, r3, #10
 8004fc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	409a      	lsls	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01a      	beq.n	8005018 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d013      	beq.n	8005018 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0204 	bic.w	r2, r2, #4
 8004ffe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005004:	2208      	movs	r2, #8
 8005006:	409a      	lsls	r2, r3
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	f043 0201 	orr.w	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800501c:	2201      	movs	r2, #1
 800501e:	409a      	lsls	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	4013      	ands	r3, r2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d012      	beq.n	800504e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00b      	beq.n	800504e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503a:	2201      	movs	r2, #1
 800503c:	409a      	lsls	r2, r3
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005046:	f043 0202 	orr.w	r2, r3, #2
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005052:	2204      	movs	r2, #4
 8005054:	409a      	lsls	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	4013      	ands	r3, r2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d012      	beq.n	8005084 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00b      	beq.n	8005084 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005070:	2204      	movs	r2, #4
 8005072:	409a      	lsls	r2, r3
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507c:	f043 0204 	orr.w	r2, r3, #4
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005088:	2210      	movs	r2, #16
 800508a:	409a      	lsls	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4013      	ands	r3, r2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d043      	beq.n	800511c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d03c      	beq.n	800511c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050a6:	2210      	movs	r2, #16
 80050a8:	409a      	lsls	r2, r3
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d108      	bne.n	80050dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d024      	beq.n	800511c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	4798      	blx	r3
 80050da:	e01f      	b.n	800511c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01b      	beq.n	800511c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	4798      	blx	r3
 80050ec:	e016      	b.n	800511c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0208 	bic.w	r2, r2, #8
 800510a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005120:	2220      	movs	r2, #32
 8005122:	409a      	lsls	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	f000 808f 	beq.w	800524c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8087 	beq.w	800524c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005142:	2220      	movs	r2, #32
 8005144:	409a      	lsls	r2, r3
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b05      	cmp	r3, #5
 8005154:	d136      	bne.n	80051c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0216 	bic.w	r2, r2, #22
 8005164:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	695a      	ldr	r2, [r3, #20]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005174:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517a:	2b00      	cmp	r3, #0
 800517c:	d103      	bne.n	8005186 <HAL_DMA_IRQHandler+0x1da>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005182:	2b00      	cmp	r3, #0
 8005184:	d007      	beq.n	8005196 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0208 	bic.w	r2, r2, #8
 8005194:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519a:	223f      	movs	r2, #63	@ 0x3f
 800519c:	409a      	lsls	r2, r3
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d07e      	beq.n	80052b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
        }
        return;
 80051c2:	e079      	b.n	80052b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d01d      	beq.n	800520e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d031      	beq.n	800524c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
 80051f0:	e02c      	b.n	800524c <HAL_DMA_IRQHandler+0x2a0>
 80051f2:	bf00      	nop
 80051f4:	20000018 	.word	0x20000018
 80051f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d023      	beq.n	800524c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	4798      	blx	r3
 800520c:	e01e      	b.n	800524c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10f      	bne.n	800523c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0210 	bic.w	r2, r2, #16
 800522a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005250:	2b00      	cmp	r3, #0
 8005252:	d032      	beq.n	80052ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d022      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2205      	movs	r2, #5
 8005264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	3301      	adds	r3, #1
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	697a      	ldr	r2, [r7, #20]
 8005280:	429a      	cmp	r2, r3
 8005282:	d307      	bcc.n	8005294 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f2      	bne.n	8005278 <HAL_DMA_IRQHandler+0x2cc>
 8005292:	e000      	b.n	8005296 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005294:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d005      	beq.n	80052ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	4798      	blx	r3
 80052b6:	e000      	b.n	80052ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80052b8:	bf00      	nop
    }
  }
}
 80052ba:	3718      	adds	r7, #24
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80052dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b40      	cmp	r3, #64	@ 0x40
 80052ec:	d108      	bne.n	8005300 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80052fe:	e007      	b.n	8005310 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	60da      	str	r2, [r3, #12]
}
 8005310:	bf00      	nop
 8005312:	3714      	adds	r7, #20
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	3b10      	subs	r3, #16
 800532c:	4a14      	ldr	r2, [pc, #80]	@ (8005380 <DMA_CalcBaseAndBitshift+0x64>)
 800532e:	fba2 2303 	umull	r2, r3, r2, r3
 8005332:	091b      	lsrs	r3, r3, #4
 8005334:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005336:	4a13      	ldr	r2, [pc, #76]	@ (8005384 <DMA_CalcBaseAndBitshift+0x68>)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b03      	cmp	r3, #3
 8005348:	d909      	bls.n	800535e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005352:	f023 0303 	bic.w	r3, r3, #3
 8005356:	1d1a      	adds	r2, r3, #4
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	659a      	str	r2, [r3, #88]	@ 0x58
 800535c:	e007      	b.n	800536e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005366:	f023 0303 	bic.w	r3, r3, #3
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	aaaaaaab 	.word	0xaaaaaaab
 8005384:	0800c69c 	.word	0x0800c69c

08005388 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11f      	bne.n	80053e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d856      	bhi.n	8005456 <DMA_CheckFifoParam+0xce>
 80053a8:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <DMA_CheckFifoParam+0x28>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	080053c1 	.word	0x080053c1
 80053b4:	080053d3 	.word	0x080053d3
 80053b8:	080053c1 	.word	0x080053c1
 80053bc:	08005457 	.word	0x08005457
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d046      	beq.n	800545a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d0:	e043      	b.n	800545a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053da:	d140      	bne.n	800545e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053e0:	e03d      	b.n	800545e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ea:	d121      	bne.n	8005430 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d837      	bhi.n	8005462 <DMA_CheckFifoParam+0xda>
 80053f2:	a201      	add	r2, pc, #4	@ (adr r2, 80053f8 <DMA_CheckFifoParam+0x70>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005409 	.word	0x08005409
 80053fc:	0800540f 	.word	0x0800540f
 8005400:	08005409 	.word	0x08005409
 8005404:	08005421 	.word	0x08005421
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	73fb      	strb	r3, [r7, #15]
      break;
 800540c:	e030      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d025      	beq.n	8005466 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800541e:	e022      	b.n	8005466 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005424:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005428:	d11f      	bne.n	800546a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800542e:	e01c      	b.n	800546a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d903      	bls.n	800543e <DMA_CheckFifoParam+0xb6>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d003      	beq.n	8005444 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800543c:	e018      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
      break;
 8005442:	e015      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00e      	beq.n	800546e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	73fb      	strb	r3, [r7, #15]
      break;
 8005454:	e00b      	b.n	800546e <DMA_CheckFifoParam+0xe6>
      break;
 8005456:	bf00      	nop
 8005458:	e00a      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      break;
 800545a:	bf00      	nop
 800545c:	e008      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      break;
 800545e:	bf00      	nop
 8005460:	e006      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      break;
 8005462:	bf00      	nop
 8005464:	e004      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      break;
 8005466:	bf00      	nop
 8005468:	e002      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      break;   
 800546a:	bf00      	nop
 800546c:	e000      	b.n	8005470 <DMA_CheckFifoParam+0xe8>
      break;
 800546e:	bf00      	nop
    }
  } 
  
  return status; 
 8005470:	7bfb      	ldrb	r3, [r7, #15]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop

08005480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	@ 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e159      	b.n	8005750 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800549c:	2201      	movs	r2, #1
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	fa02 f303 	lsl.w	r3, r2, r3
 80054a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	f040 8148 	bne.w	800574a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d005      	beq.n	80054d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d130      	bne.n	8005534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	2203      	movs	r2, #3
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	43db      	mvns	r3, r3
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	4013      	ands	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	fa02 f303 	lsl.w	r3, r2, r3
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	69ba      	ldr	r2, [r7, #24]
 8005500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005508:	2201      	movs	r2, #1
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4013      	ands	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	091b      	lsrs	r3, r3, #4
 800551e:	f003 0201 	and.w	r2, r3, #1
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	fa02 f303 	lsl.w	r3, r2, r3
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	4313      	orrs	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f003 0303 	and.w	r3, r3, #3
 800553c:	2b03      	cmp	r3, #3
 800553e:	d017      	beq.n	8005570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	2203      	movs	r2, #3
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	4013      	ands	r3, r2
 8005556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d123      	bne.n	80055c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	08da      	lsrs	r2, r3, #3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3208      	adds	r2, #8
 8005584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f003 0307 	and.w	r3, r3, #7
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	220f      	movs	r2, #15
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43db      	mvns	r3, r3
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	4013      	ands	r3, r2
 800559e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	691a      	ldr	r2, [r3, #16]
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	fa02 f303 	lsl.w	r3, r2, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	08da      	lsrs	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	3208      	adds	r2, #8
 80055be:	69b9      	ldr	r1, [r7, #24]
 80055c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	2203      	movs	r2, #3
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	43db      	mvns	r3, r3
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4013      	ands	r3, r2
 80055da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 0203 	and.w	r2, r3, #3
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	69ba      	ldr	r2, [r7, #24]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80a2 	beq.w	800574a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b57      	ldr	r3, [pc, #348]	@ (8005768 <HAL_GPIO_Init+0x2e8>)
 800560c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800560e:	4a56      	ldr	r2, [pc, #344]	@ (8005768 <HAL_GPIO_Init+0x2e8>)
 8005610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005614:	6453      	str	r3, [r2, #68]	@ 0x44
 8005616:	4b54      	ldr	r3, [pc, #336]	@ (8005768 <HAL_GPIO_Init+0x2e8>)
 8005618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005622:	4a52      	ldr	r2, [pc, #328]	@ (800576c <HAL_GPIO_Init+0x2ec>)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	089b      	lsrs	r3, r3, #2
 8005628:	3302      	adds	r3, #2
 800562a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800562e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	220f      	movs	r2, #15
 800563a:	fa02 f303 	lsl.w	r3, r2, r3
 800563e:	43db      	mvns	r3, r3
 8005640:	69ba      	ldr	r2, [r7, #24]
 8005642:	4013      	ands	r3, r2
 8005644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a49      	ldr	r2, [pc, #292]	@ (8005770 <HAL_GPIO_Init+0x2f0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d019      	beq.n	8005682 <HAL_GPIO_Init+0x202>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a48      	ldr	r2, [pc, #288]	@ (8005774 <HAL_GPIO_Init+0x2f4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_GPIO_Init+0x1fe>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a47      	ldr	r2, [pc, #284]	@ (8005778 <HAL_GPIO_Init+0x2f8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00d      	beq.n	800567a <HAL_GPIO_Init+0x1fa>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a46      	ldr	r2, [pc, #280]	@ (800577c <HAL_GPIO_Init+0x2fc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <HAL_GPIO_Init+0x1f6>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a45      	ldr	r2, [pc, #276]	@ (8005780 <HAL_GPIO_Init+0x300>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d101      	bne.n	8005672 <HAL_GPIO_Init+0x1f2>
 800566e:	2304      	movs	r3, #4
 8005670:	e008      	b.n	8005684 <HAL_GPIO_Init+0x204>
 8005672:	2307      	movs	r3, #7
 8005674:	e006      	b.n	8005684 <HAL_GPIO_Init+0x204>
 8005676:	2303      	movs	r3, #3
 8005678:	e004      	b.n	8005684 <HAL_GPIO_Init+0x204>
 800567a:	2302      	movs	r3, #2
 800567c:	e002      	b.n	8005684 <HAL_GPIO_Init+0x204>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <HAL_GPIO_Init+0x204>
 8005682:	2300      	movs	r3, #0
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	f002 0203 	and.w	r2, r2, #3
 800568a:	0092      	lsls	r2, r2, #2
 800568c:	4093      	lsls	r3, r2
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	4313      	orrs	r3, r2
 8005692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005694:	4935      	ldr	r1, [pc, #212]	@ (800576c <HAL_GPIO_Init+0x2ec>)
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	3302      	adds	r3, #2
 800569c:	69ba      	ldr	r2, [r7, #24]
 800569e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056a2:	4b38      	ldr	r3, [pc, #224]	@ (8005784 <HAL_GPIO_Init+0x304>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	4013      	ands	r3, r2
 80056b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80056be:	69ba      	ldr	r2, [r7, #24]
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056c6:	4a2f      	ldr	r2, [pc, #188]	@ (8005784 <HAL_GPIO_Init+0x304>)
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005784 <HAL_GPIO_Init+0x304>)
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69ba      	ldr	r2, [r7, #24]
 80056d8:	4013      	ands	r3, r2
 80056da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056f0:	4a24      	ldr	r2, [pc, #144]	@ (8005784 <HAL_GPIO_Init+0x304>)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056f6:	4b23      	ldr	r3, [pc, #140]	@ (8005784 <HAL_GPIO_Init+0x304>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	43db      	mvns	r3, r3
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	4013      	ands	r3, r2
 8005704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800571a:	4a1a      	ldr	r2, [pc, #104]	@ (8005784 <HAL_GPIO_Init+0x304>)
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005720:	4b18      	ldr	r3, [pc, #96]	@ (8005784 <HAL_GPIO_Init+0x304>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	43db      	mvns	r3, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	4013      	ands	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d003      	beq.n	8005744 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800573c:	69ba      	ldr	r2, [r7, #24]
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	4313      	orrs	r3, r2
 8005742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005744:	4a0f      	ldr	r2, [pc, #60]	@ (8005784 <HAL_GPIO_Init+0x304>)
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	3301      	adds	r3, #1
 800574e:	61fb      	str	r3, [r7, #28]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	f67f aea2 	bls.w	800549c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005758:	bf00      	nop
 800575a:	bf00      	nop
 800575c:	3724      	adds	r7, #36	@ 0x24
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800
 800576c:	40013800 	.word	0x40013800
 8005770:	40020000 	.word	0x40020000
 8005774:	40020400 	.word	0x40020400
 8005778:	40020800 	.word	0x40020800
 800577c:	40020c00 	.word	0x40020c00
 8005780:	40021000 	.word	0x40021000
 8005784:	40013c00 	.word	0x40013c00

08005788 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	460b      	mov	r3, r1
 8005792:	807b      	strh	r3, [r7, #2]
 8005794:	4613      	mov	r3, r2
 8005796:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005798:	787b      	ldrb	r3, [r7, #1]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80057a4:	e003      	b.n	80057ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80057a6:	887b      	ldrh	r3, [r7, #2]
 80057a8:	041a      	lsls	r2, r3, #16
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	619a      	str	r2, [r3, #24]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
	...

080057bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	4603      	mov	r3, r0
 80057c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80057c6:	4b08      	ldr	r3, [pc, #32]	@ (80057e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057c8:	695a      	ldr	r2, [r3, #20]
 80057ca:	88fb      	ldrh	r3, [r7, #6]
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d006      	beq.n	80057e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80057d2:	4a05      	ldr	r2, [pc, #20]	@ (80057e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80057d4:	88fb      	ldrh	r3, [r7, #6]
 80057d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80057d8:	88fb      	ldrh	r3, [r7, #6]
 80057da:	4618      	mov	r0, r3
 80057dc:	f7fd fb56 	bl	8002e8c <HAL_GPIO_EXTI_Callback>
  }
}
 80057e0:	bf00      	nop
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40013c00 	.word	0x40013c00

080057ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e12b      	b.n	8005a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d106      	bne.n	8005818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f7fe f8b0 	bl	8003978 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2224      	movs	r2, #36	@ 0x24
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0201 	bic.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800583e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800584e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005850:	f001 fc20 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 8005854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4a81      	ldr	r2, [pc, #516]	@ (8005a60 <HAL_I2C_Init+0x274>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d807      	bhi.n	8005870 <HAL_I2C_Init+0x84>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a80      	ldr	r2, [pc, #512]	@ (8005a64 <HAL_I2C_Init+0x278>)
 8005864:	4293      	cmp	r3, r2
 8005866:	bf94      	ite	ls
 8005868:	2301      	movls	r3, #1
 800586a:	2300      	movhi	r3, #0
 800586c:	b2db      	uxtb	r3, r3
 800586e:	e006      	b.n	800587e <HAL_I2C_Init+0x92>
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4a7d      	ldr	r2, [pc, #500]	@ (8005a68 <HAL_I2C_Init+0x27c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	bf94      	ite	ls
 8005878:	2301      	movls	r3, #1
 800587a:	2300      	movhi	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e0e7      	b.n	8005a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	4a78      	ldr	r2, [pc, #480]	@ (8005a6c <HAL_I2C_Init+0x280>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0c9b      	lsrs	r3, r3, #18
 8005890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005a60 <HAL_I2C_Init+0x274>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d802      	bhi.n	80058c0 <HAL_I2C_Init+0xd4>
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3301      	adds	r3, #1
 80058be:	e009      	b.n	80058d4 <HAL_I2C_Init+0xe8>
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	4a69      	ldr	r2, [pc, #420]	@ (8005a70 <HAL_I2C_Init+0x284>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	099b      	lsrs	r3, r3, #6
 80058d2:	3301      	adds	r3, #1
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	430b      	orrs	r3, r1
 80058da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80058e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	495c      	ldr	r1, [pc, #368]	@ (8005a60 <HAL_I2C_Init+0x274>)
 80058f0:	428b      	cmp	r3, r1
 80058f2:	d819      	bhi.n	8005928 <HAL_I2C_Init+0x13c>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	1e59      	subs	r1, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	005b      	lsls	r3, r3, #1
 80058fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005902:	1c59      	adds	r1, r3, #1
 8005904:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005908:	400b      	ands	r3, r1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_I2C_Init+0x138>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1e59      	subs	r1, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	fbb1 f3f3 	udiv	r3, r1, r3
 800591c:	3301      	adds	r3, #1
 800591e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005922:	e051      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 8005924:	2304      	movs	r3, #4
 8005926:	e04f      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d111      	bne.n	8005954 <HAL_I2C_Init+0x168>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	1e58      	subs	r0, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	440b      	add	r3, r1
 800593e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005942:	3301      	adds	r3, #1
 8005944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005948:	2b00      	cmp	r3, #0
 800594a:	bf0c      	ite	eq
 800594c:	2301      	moveq	r3, #1
 800594e:	2300      	movne	r3, #0
 8005950:	b2db      	uxtb	r3, r3
 8005952:	e012      	b.n	800597a <HAL_I2C_Init+0x18e>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1e58      	subs	r0, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6859      	ldr	r1, [r3, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	440b      	add	r3, r1
 8005962:	0099      	lsls	r1, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	fbb0 f3f3 	udiv	r3, r0, r3
 800596a:	3301      	adds	r3, #1
 800596c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005970:	2b00      	cmp	r3, #0
 8005972:	bf0c      	ite	eq
 8005974:	2301      	moveq	r3, #1
 8005976:	2300      	movne	r3, #0
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	d001      	beq.n	8005982 <HAL_I2C_Init+0x196>
 800597e:	2301      	movs	r3, #1
 8005980:	e022      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10e      	bne.n	80059a8 <HAL_I2C_Init+0x1bc>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1e58      	subs	r0, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	460b      	mov	r3, r1
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	440b      	add	r3, r1
 8005998:	fbb0 f3f3 	udiv	r3, r0, r3
 800599c:	3301      	adds	r3, #1
 800599e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a6:	e00f      	b.n	80059c8 <HAL_I2C_Init+0x1dc>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	1e58      	subs	r0, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	440b      	add	r3, r1
 80059b6:	0099      	lsls	r1, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80059be:	3301      	adds	r3, #1
 80059c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	6809      	ldr	r1, [r1, #0]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69da      	ldr	r2, [r3, #28]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80059f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6911      	ldr	r1, [r2, #16]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	68d2      	ldr	r2, [r2, #12]
 8005a02:	4311      	orrs	r1, r2
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695a      	ldr	r2, [r3, #20]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3710      	adds	r7, #16
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	000186a0 	.word	0x000186a0
 8005a64:	001e847f 	.word	0x001e847f
 8005a68:	003d08ff 	.word	0x003d08ff
 8005a6c:	431bde83 	.word	0x431bde83
 8005a70:	10624dd3 	.word	0x10624dd3

08005a74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b088      	sub	sp, #32
 8005a78:	af02      	add	r7, sp, #8
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	4608      	mov	r0, r1
 8005a7e:	4611      	mov	r1, r2
 8005a80:	461a      	mov	r2, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	817b      	strh	r3, [r7, #10]
 8005a86:	460b      	mov	r3, r1
 8005a88:	813b      	strh	r3, [r7, #8]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a8e:	f7fe fbf5 	bl	800427c <HAL_GetTick>
 8005a92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b20      	cmp	r3, #32
 8005a9e:	f040 80d9 	bne.w	8005c54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	2319      	movs	r3, #25
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	496d      	ldr	r1, [pc, #436]	@ (8005c60 <HAL_I2C_Mem_Write+0x1ec>)
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 fc8b 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0cc      	b.n	8005c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d101      	bne.n	8005aca <HAL_I2C_Mem_Write+0x56>
 8005ac6:	2302      	movs	r3, #2
 8005ac8:	e0c5      	b.n	8005c56 <HAL_I2C_Mem_Write+0x1e2>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0301 	and.w	r3, r3, #1
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d007      	beq.n	8005af0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f042 0201 	orr.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2221      	movs	r2, #33	@ 0x21
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2240      	movs	r2, #64	@ 0x40
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a3a      	ldr	r2, [r7, #32]
 8005b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8005c64 <HAL_I2C_Mem_Write+0x1f0>)
 8005b30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b32:	88f8      	ldrh	r0, [r7, #6]
 8005b34:	893a      	ldrh	r2, [r7, #8]
 8005b36:	8979      	ldrh	r1, [r7, #10]
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4603      	mov	r3, r0
 8005b42:	68f8      	ldr	r0, [r7, #12]
 8005b44:	f000 fac2 	bl	80060cc <I2C_RequestMemoryWrite>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d052      	beq.n	8005bf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e081      	b.n	8005c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fd50 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00d      	beq.n	8005b7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	2b04      	cmp	r3, #4
 8005b68:	d107      	bne.n	8005b7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e06b      	b.n	8005c56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b82:	781a      	ldrb	r2, [r3, #0]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d11b      	bne.n	8005bf4 <HAL_I2C_Mem_Write+0x180>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	781a      	ldrb	r2, [r3, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1aa      	bne.n	8005b52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 fd43 	bl	800668c <I2C_WaitOnBTFFlagUntilTimeout>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00d      	beq.n	8005c28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d107      	bne.n	8005c24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e016      	b.n	8005c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	e000      	b.n	8005c56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005c54:	2302      	movs	r3, #2
  }
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	00100002 	.word	0x00100002
 8005c64:	ffff0000 	.word	0xffff0000

08005c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08c      	sub	sp, #48	@ 0x30
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	4608      	mov	r0, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	817b      	strh	r3, [r7, #10]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	813b      	strh	r3, [r7, #8]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c82:	f7fe fafb 	bl	800427c <HAL_GetTick>
 8005c86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	f040 8214 	bne.w	80060be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	2319      	movs	r3, #25
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	497b      	ldr	r1, [pc, #492]	@ (8005e8c <HAL_I2C_Mem_Read+0x224>)
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f000 fb91 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005cac:	2302      	movs	r3, #2
 8005cae:	e207      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d101      	bne.n	8005cbe <HAL_I2C_Mem_Read+0x56>
 8005cba:	2302      	movs	r3, #2
 8005cbc:	e200      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d007      	beq.n	8005ce4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0201 	orr.w	r2, r2, #1
 8005ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2222      	movs	r2, #34	@ 0x22
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2240      	movs	r2, #64	@ 0x40
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4a5b      	ldr	r2, [pc, #364]	@ (8005e90 <HAL_I2C_Mem_Read+0x228>)
 8005d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005d26:	88f8      	ldrh	r0, [r7, #6]
 8005d28:	893a      	ldrh	r2, [r7, #8]
 8005d2a:	8979      	ldrh	r1, [r7, #10]
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	4603      	mov	r3, r0
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fa5e 	bl	80061f8 <I2C_RequestMemoryRead>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d001      	beq.n	8005d46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e1bc      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d113      	bne.n	8005d76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	623b      	str	r3, [r7, #32]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	623b      	str	r3, [r7, #32]
 8005d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	e190      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d11b      	bne.n	8005db6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8e:	2300      	movs	r3, #0
 8005d90:	61fb      	str	r3, [r7, #28]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e170      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d11b      	bne.n	8005df6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	61bb      	str	r3, [r7, #24]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	61bb      	str	r3, [r7, #24]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	61bb      	str	r3, [r7, #24]
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	e150      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005e0c:	e144      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e12:	2b03      	cmp	r3, #3
 8005e14:	f200 80f1 	bhi.w	8005ffa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d123      	bne.n	8005e68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fc79 	bl	800671c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e145      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691a      	ldr	r2, [r3, #16]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	1c5a      	adds	r2, r3, #1
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e66:	e117      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d14e      	bne.n	8005f0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e76:	2200      	movs	r2, #0
 8005e78:	4906      	ldr	r1, [pc, #24]	@ (8005e94 <HAL_I2C_Mem_Read+0x22c>)
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 faa4 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e11a      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
 8005e8a:	bf00      	nop
 8005e8c:	00100002 	.word	0x00100002
 8005e90:	ffff0000 	.word	0xffff0000
 8005e94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691a      	ldr	r2, [r3, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691a      	ldr	r2, [r3, #16]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eec:	1c5a      	adds	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f0c:	e0c4      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	2200      	movs	r2, #0
 8005f16:	496c      	ldr	r1, [pc, #432]	@ (80060c8 <HAL_I2C_Mem_Read+0x460>)
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f000 fa55 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e0cb      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691a      	ldr	r2, [r3, #16]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f70:	2200      	movs	r2, #0
 8005f72:	4955      	ldr	r1, [pc, #340]	@ (80060c8 <HAL_I2C_Mem_Read+0x460>)
 8005f74:	68f8      	ldr	r0, [r7, #12]
 8005f76:	f000 fa27 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d001      	beq.n	8005f84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e09d      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691a      	ldr	r2, [r3, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd0:	b2d2      	uxtb	r2, r2
 8005fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ff8:	e04e      	b.n	8006098 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f000 fb8c 	bl	800671c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006004:	4603      	mov	r3, r0
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e058      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006036:	b29b      	uxth	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b29a      	uxth	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b04      	cmp	r3, #4
 800604c:	d124      	bne.n	8006098 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006064:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609c:	2b00      	cmp	r3, #0
 800609e:	f47f aeb6 	bne.w	8005e0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	e000      	b.n	80060c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80060be:	2302      	movs	r3, #2
  }
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3728      	adds	r7, #40	@ 0x28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	00010004 	.word	0x00010004

080060cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	4608      	mov	r0, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	4603      	mov	r3, r0
 80060dc:	817b      	strh	r3, [r7, #10]
 80060de:	460b      	mov	r3, r1
 80060e0:	813b      	strh	r3, [r7, #8]
 80060e2:	4613      	mov	r3, r2
 80060e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f960 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00d      	beq.n	800612a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800611c:	d103      	bne.n	8006126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006126:	2303      	movs	r3, #3
 8006128:	e05f      	b.n	80061ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800612a:	897b      	ldrh	r3, [r7, #10]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	461a      	mov	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	6a3a      	ldr	r2, [r7, #32]
 800613e:	492d      	ldr	r1, [pc, #180]	@ (80061f4 <I2C_RequestMemoryWrite+0x128>)
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f9bb 	bl	80064bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e04c      	b.n	80061ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	617b      	str	r3, [r7, #20]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006168:	6a39      	ldr	r1, [r7, #32]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f000 fa46 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00d      	beq.n	8006192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617a:	2b04      	cmp	r3, #4
 800617c:	d107      	bne.n	800618e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681a      	ldr	r2, [r3, #0]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800618c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e02b      	b.n	80061ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d105      	bne.n	80061a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006198:	893b      	ldrh	r3, [r7, #8]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	611a      	str	r2, [r3, #16]
 80061a2:	e021      	b.n	80061e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061a4:	893b      	ldrh	r3, [r7, #8]
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b4:	6a39      	ldr	r1, [r7, #32]
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f000 fa20 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d00d      	beq.n	80061de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d107      	bne.n	80061da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e005      	b.n	80061ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061de:	893b      	ldrh	r3, [r7, #8]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	00010002 	.word	0x00010002

080061f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	4608      	mov	r0, r1
 8006202:	4611      	mov	r1, r2
 8006204:	461a      	mov	r2, r3
 8006206:	4603      	mov	r3, r0
 8006208:	817b      	strh	r3, [r7, #10]
 800620a:	460b      	mov	r3, r1
 800620c:	813b      	strh	r3, [r7, #8]
 800620e:	4613      	mov	r3, r2
 8006210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	6a3b      	ldr	r3, [r7, #32]
 8006238:	2200      	movs	r2, #0
 800623a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f8c2 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006258:	d103      	bne.n	8006262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e0aa      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006266:	897b      	ldrh	r3, [r7, #10]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	6a3a      	ldr	r2, [r7, #32]
 800627a:	4952      	ldr	r1, [pc, #328]	@ (80063c4 <I2C_RequestMemoryRead+0x1cc>)
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 f91d 	bl	80064bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e097      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800628c:	2300      	movs	r3, #0
 800628e:	617b      	str	r3, [r7, #20]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	617b      	str	r3, [r7, #20]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a4:	6a39      	ldr	r1, [r7, #32]
 80062a6:	68f8      	ldr	r0, [r7, #12]
 80062a8:	f000 f9a8 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00d      	beq.n	80062ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	2b04      	cmp	r3, #4
 80062b8:	d107      	bne.n	80062ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e076      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d105      	bne.n	80062e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062d4:	893b      	ldrh	r3, [r7, #8]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	611a      	str	r2, [r3, #16]
 80062de:	e021      	b.n	8006324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062e0:	893b      	ldrh	r3, [r7, #8]
 80062e2:	0a1b      	lsrs	r3, r3, #8
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	b2da      	uxtb	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062f0:	6a39      	ldr	r1, [r7, #32]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f982 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00d      	beq.n	800631a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006302:	2b04      	cmp	r3, #4
 8006304:	d107      	bne.n	8006316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e050      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800631a:	893b      	ldrh	r3, [r7, #8]
 800631c:	b2da      	uxtb	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006326:	6a39      	ldr	r1, [r7, #32]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 f967 	bl	80065fc <I2C_WaitOnTXEFlagUntilTimeout>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	2b04      	cmp	r3, #4
 800633a:	d107      	bne.n	800634c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800634a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e035      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800635e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006362:	9300      	str	r3, [sp, #0]
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	2200      	movs	r2, #0
 8006368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f82b 	bl	80063c8 <I2C_WaitOnFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00d      	beq.n	8006394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006386:	d103      	bne.n	8006390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800638e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e013      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006394:	897b      	ldrh	r3, [r7, #10]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	b2da      	uxtb	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	4906      	ldr	r1, [pc, #24]	@ (80063c4 <I2C_RequestMemoryRead+0x1cc>)
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 f886 	bl	80064bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e000      	b.n	80063bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	00010002 	.word	0x00010002

080063c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	4613      	mov	r3, r2
 80063d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063d8:	e048      	b.n	800646c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e0:	d044      	beq.n	800646c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fd ff4b 	bl	800427c <HAL_GetTick>
 80063e6:	4602      	mov	r2, r0
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	683a      	ldr	r2, [r7, #0]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d139      	bne.n	800646c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d10d      	bne.n	800641e <I2C_WaitOnFlagUntilTimeout+0x56>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	695b      	ldr	r3, [r3, #20]
 8006408:	43da      	mvns	r2, r3
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	4013      	ands	r3, r2
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	bf0c      	ite	eq
 8006414:	2301      	moveq	r3, #1
 8006416:	2300      	movne	r3, #0
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	e00c      	b.n	8006438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	43da      	mvns	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	b29b      	uxth	r3, r3
 800642c:	2b00      	cmp	r3, #0
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	d116      	bne.n	800646c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2220      	movs	r2, #32
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006458:	f043 0220 	orr.w	r2, r3, #32
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e023      	b.n	80064b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	0c1b      	lsrs	r3, r3, #16
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	d10d      	bne.n	8006492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	695b      	ldr	r3, [r3, #20]
 800647c:	43da      	mvns	r2, r3
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	b29b      	uxth	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	e00c      	b.n	80064ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	43da      	mvns	r2, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	b29b      	uxth	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d093      	beq.n	80063da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
 80064c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064ca:	e071      	b.n	80065b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	695b      	ldr	r3, [r3, #20]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064da:	d123      	bne.n	8006524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	f043 0204 	orr.w	r2, r3, #4
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e067      	b.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652a:	d041      	beq.n	80065b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652c:	f7fd fea6 	bl	800427c <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	429a      	cmp	r2, r3
 800653a:	d302      	bcc.n	8006542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d136      	bne.n	80065b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	d10c      	bne.n	8006566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	43da      	mvns	r2, r3
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	4013      	ands	r3, r2
 8006558:	b29b      	uxth	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e00b      	b.n	800657e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	43da      	mvns	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4013      	ands	r3, r2
 8006572:	b29b      	uxth	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d016      	beq.n	80065b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800659c:	f043 0220 	orr.w	r2, r3, #32
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e021      	b.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	0c1b      	lsrs	r3, r3, #16
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d10c      	bne.n	80065d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	43da      	mvns	r2, r3
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	4013      	ands	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	e00b      	b.n	80065ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	43da      	mvns	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4013      	ands	r3, r2
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f47f af6d 	bne.w	80064cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006608:	e034      	b.n	8006674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f000 f8e3 	bl	80067d6 <I2C_IsAcknowledgeFailed>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d001      	beq.n	800661a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e034      	b.n	8006684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d028      	beq.n	8006674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006622:	f7fd fe2b 	bl	800427c <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	d302      	bcc.n	8006638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d11d      	bne.n	8006674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006642:	2b80      	cmp	r3, #128	@ 0x80
 8006644:	d016      	beq.n	8006674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	f043 0220 	orr.w	r2, r3, #32
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e007      	b.n	8006684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800667e:	2b80      	cmp	r3, #128	@ 0x80
 8006680:	d1c3      	bne.n	800660a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	3710      	adds	r7, #16
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006698:	e034      	b.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f89b 	bl	80067d6 <I2C_IsAcknowledgeFailed>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e034      	b.n	8006714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b0:	d028      	beq.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b2:	f7fd fde3 	bl	800427c <HAL_GetTick>
 80066b6:	4602      	mov	r2, r0
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d302      	bcc.n	80066c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11d      	bne.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b04      	cmp	r3, #4
 80066d4:	d016      	beq.n	8006704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f0:	f043 0220 	orr.w	r2, r3, #32
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e007      	b.n	8006714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	f003 0304 	and.w	r3, r3, #4
 800670e:	2b04      	cmp	r3, #4
 8006710:	d1c3      	bne.n	800669a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006728:	e049      	b.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	695b      	ldr	r3, [r3, #20]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b10      	cmp	r3, #16
 8006736:	d119      	bne.n	800676c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0210 	mvn.w	r2, #16
 8006740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e030      	b.n	80067ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676c:	f7fd fd86 	bl	800427c <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	d302      	bcc.n	8006782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d11d      	bne.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b40      	cmp	r3, #64	@ 0x40
 800678e:	d016      	beq.n	80067be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067aa:	f043 0220 	orr.w	r2, r3, #32
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e007      	b.n	80067ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c8:	2b40      	cmp	r3, #64	@ 0x40
 80067ca:	d1ae      	bne.n	800672a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067d6:	b480      	push	{r7}
 80067d8:	b083      	sub	sp, #12
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067ec:	d11b      	bne.n	8006826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006812:	f043 0204 	orr.w	r2, r3, #4
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e000      	b.n	8006828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr

08006834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e267      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d075      	beq.n	800693e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006852:	4b88      	ldr	r3, [pc, #544]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	f003 030c 	and.w	r3, r3, #12
 800685a:	2b04      	cmp	r3, #4
 800685c:	d00c      	beq.n	8006878 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800685e:	4b85      	ldr	r3, [pc, #532]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006866:	2b08      	cmp	r3, #8
 8006868:	d112      	bne.n	8006890 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800686a:	4b82      	ldr	r3, [pc, #520]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006876:	d10b      	bne.n	8006890 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006878:	4b7e      	ldr	r3, [pc, #504]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d05b      	beq.n	800693c <HAL_RCC_OscConfig+0x108>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d157      	bne.n	800693c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e242      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006898:	d106      	bne.n	80068a8 <HAL_RCC_OscConfig+0x74>
 800689a:	4b76      	ldr	r3, [pc, #472]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a75      	ldr	r2, [pc, #468]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e01d      	b.n	80068e4 <HAL_RCC_OscConfig+0xb0>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80068b0:	d10c      	bne.n	80068cc <HAL_RCC_OscConfig+0x98>
 80068b2:	4b70      	ldr	r3, [pc, #448]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	4b6d      	ldr	r3, [pc, #436]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	e00b      	b.n	80068e4 <HAL_RCC_OscConfig+0xb0>
 80068cc:	4b69      	ldr	r3, [pc, #420]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a68      	ldr	r2, [pc, #416]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068d6:	6013      	str	r3, [r2, #0]
 80068d8:	4b66      	ldr	r3, [pc, #408]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a65      	ldr	r2, [pc, #404]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80068de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d013      	beq.n	8006914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068ec:	f7fd fcc6 	bl	800427c <HAL_GetTick>
 80068f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068f2:	e008      	b.n	8006906 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068f4:	f7fd fcc2 	bl	800427c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	2b64      	cmp	r3, #100	@ 0x64
 8006900:	d901      	bls.n	8006906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e207      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006906:	4b5b      	ldr	r3, [pc, #364]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0f0      	beq.n	80068f4 <HAL_RCC_OscConfig+0xc0>
 8006912:	e014      	b.n	800693e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006914:	f7fd fcb2 	bl	800427c <HAL_GetTick>
 8006918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800691a:	e008      	b.n	800692e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800691c:	f7fd fcae 	bl	800427c <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	2b64      	cmp	r3, #100	@ 0x64
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e1f3      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800692e:	4b51      	ldr	r3, [pc, #324]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1f0      	bne.n	800691c <HAL_RCC_OscConfig+0xe8>
 800693a:	e000      	b.n	800693e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800693c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0302 	and.w	r3, r3, #2
 8006946:	2b00      	cmp	r3, #0
 8006948:	d063      	beq.n	8006a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800694a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 030c 	and.w	r3, r3, #12
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006956:	4b47      	ldr	r3, [pc, #284]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800695e:	2b08      	cmp	r3, #8
 8006960:	d11c      	bne.n	800699c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006962:	4b44      	ldr	r3, [pc, #272]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d116      	bne.n	800699c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800696e:	4b41      	ldr	r3, [pc, #260]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_RCC_OscConfig+0x152>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d001      	beq.n	8006986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e1c7      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006986:	4b3b      	ldr	r3, [pc, #236]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4937      	ldr	r1, [pc, #220]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006996:	4313      	orrs	r3, r2
 8006998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800699a:	e03a      	b.n	8006a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d020      	beq.n	80069e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069a4:	4b34      	ldr	r3, [pc, #208]	@ (8006a78 <HAL_RCC_OscConfig+0x244>)
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069aa:	f7fd fc67 	bl	800427c <HAL_GetTick>
 80069ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069b2:	f7fd fc63 	bl	800427c <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e1a8      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069d0:	4b28      	ldr	r3, [pc, #160]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4925      	ldr	r1, [pc, #148]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	600b      	str	r3, [r1, #0]
 80069e4:	e015      	b.n	8006a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069e6:	4b24      	ldr	r3, [pc, #144]	@ (8006a78 <HAL_RCC_OscConfig+0x244>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ec:	f7fd fc46 	bl	800427c <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069f4:	f7fd fc42 	bl	800427c <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e187      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a06:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 0302 	and.w	r3, r3, #2
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 0308 	and.w	r3, r3, #8
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d036      	beq.n	8006a8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d016      	beq.n	8006a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a26:	4b15      	ldr	r3, [pc, #84]	@ (8006a7c <HAL_RCC_OscConfig+0x248>)
 8006a28:	2201      	movs	r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a2c:	f7fd fc26 	bl	800427c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a34:	f7fd fc22 	bl	800427c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e167      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a46:	4b0b      	ldr	r3, [pc, #44]	@ (8006a74 <HAL_RCC_OscConfig+0x240>)
 8006a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a4a:	f003 0302 	and.w	r3, r3, #2
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x200>
 8006a52:	e01b      	b.n	8006a8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a54:	4b09      	ldr	r3, [pc, #36]	@ (8006a7c <HAL_RCC_OscConfig+0x248>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a5a:	f7fd fc0f 	bl	800427c <HAL_GetTick>
 8006a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a60:	e00e      	b.n	8006a80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a62:	f7fd fc0b 	bl	800427c <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d907      	bls.n	8006a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e150      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
 8006a74:	40023800 	.word	0x40023800
 8006a78:	42470000 	.word	0x42470000
 8006a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a80:	4b88      	ldr	r3, [pc, #544]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a84:	f003 0302 	and.w	r3, r3, #2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1ea      	bne.n	8006a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8097 	beq.w	8006bc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a9e:	4b81      	ldr	r3, [pc, #516]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d10f      	bne.n	8006aca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	60bb      	str	r3, [r7, #8]
 8006aae:	4b7d      	ldr	r3, [pc, #500]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8006aba:	4b7a      	ldr	r3, [pc, #488]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ac2:	60bb      	str	r3, [r7, #8]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aca:	4b77      	ldr	r3, [pc, #476]	@ (8006ca8 <HAL_RCC_OscConfig+0x474>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d118      	bne.n	8006b08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ad6:	4b74      	ldr	r3, [pc, #464]	@ (8006ca8 <HAL_RCC_OscConfig+0x474>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a73      	ldr	r2, [pc, #460]	@ (8006ca8 <HAL_RCC_OscConfig+0x474>)
 8006adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006ae2:	f7fd fbcb 	bl	800427c <HAL_GetTick>
 8006ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ae8:	e008      	b.n	8006afc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006aea:	f7fd fbc7 	bl	800427c <HAL_GetTick>
 8006aee:	4602      	mov	r2, r0
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	1ad3      	subs	r3, r2, r3
 8006af4:	2b02      	cmp	r3, #2
 8006af6:	d901      	bls.n	8006afc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006af8:	2303      	movs	r3, #3
 8006afa:	e10c      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006afc:	4b6a      	ldr	r3, [pc, #424]	@ (8006ca8 <HAL_RCC_OscConfig+0x474>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0f0      	beq.n	8006aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d106      	bne.n	8006b1e <HAL_RCC_OscConfig+0x2ea>
 8006b10:	4b64      	ldr	r3, [pc, #400]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b14:	4a63      	ldr	r2, [pc, #396]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b16:	f043 0301 	orr.w	r3, r3, #1
 8006b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b1c:	e01c      	b.n	8006b58 <HAL_RCC_OscConfig+0x324>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCC_OscConfig+0x30c>
 8006b26:	4b5f      	ldr	r3, [pc, #380]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b2c:	f043 0304 	orr.w	r3, r3, #4
 8006b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b32:	4b5c      	ldr	r3, [pc, #368]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b36:	4a5b      	ldr	r2, [pc, #364]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b38:	f043 0301 	orr.w	r3, r3, #1
 8006b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b3e:	e00b      	b.n	8006b58 <HAL_RCC_OscConfig+0x324>
 8006b40:	4b58      	ldr	r3, [pc, #352]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b44:	4a57      	ldr	r2, [pc, #348]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b46:	f023 0301 	bic.w	r3, r3, #1
 8006b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b4c:	4b55      	ldr	r3, [pc, #340]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b50:	4a54      	ldr	r2, [pc, #336]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b52:	f023 0304 	bic.w	r3, r3, #4
 8006b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d015      	beq.n	8006b8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b60:	f7fd fb8c 	bl	800427c <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b66:	e00a      	b.n	8006b7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b68:	f7fd fb88 	bl	800427c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e0cb      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7e:	4b49      	ldr	r3, [pc, #292]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b82:	f003 0302 	and.w	r3, r3, #2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d0ee      	beq.n	8006b68 <HAL_RCC_OscConfig+0x334>
 8006b8a:	e014      	b.n	8006bb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b8c:	f7fd fb76 	bl	800427c <HAL_GetTick>
 8006b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b92:	e00a      	b.n	8006baa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b94:	f7fd fb72 	bl	800427c <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e0b5      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006baa:	4b3e      	ldr	r3, [pc, #248]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ee      	bne.n	8006b94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006bb6:	7dfb      	ldrb	r3, [r7, #23]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d105      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bbc:	4b39      	ldr	r3, [pc, #228]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bc0:	4a38      	ldr	r2, [pc, #224]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f000 80a1 	beq.w	8006d14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bd2:	4b34      	ldr	r3, [pc, #208]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f003 030c 	and.w	r3, r3, #12
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d05c      	beq.n	8006c98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d141      	bne.n	8006c6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006be6:	4b31      	ldr	r3, [pc, #196]	@ (8006cac <HAL_RCC_OscConfig+0x478>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bec:	f7fd fb46 	bl	800427c <HAL_GetTick>
 8006bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bf4:	f7fd fb42 	bl	800427c <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e087      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c06:	4b27      	ldr	r3, [pc, #156]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f0      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69da      	ldr	r2, [r3, #28]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c20:	019b      	lsls	r3, r3, #6
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c28:	085b      	lsrs	r3, r3, #1
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	041b      	lsls	r3, r3, #16
 8006c2e:	431a      	orrs	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c34:	061b      	lsls	r3, r3, #24
 8006c36:	491b      	ldr	r1, [pc, #108]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cac <HAL_RCC_OscConfig+0x478>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c42:	f7fd fb1b 	bl	800427c <HAL_GetTick>
 8006c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c4a:	f7fd fb17 	bl	800427c <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e05c      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0f0      	beq.n	8006c4a <HAL_RCC_OscConfig+0x416>
 8006c68:	e054      	b.n	8006d14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c6a:	4b10      	ldr	r3, [pc, #64]	@ (8006cac <HAL_RCC_OscConfig+0x478>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c70:	f7fd fb04 	bl	800427c <HAL_GetTick>
 8006c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fd fb00 	bl	800427c <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e045      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8a:	4b06      	ldr	r3, [pc, #24]	@ (8006ca4 <HAL_RCC_OscConfig+0x470>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x444>
 8006c96:	e03d      	b.n	8006d14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d107      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e038      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
 8006ca4:	40023800 	.word	0x40023800
 8006ca8:	40007000 	.word	0x40007000
 8006cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006d20 <HAL_RCC_OscConfig+0x4ec>)
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d028      	beq.n	8006d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d121      	bne.n	8006d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d11a      	bne.n	8006d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d111      	bne.n	8006d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf6:	085b      	lsrs	r3, r3, #1
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d107      	bne.n	8006d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d001      	beq.n	8006d14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40023800 	.word	0x40023800

08006d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e0cc      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d38:	4b68      	ldr	r3, [pc, #416]	@ (8006edc <HAL_RCC_ClockConfig+0x1b8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d90c      	bls.n	8006d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b65      	ldr	r3, [pc, #404]	@ (8006edc <HAL_RCC_ClockConfig+0x1b8>)
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4e:	4b63      	ldr	r3, [pc, #396]	@ (8006edc <HAL_RCC_ClockConfig+0x1b8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e0b8      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d005      	beq.n	8006d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d78:	4b59      	ldr	r3, [pc, #356]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	4a58      	ldr	r2, [pc, #352]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d90:	4b53      	ldr	r3, [pc, #332]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	4a52      	ldr	r2, [pc, #328]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d9c:	4b50      	ldr	r3, [pc, #320]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	494d      	ldr	r1, [pc, #308]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	4313      	orrs	r3, r2
 8006dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d044      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d107      	bne.n	8006dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dc2:	4b47      	ldr	r3, [pc, #284]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d119      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e07f      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d107      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006de2:	4b3f      	ldr	r3, [pc, #252]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e06f      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006df2:	4b3b      	ldr	r3, [pc, #236]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d101      	bne.n	8006e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e067      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e02:	4b37      	ldr	r3, [pc, #220]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f023 0203 	bic.w	r2, r3, #3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	4934      	ldr	r1, [pc, #208]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e14:	f7fd fa32 	bl	800427c <HAL_GetTick>
 8006e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1a:	e00a      	b.n	8006e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e1c:	f7fd fa2e 	bl	800427c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e04f      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	4b2b      	ldr	r3, [pc, #172]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f003 020c 	and.w	r2, r3, #12
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d1eb      	bne.n	8006e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e44:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <HAL_RCC_ClockConfig+0x1b8>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d20c      	bcs.n	8006e6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e52:	4b22      	ldr	r3, [pc, #136]	@ (8006edc <HAL_RCC_ClockConfig+0x1b8>)
 8006e54:	683a      	ldr	r2, [r7, #0]
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e5a:	4b20      	ldr	r3, [pc, #128]	@ (8006edc <HAL_RCC_ClockConfig+0x1b8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d001      	beq.n	8006e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e032      	b.n	8006ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e78:	4b19      	ldr	r3, [pc, #100]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	4916      	ldr	r1, [pc, #88]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e86:	4313      	orrs	r3, r2
 8006e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e96:	4b12      	ldr	r3, [pc, #72]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	490e      	ldr	r1, [pc, #56]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006eaa:	f000 f821 	bl	8006ef0 <HAL_RCC_GetSysClockFreq>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8006ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	490a      	ldr	r1, [pc, #40]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8006ebc:	5ccb      	ldrb	r3, [r1, r3]
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	4a09      	ldr	r2, [pc, #36]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ec6:	4b09      	ldr	r3, [pc, #36]	@ (8006eec <HAL_RCC_ClockConfig+0x1c8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fd f992 	bl	80041f4 <HAL_InitTick>

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	40023c00 	.word	0x40023c00
 8006ee0:	40023800 	.word	0x40023800
 8006ee4:	0800c684 	.word	0x0800c684
 8006ee8:	20000018 	.word	0x20000018
 8006eec:	2000001c 	.word	0x2000001c

08006ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ef4:	b090      	sub	sp, #64	@ 0x40
 8006ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f08:	4b59      	ldr	r3, [pc, #356]	@ (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	f003 030c 	and.w	r3, r3, #12
 8006f10:	2b08      	cmp	r3, #8
 8006f12:	d00d      	beq.n	8006f30 <HAL_RCC_GetSysClockFreq+0x40>
 8006f14:	2b08      	cmp	r3, #8
 8006f16:	f200 80a1 	bhi.w	800705c <HAL_RCC_GetSysClockFreq+0x16c>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <HAL_RCC_GetSysClockFreq+0x34>
 8006f1e:	2b04      	cmp	r3, #4
 8006f20:	d003      	beq.n	8006f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006f22:	e09b      	b.n	800705c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f24:	4b53      	ldr	r3, [pc, #332]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f28:	e09b      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f2a:	4b53      	ldr	r3, [pc, #332]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f2e:	e098      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f30:	4b4f      	ldr	r3, [pc, #316]	@ (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f3a:	4b4d      	ldr	r3, [pc, #308]	@ (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d028      	beq.n	8006f98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f46:	4b4a      	ldr	r3, [pc, #296]	@ (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	099b      	lsrs	r3, r3, #6
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	623b      	str	r3, [r7, #32]
 8006f50:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4b47      	ldr	r3, [pc, #284]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f5c:	fb03 f201 	mul.w	r2, r3, r1
 8006f60:	2300      	movs	r3, #0
 8006f62:	fb00 f303 	mul.w	r3, r0, r3
 8006f66:	4413      	add	r3, r2
 8006f68:	4a43      	ldr	r2, [pc, #268]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f6a:	fba0 1202 	umull	r1, r2, r0, r2
 8006f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f70:	460a      	mov	r2, r1
 8006f72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f76:	4413      	add	r3, r2
 8006f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	61fa      	str	r2, [r7, #28]
 8006f82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006f8a:	f7f9 fe65 	bl	8000c58 <__aeabi_uldivmod>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	460b      	mov	r3, r1
 8006f92:	4613      	mov	r3, r2
 8006f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f96:	e053      	b.n	8007040 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f98:	4b35      	ldr	r3, [pc, #212]	@ (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	099b      	lsrs	r3, r3, #6
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	613b      	str	r3, [r7, #16]
 8006fa2:	617a      	str	r2, [r7, #20]
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006faa:	f04f 0b00 	mov.w	fp, #0
 8006fae:	4652      	mov	r2, sl
 8006fb0:	465b      	mov	r3, fp
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f04f 0100 	mov.w	r1, #0
 8006fba:	0159      	lsls	r1, r3, #5
 8006fbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc0:	0150      	lsls	r0, r2, #5
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	ebb2 080a 	subs.w	r8, r2, sl
 8006fca:	eb63 090b 	sbc.w	r9, r3, fp
 8006fce:	f04f 0200 	mov.w	r2, #0
 8006fd2:	f04f 0300 	mov.w	r3, #0
 8006fd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006fde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fe2:	ebb2 0408 	subs.w	r4, r2, r8
 8006fe6:	eb63 0509 	sbc.w	r5, r3, r9
 8006fea:	f04f 0200 	mov.w	r2, #0
 8006fee:	f04f 0300 	mov.w	r3, #0
 8006ff2:	00eb      	lsls	r3, r5, #3
 8006ff4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ff8:	00e2      	lsls	r2, r4, #3
 8006ffa:	4614      	mov	r4, r2
 8006ffc:	461d      	mov	r5, r3
 8006ffe:	eb14 030a 	adds.w	r3, r4, sl
 8007002:	603b      	str	r3, [r7, #0]
 8007004:	eb45 030b 	adc.w	r3, r5, fp
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007016:	4629      	mov	r1, r5
 8007018:	028b      	lsls	r3, r1, #10
 800701a:	4621      	mov	r1, r4
 800701c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007020:	4621      	mov	r1, r4
 8007022:	028a      	lsls	r2, r1, #10
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702a:	2200      	movs	r2, #0
 800702c:	60bb      	str	r3, [r7, #8]
 800702e:	60fa      	str	r2, [r7, #12]
 8007030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007034:	f7f9 fe10 	bl	8000c58 <__aeabi_uldivmod>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4613      	mov	r3, r2
 800703e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007040:	4b0b      	ldr	r3, [pc, #44]	@ (8007070 <HAL_RCC_GetSysClockFreq+0x180>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f003 0303 	and.w	r3, r3, #3
 800704a:	3301      	adds	r3, #1
 800704c:	005b      	lsls	r3, r3, #1
 800704e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007050:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007054:	fbb2 f3f3 	udiv	r3, r2, r3
 8007058:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800705a:	e002      	b.n	8007062 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <HAL_RCC_GetSysClockFreq+0x184>)
 800705e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007064:	4618      	mov	r0, r3
 8007066:	3740      	adds	r7, #64	@ 0x40
 8007068:	46bd      	mov	sp, r7
 800706a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop
 8007070:	40023800 	.word	0x40023800
 8007074:	00f42400 	.word	0x00f42400
 8007078:	017d7840 	.word	0x017d7840

0800707c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007080:	4b03      	ldr	r3, [pc, #12]	@ (8007090 <HAL_RCC_GetHCLKFreq+0x14>)
 8007082:	681b      	ldr	r3, [r3, #0]
}
 8007084:	4618      	mov	r0, r3
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000018 	.word	0x20000018

08007094 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007098:	f7ff fff0 	bl	800707c <HAL_RCC_GetHCLKFreq>
 800709c:	4602      	mov	r2, r0
 800709e:	4b05      	ldr	r3, [pc, #20]	@ (80070b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	0a9b      	lsrs	r3, r3, #10
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	4903      	ldr	r1, [pc, #12]	@ (80070b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070aa:	5ccb      	ldrb	r3, [r1, r3]
 80070ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	40023800 	.word	0x40023800
 80070b8:	0800c694 	.word	0x0800c694

080070bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070c0:	f7ff ffdc 	bl	800707c <HAL_RCC_GetHCLKFreq>
 80070c4:	4602      	mov	r2, r0
 80070c6:	4b05      	ldr	r3, [pc, #20]	@ (80070dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	0b5b      	lsrs	r3, r3, #13
 80070cc:	f003 0307 	and.w	r3, r3, #7
 80070d0:	4903      	ldr	r1, [pc, #12]	@ (80070e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070d2:	5ccb      	ldrb	r3, [r1, r3]
 80070d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d8:	4618      	mov	r0, r3
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	40023800 	.word	0x40023800
 80070e0:	0800c694 	.word	0x0800c694

080070e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d101      	bne.n	80070f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070f2:	2301      	movs	r3, #1
 80070f4:	e041      	b.n	800717a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d106      	bne.n	8007110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fc fcb4 	bl	8003a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3304      	adds	r3, #4
 8007120:	4619      	mov	r1, r3
 8007122:	4610      	mov	r0, r2
 8007124:	f000 fcaa 	bl	8007a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
	...

08007184 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b01      	cmp	r3, #1
 8007196:	d001      	beq.n	800719c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e03c      	b.n	8007216 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007224 <HAL_TIM_Base_Start+0xa0>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d018      	beq.n	80071e0 <HAL_TIM_Base_Start+0x5c>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b6:	d013      	beq.n	80071e0 <HAL_TIM_Base_Start+0x5c>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007228 <HAL_TIM_Base_Start+0xa4>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00e      	beq.n	80071e0 <HAL_TIM_Base_Start+0x5c>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a19      	ldr	r2, [pc, #100]	@ (800722c <HAL_TIM_Base_Start+0xa8>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d009      	beq.n	80071e0 <HAL_TIM_Base_Start+0x5c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a17      	ldr	r2, [pc, #92]	@ (8007230 <HAL_TIM_Base_Start+0xac>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d004      	beq.n	80071e0 <HAL_TIM_Base_Start+0x5c>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a16      	ldr	r2, [pc, #88]	@ (8007234 <HAL_TIM_Base_Start+0xb0>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d111      	bne.n	8007204 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b06      	cmp	r3, #6
 80071f0:	d010      	beq.n	8007214 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0201 	orr.w	r2, r2, #1
 8007200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007202:	e007      	b.n	8007214 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0201 	orr.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	40010000 	.word	0x40010000
 8007228:	40000400 	.word	0x40000400
 800722c:	40000800 	.word	0x40000800
 8007230:	40000c00 	.word	0x40000c00
 8007234:	40014000 	.word	0x40014000

08007238 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d101      	bne.n	800724a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e041      	b.n	80072ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d106      	bne.n	8007264 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fc fbd2 	bl	8003a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f000 fc00 	bl	8007a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2201      	movs	r2, #1
 80072c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d109      	bne.n	80072fc <HAL_TIM_PWM_Start+0x24>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ee:	b2db      	uxtb	r3, r3
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	bf14      	ite	ne
 80072f4:	2301      	movne	r3, #1
 80072f6:	2300      	moveq	r3, #0
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	e022      	b.n	8007342 <HAL_TIM_PWM_Start+0x6a>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d109      	bne.n	8007316 <HAL_TIM_PWM_Start+0x3e>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b01      	cmp	r3, #1
 800730c:	bf14      	ite	ne
 800730e:	2301      	movne	r3, #1
 8007310:	2300      	moveq	r3, #0
 8007312:	b2db      	uxtb	r3, r3
 8007314:	e015      	b.n	8007342 <HAL_TIM_PWM_Start+0x6a>
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	2b08      	cmp	r3, #8
 800731a:	d109      	bne.n	8007330 <HAL_TIM_PWM_Start+0x58>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b01      	cmp	r3, #1
 8007326:	bf14      	ite	ne
 8007328:	2301      	movne	r3, #1
 800732a:	2300      	moveq	r3, #0
 800732c:	b2db      	uxtb	r3, r3
 800732e:	e008      	b.n	8007342 <HAL_TIM_PWM_Start+0x6a>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b01      	cmp	r3, #1
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e068      	b.n	800741c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d104      	bne.n	800735a <HAL_TIM_PWM_Start+0x82>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007358:	e013      	b.n	8007382 <HAL_TIM_PWM_Start+0xaa>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	2b04      	cmp	r3, #4
 800735e:	d104      	bne.n	800736a <HAL_TIM_PWM_Start+0x92>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007368:	e00b      	b.n	8007382 <HAL_TIM_PWM_Start+0xaa>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b08      	cmp	r3, #8
 800736e:	d104      	bne.n	800737a <HAL_TIM_PWM_Start+0xa2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007378:	e003      	b.n	8007382 <HAL_TIM_PWM_Start+0xaa>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2201      	movs	r2, #1
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fe28 	bl	8007fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a23      	ldr	r2, [pc, #140]	@ (8007424 <HAL_TIM_PWM_Start+0x14c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d107      	bne.n	80073aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a1d      	ldr	r2, [pc, #116]	@ (8007424 <HAL_TIM_PWM_Start+0x14c>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d018      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x10e>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073bc:	d013      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x10e>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a19      	ldr	r2, [pc, #100]	@ (8007428 <HAL_TIM_PWM_Start+0x150>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x10e>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a17      	ldr	r2, [pc, #92]	@ (800742c <HAL_TIM_PWM_Start+0x154>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d009      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x10e>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a16      	ldr	r2, [pc, #88]	@ (8007430 <HAL_TIM_PWM_Start+0x158>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <HAL_TIM_PWM_Start+0x10e>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a14      	ldr	r2, [pc, #80]	@ (8007434 <HAL_TIM_PWM_Start+0x15c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d111      	bne.n	800740a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f003 0307 	and.w	r3, r3, #7
 80073f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2b06      	cmp	r3, #6
 80073f6:	d010      	beq.n	800741a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007408:	e007      	b.n	800741a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f042 0201 	orr.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	40010000 	.word	0x40010000
 8007428:	40000400 	.word	0x40000400
 800742c:	40000800 	.word	0x40000800
 8007430:	40000c00 	.word	0x40000c00
 8007434:	40014000 	.word	0x40014000

08007438 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b082      	sub	sp, #8
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2200      	movs	r2, #0
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fdc8 	bl	8007fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a29      	ldr	r2, [pc, #164]	@ (80074fc <HAL_TIM_PWM_Stop+0xc4>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d117      	bne.n	800748a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6a1a      	ldr	r2, [r3, #32]
 8007460:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10f      	bne.n	800748a <HAL_TIM_PWM_Stop+0x52>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6a1a      	ldr	r2, [r3, #32]
 8007470:	f240 4344 	movw	r3, #1092	@ 0x444
 8007474:	4013      	ands	r3, r2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d107      	bne.n	800748a <HAL_TIM_PWM_Stop+0x52>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007488:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6a1a      	ldr	r2, [r3, #32]
 8007490:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007494:	4013      	ands	r3, r2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10f      	bne.n	80074ba <HAL_TIM_PWM_Stop+0x82>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a1a      	ldr	r2, [r3, #32]
 80074a0:	f240 4344 	movw	r3, #1092	@ 0x444
 80074a4:	4013      	ands	r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_PWM_Stop+0x82>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_TIM_PWM_Stop+0x92>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074c8:	e013      	b.n	80074f2 <HAL_TIM_PWM_Stop+0xba>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d104      	bne.n	80074da <HAL_TIM_PWM_Stop+0xa2>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074d8:	e00b      	b.n	80074f2 <HAL_TIM_PWM_Stop+0xba>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d104      	bne.n	80074ea <HAL_TIM_PWM_Stop+0xb2>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074e8:	e003      	b.n	80074f2 <HAL_TIM_PWM_Stop+0xba>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40010000 	.word	0x40010000

08007500 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e097      	b.n	8007644 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d106      	bne.n	800752e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f7fc faeb 	bl	8003b04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2202      	movs	r2, #2
 8007532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007544:	f023 0307 	bic.w	r3, r3, #7
 8007548:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f000 fa91 	bl	8007a7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	021b      	lsls	r3, r3, #8
 8007592:	4313      	orrs	r3, r2
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80075a0:	f023 030c 	bic.w	r3, r3, #12
 80075a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	68da      	ldr	r2, [r3, #12]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	69db      	ldr	r3, [r3, #28]
 80075ba:	021b      	lsls	r3, r3, #8
 80075bc:	4313      	orrs	r3, r2
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	011a      	lsls	r2, r3, #4
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	031b      	lsls	r3, r3, #12
 80075d0:	4313      	orrs	r3, r2
 80075d2:	693a      	ldr	r2, [r7, #16]
 80075d4:	4313      	orrs	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80075de:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80075e6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685a      	ldr	r2, [r3, #4]
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	011b      	lsls	r3, r3, #4
 80075f2:	4313      	orrs	r3, r2
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800765c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007664:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800766c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007674:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d110      	bne.n	800769e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800767c:	7bfb      	ldrb	r3, [r7, #15]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d102      	bne.n	8007688 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007682:	7b7b      	ldrb	r3, [r7, #13]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d001      	beq.n	800768c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e069      	b.n	8007760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2202      	movs	r2, #2
 8007690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800769c:	e031      	b.n	8007702 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d110      	bne.n	80076c6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d102      	bne.n	80076b0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076aa:	7b3b      	ldrb	r3, [r7, #12]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e055      	b.n	8007760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076c4:	e01d      	b.n	8007702 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d108      	bne.n	80076de <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076cc:	7bbb      	ldrb	r3, [r7, #14]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d105      	bne.n	80076de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076d2:	7b7b      	ldrb	r3, [r7, #13]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d102      	bne.n	80076de <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076d8:	7b3b      	ldrb	r3, [r7, #12]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d001      	beq.n	80076e2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e03e      	b.n	8007760 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2202      	movs	r2, #2
 80076e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2202      	movs	r2, #2
 80076ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d003      	beq.n	8007710 <HAL_TIM_Encoder_Start+0xc4>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b04      	cmp	r3, #4
 800770c:	d008      	beq.n	8007720 <HAL_TIM_Encoder_Start+0xd4>
 800770e:	e00f      	b.n	8007730 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2201      	movs	r2, #1
 8007716:	2100      	movs	r1, #0
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fc61 	bl	8007fe0 <TIM_CCxChannelCmd>
      break;
 800771e:	e016      	b.n	800774e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2201      	movs	r2, #1
 8007726:	2104      	movs	r1, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f000 fc59 	bl	8007fe0 <TIM_CCxChannelCmd>
      break;
 800772e:	e00e      	b.n	800774e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2201      	movs	r2, #1
 8007736:	2100      	movs	r1, #0
 8007738:	4618      	mov	r0, r3
 800773a:	f000 fc51 	bl	8007fe0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2201      	movs	r2, #1
 8007744:	2104      	movs	r1, #4
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fc4a 	bl	8007fe0 <TIM_CCxChannelCmd>
      break;
 800774c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 0201 	orr.w	r2, r2, #1
 800775c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b086      	sub	sp, #24
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007782:	2302      	movs	r3, #2
 8007784:	e0ae      	b.n	80078e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b0c      	cmp	r3, #12
 8007792:	f200 809f 	bhi.w	80078d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007796:	a201      	add	r2, pc, #4	@ (adr r2, 800779c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779c:	080077d1 	.word	0x080077d1
 80077a0:	080078d5 	.word	0x080078d5
 80077a4:	080078d5 	.word	0x080078d5
 80077a8:	080078d5 	.word	0x080078d5
 80077ac:	08007811 	.word	0x08007811
 80077b0:	080078d5 	.word	0x080078d5
 80077b4:	080078d5 	.word	0x080078d5
 80077b8:	080078d5 	.word	0x080078d5
 80077bc:	08007853 	.word	0x08007853
 80077c0:	080078d5 	.word	0x080078d5
 80077c4:	080078d5 	.word	0x080078d5
 80077c8:	080078d5 	.word	0x080078d5
 80077cc:	08007893 	.word	0x08007893
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f9dc 	bl	8007b94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0208 	orr.w	r2, r2, #8
 80077ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	699a      	ldr	r2, [r3, #24]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f022 0204 	bic.w	r2, r2, #4
 80077fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6999      	ldr	r1, [r3, #24]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	691a      	ldr	r2, [r3, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	619a      	str	r2, [r3, #24]
      break;
 800780e:	e064      	b.n	80078da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68b9      	ldr	r1, [r7, #8]
 8007816:	4618      	mov	r0, r3
 8007818:	f000 fa22 	bl	8007c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	699a      	ldr	r2, [r3, #24]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800782a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800783a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6999      	ldr	r1, [r3, #24]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	619a      	str	r2, [r3, #24]
      break;
 8007850:	e043      	b.n	80078da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	4618      	mov	r0, r3
 800785a:	f000 fa6d 	bl	8007d38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	69da      	ldr	r2, [r3, #28]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f042 0208 	orr.w	r2, r2, #8
 800786c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0204 	bic.w	r2, r2, #4
 800787c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	69d9      	ldr	r1, [r3, #28]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	691a      	ldr	r2, [r3, #16]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	430a      	orrs	r2, r1
 800788e:	61da      	str	r2, [r3, #28]
      break;
 8007890:	e023      	b.n	80078da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68b9      	ldr	r1, [r7, #8]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 fab7 	bl	8007e0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	69d9      	ldr	r1, [r3, #28]
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	021a      	lsls	r2, r3, #8
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	61da      	str	r2, [r3, #28]
      break;
 80078d2:	e002      	b.n	80078da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]
      break;
 80078d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3718      	adds	r7, #24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078f6:	2300      	movs	r3, #0
 80078f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_TIM_ConfigClockSource+0x1c>
 8007904:	2302      	movs	r3, #2
 8007906:	e0b4      	b.n	8007a72 <HAL_TIM_ConfigClockSource+0x186>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2202      	movs	r2, #2
 8007914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689b      	ldr	r3, [r3, #8]
 800791e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800792e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007940:	d03e      	beq.n	80079c0 <HAL_TIM_ConfigClockSource+0xd4>
 8007942:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007946:	f200 8087 	bhi.w	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 800794a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800794e:	f000 8086 	beq.w	8007a5e <HAL_TIM_ConfigClockSource+0x172>
 8007952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007956:	d87f      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007958:	2b70      	cmp	r3, #112	@ 0x70
 800795a:	d01a      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0xa6>
 800795c:	2b70      	cmp	r3, #112	@ 0x70
 800795e:	d87b      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007960:	2b60      	cmp	r3, #96	@ 0x60
 8007962:	d050      	beq.n	8007a06 <HAL_TIM_ConfigClockSource+0x11a>
 8007964:	2b60      	cmp	r3, #96	@ 0x60
 8007966:	d877      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007968:	2b50      	cmp	r3, #80	@ 0x50
 800796a:	d03c      	beq.n	80079e6 <HAL_TIM_ConfigClockSource+0xfa>
 800796c:	2b50      	cmp	r3, #80	@ 0x50
 800796e:	d873      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007970:	2b40      	cmp	r3, #64	@ 0x40
 8007972:	d058      	beq.n	8007a26 <HAL_TIM_ConfigClockSource+0x13a>
 8007974:	2b40      	cmp	r3, #64	@ 0x40
 8007976:	d86f      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007978:	2b30      	cmp	r3, #48	@ 0x30
 800797a:	d064      	beq.n	8007a46 <HAL_TIM_ConfigClockSource+0x15a>
 800797c:	2b30      	cmp	r3, #48	@ 0x30
 800797e:	d86b      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007980:	2b20      	cmp	r3, #32
 8007982:	d060      	beq.n	8007a46 <HAL_TIM_ConfigClockSource+0x15a>
 8007984:	2b20      	cmp	r3, #32
 8007986:	d867      	bhi.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
 8007988:	2b00      	cmp	r3, #0
 800798a:	d05c      	beq.n	8007a46 <HAL_TIM_ConfigClockSource+0x15a>
 800798c:	2b10      	cmp	r3, #16
 800798e:	d05a      	beq.n	8007a46 <HAL_TIM_ConfigClockSource+0x15a>
 8007990:	e062      	b.n	8007a58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079a2:	f000 fafd 	bl	8007fa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	609a      	str	r2, [r3, #8]
      break;
 80079be:	e04f      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079d0:	f000 fae6 	bl	8007fa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689a      	ldr	r2, [r3, #8]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079e2:	609a      	str	r2, [r3, #8]
      break;
 80079e4:	e03c      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079f2:	461a      	mov	r2, r3
 80079f4:	f000 fa5a 	bl	8007eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2150      	movs	r1, #80	@ 0x50
 80079fe:	4618      	mov	r0, r3
 8007a00:	f000 fab3 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a04:	e02c      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a12:	461a      	mov	r2, r3
 8007a14:	f000 fa79 	bl	8007f0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2160      	movs	r1, #96	@ 0x60
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f000 faa3 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a24:	e01c      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a32:	461a      	mov	r2, r3
 8007a34:	f000 fa3a 	bl	8007eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2140      	movs	r1, #64	@ 0x40
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 fa93 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a44:	e00c      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	4610      	mov	r0, r2
 8007a52:	f000 fa8a 	bl	8007f6a <TIM_ITRx_SetConfig>
      break;
 8007a56:	e003      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a5c:	e000      	b.n	8007a60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b085      	sub	sp, #20
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a3a      	ldr	r2, [pc, #232]	@ (8007b78 <TIM_Base_SetConfig+0xfc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d00f      	beq.n	8007ab4 <TIM_Base_SetConfig+0x38>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a9a:	d00b      	beq.n	8007ab4 <TIM_Base_SetConfig+0x38>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a37      	ldr	r2, [pc, #220]	@ (8007b7c <TIM_Base_SetConfig+0x100>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d007      	beq.n	8007ab4 <TIM_Base_SetConfig+0x38>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	4a36      	ldr	r2, [pc, #216]	@ (8007b80 <TIM_Base_SetConfig+0x104>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d003      	beq.n	8007ab4 <TIM_Base_SetConfig+0x38>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	4a35      	ldr	r2, [pc, #212]	@ (8007b84 <TIM_Base_SetConfig+0x108>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d108      	bne.n	8007ac6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007aba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8007b78 <TIM_Base_SetConfig+0xfc>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d01b      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ad4:	d017      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a28      	ldr	r2, [pc, #160]	@ (8007b7c <TIM_Base_SetConfig+0x100>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d013      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	4a27      	ldr	r2, [pc, #156]	@ (8007b80 <TIM_Base_SetConfig+0x104>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d00f      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	4a26      	ldr	r2, [pc, #152]	@ (8007b84 <TIM_Base_SetConfig+0x108>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00b      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	4a25      	ldr	r2, [pc, #148]	@ (8007b88 <TIM_Base_SetConfig+0x10c>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d007      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	4a24      	ldr	r2, [pc, #144]	@ (8007b8c <TIM_Base_SetConfig+0x110>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d003      	beq.n	8007b06 <TIM_Base_SetConfig+0x8a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a23      	ldr	r2, [pc, #140]	@ (8007b90 <TIM_Base_SetConfig+0x114>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d108      	bne.n	8007b18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007b78 <TIM_Base_SetConfig+0xfc>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d103      	bne.n	8007b4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691a      	ldr	r2, [r3, #16]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d105      	bne.n	8007b6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f023 0201 	bic.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	611a      	str	r2, [r3, #16]
  }
}
 8007b6a:	bf00      	nop
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800
 8007b84:	40000c00 	.word	0x40000c00
 8007b88:	40014000 	.word	0x40014000
 8007b8c:	40014400 	.word	0x40014400
 8007b90:	40014800 	.word	0x40014800

08007b94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f023 0201 	bic.w	r2, r3, #1
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0303 	bic.w	r3, r3, #3
 8007bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f023 0302 	bic.w	r3, r3, #2
 8007bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1c      	ldr	r2, [pc, #112]	@ (8007c5c <TIM_OC1_SetConfig+0xc8>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d10c      	bne.n	8007c0a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f023 0308 	bic.w	r3, r3, #8
 8007bf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f023 0304 	bic.w	r3, r3, #4
 8007c08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a13      	ldr	r2, [pc, #76]	@ (8007c5c <TIM_OC1_SetConfig+0xc8>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d111      	bne.n	8007c36 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	685a      	ldr	r2, [r3, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	621a      	str	r2, [r3, #32]
}
 8007c50:	bf00      	nop
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	40010000 	.word	0x40010000

08007c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	f023 0210 	bic.w	r2, r3, #16
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	021b      	lsls	r3, r3, #8
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f023 0320 	bic.w	r3, r3, #32
 8007caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	011b      	lsls	r3, r3, #4
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4a1e      	ldr	r2, [pc, #120]	@ (8007d34 <TIM_OC2_SetConfig+0xd4>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d10d      	bne.n	8007cdc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	697a      	ldr	r2, [r7, #20]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <TIM_OC2_SetConfig+0xd4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d113      	bne.n	8007d0c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007cea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007cf2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40010000 	.word	0x40010000

08007d38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b087      	sub	sp, #28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a1b      	ldr	r3, [r3, #32]
 8007d4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f023 0303 	bic.w	r3, r3, #3
 8007d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	021b      	lsls	r3, r3, #8
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1d      	ldr	r2, [pc, #116]	@ (8007e08 <TIM_OC3_SetConfig+0xd0>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d10d      	bne.n	8007db2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007db0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a14      	ldr	r2, [pc, #80]	@ (8007e08 <TIM_OC3_SetConfig+0xd0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d113      	bne.n	8007de2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	011b      	lsls	r3, r3, #4
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	011b      	lsls	r3, r3, #4
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	697a      	ldr	r2, [r7, #20]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	40010000 	.word	0x40010000

08007e0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	69db      	ldr	r3, [r3, #28]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007e42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	021b      	lsls	r3, r3, #8
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007e56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	031b      	lsls	r3, r3, #12
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4313      	orrs	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a10      	ldr	r2, [pc, #64]	@ (8007ea8 <TIM_OC4_SetConfig+0x9c>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d109      	bne.n	8007e80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	019b      	lsls	r3, r3, #6
 8007e7a:	697a      	ldr	r2, [r7, #20]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000

08007eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6a1b      	ldr	r3, [r3, #32]
 8007ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	6a1b      	ldr	r3, [r3, #32]
 8007ec2:	f023 0201 	bic.w	r2, r3, #1
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	011b      	lsls	r3, r3, #4
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f023 030a 	bic.w	r3, r3, #10
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	60f8      	str	r0, [r7, #12]
 8007f12:	60b9      	str	r1, [r7, #8]
 8007f14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6a1b      	ldr	r3, [r3, #32]
 8007f1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a1b      	ldr	r3, [r3, #32]
 8007f20:	f023 0210 	bic.w	r2, r3, #16
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007f34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	031b      	lsls	r3, r3, #12
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007f46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	697a      	ldr	r2, [r7, #20]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b085      	sub	sp, #20
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	f043 0307 	orr.w	r3, r3, #7
 8007f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b087      	sub	sp, #28
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	021a      	lsls	r2, r3, #8
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	697a      	ldr	r2, [r7, #20]
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	609a      	str	r2, [r3, #8]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f003 031f 	and.w	r3, r3, #31
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	43db      	mvns	r3, r3
 8008002:	401a      	ands	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a1a      	ldr	r2, [r3, #32]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f003 031f 	and.w	r3, r3, #31
 8008012:	6879      	ldr	r1, [r7, #4]
 8008014:	fa01 f303 	lsl.w	r3, r1, r3
 8008018:	431a      	orrs	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	621a      	str	r2, [r3, #32]
}
 800801e:	bf00      	nop
 8008020:	371c      	adds	r7, #28
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800803c:	2b01      	cmp	r3, #1
 800803e:	d101      	bne.n	8008044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008040:	2302      	movs	r3, #2
 8008042:	e050      	b.n	80080e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2202      	movs	r2, #2
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	689b      	ldr	r3, [r3, #8]
 8008062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a1c      	ldr	r2, [pc, #112]	@ (80080f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d018      	beq.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008090:	d013      	beq.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a18      	ldr	r2, [pc, #96]	@ (80080f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00e      	beq.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a16      	ldr	r2, [pc, #88]	@ (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d009      	beq.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a15      	ldr	r2, [pc, #84]	@ (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d004      	beq.n	80080ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a13      	ldr	r2, [pc, #76]	@ (8008104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d10c      	bne.n	80080d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80080c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	68ba      	ldr	r2, [r7, #8]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	40010000 	.word	0x40010000
 80080f8:	40000400 	.word	0x40000400
 80080fc:	40000800 	.word	0x40000800
 8008100:	40000c00 	.word	0x40000c00
 8008104:	40014000 	.word	0x40014000

08008108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008108:	b480      	push	{r7}
 800810a:	b085      	sub	sp, #20
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008120:	2302      	movs	r3, #2
 8008122:	e03d      	b.n	80081a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	4313      	orrs	r3, r2
 8008138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	4313      	orrs	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	4313      	orrs	r3, r2
 8008170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	4313      	orrs	r3, r2
 800817e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	4313      	orrs	r3, r2
 800818c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3714      	adds	r7, #20
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e042      	b.n	8008244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d106      	bne.n	80081d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7fb fd74 	bl	8003cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2224      	movs	r2, #36	@ 0x24
 80081dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68da      	ldr	r2, [r3, #12]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80081ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 ffd9 	bl	80091a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	695a      	ldr	r2, [r3, #20]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68da      	ldr	r2, [r3, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	@ 0x28
 8008250:	af02      	add	r7, sp, #8
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b20      	cmp	r3, #32
 800826a:	d175      	bne.n	8008358 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <HAL_UART_Transmit+0x2c>
 8008272:	88fb      	ldrh	r3, [r7, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e06e      	b.n	800835a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2200      	movs	r2, #0
 8008280:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2221      	movs	r2, #33	@ 0x21
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800828a:	f7fb fff7 	bl	800427c <HAL_GetTick>
 800828e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	88fa      	ldrh	r2, [r7, #6]
 8008294:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	88fa      	ldrh	r2, [r7, #6]
 800829a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082a4:	d108      	bne.n	80082b8 <HAL_UART_Transmit+0x6c>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d104      	bne.n	80082b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80082ae:	2300      	movs	r3, #0
 80082b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	e003      	b.n	80082c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082bc:	2300      	movs	r3, #0
 80082be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80082c0:	e02e      	b.n	8008320 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2200      	movs	r2, #0
 80082ca:	2180      	movs	r1, #128	@ 0x80
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 fcb1 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d005      	beq.n	80082e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	2220      	movs	r2, #32
 80082dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e03a      	b.n	800835a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d10b      	bne.n	8008302 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082ea:	69bb      	ldr	r3, [r7, #24]
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	461a      	mov	r2, r3
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	3302      	adds	r3, #2
 80082fe:	61bb      	str	r3, [r7, #24]
 8008300:	e007      	b.n	8008312 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008302:	69fb      	ldr	r3, [r7, #28]
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	3301      	adds	r3, #1
 8008310:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008316:	b29b      	uxth	r3, r3
 8008318:	3b01      	subs	r3, #1
 800831a:	b29a      	uxth	r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008324:	b29b      	uxth	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1cb      	bne.n	80082c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	9300      	str	r3, [sp, #0]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2200      	movs	r2, #0
 8008332:	2140      	movs	r1, #64	@ 0x40
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 fc7d 	bl	8008c34 <UART_WaitOnFlagUntilTimeout>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2220      	movs	r2, #32
 8008344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e006      	b.n	800835a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2220      	movs	r2, #32
 8008350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	e000      	b.n	800835a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008358:	2302      	movs	r3, #2
  }
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	60f8      	str	r0, [r7, #12]
 800836a:	60b9      	str	r1, [r7, #8]
 800836c:	4613      	mov	r3, r2
 800836e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b20      	cmp	r3, #32
 800837a:	d112      	bne.n	80083a2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d002      	beq.n	8008388 <HAL_UART_Receive_DMA+0x26>
 8008382:	88fb      	ldrh	r3, [r7, #6]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e00b      	b.n	80083a4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2200      	movs	r2, #0
 8008390:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008392:	88fb      	ldrh	r3, [r7, #6]
 8008394:	461a      	mov	r2, r3
 8008396:	68b9      	ldr	r1, [r7, #8]
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fca5 	bl	8008ce8 <UART_Start_Receive_DMA>
 800839e:	4603      	mov	r3, r0
 80083a0:	e000      	b.n	80083a4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80083a2:	2302      	movs	r3, #2
  }
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b090      	sub	sp, #64	@ 0x40
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	695b      	ldr	r3, [r3, #20]
 80083be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c2:	2b80      	cmp	r3, #128	@ 0x80
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b21      	cmp	r3, #33	@ 0x21
 80083d8:	d128      	bne.n	800842c <HAL_UART_DMAStop+0x80>
 80083da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d025      	beq.n	800842c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	3314      	adds	r3, #20
 80083e6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	e853 3f00 	ldrex	r3, [r3]
 80083ee:	623b      	str	r3, [r7, #32]
   return(result);
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	3314      	adds	r3, #20
 80083fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008400:	633a      	str	r2, [r7, #48]	@ 0x30
 8008402:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008404:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008406:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008408:	e841 2300 	strex	r3, r2, [r1]
 800840c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008410:	2b00      	cmp	r3, #0
 8008412:	d1e5      	bne.n	80083e0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008418:	2b00      	cmp	r3, #0
 800841a:	d004      	beq.n	8008426 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008420:	4618      	mov	r0, r3
 8008422:	f7fc fd31 	bl	8004e88 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 fcf8 	bl	8008e1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008436:	2b40      	cmp	r3, #64	@ 0x40
 8008438:	bf0c      	ite	eq
 800843a:	2301      	moveq	r3, #1
 800843c:	2300      	movne	r3, #0
 800843e:	b2db      	uxtb	r3, r3
 8008440:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b22      	cmp	r3, #34	@ 0x22
 800844c:	d128      	bne.n	80084a0 <HAL_UART_DMAStop+0xf4>
 800844e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d025      	beq.n	80084a0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	3314      	adds	r3, #20
 800845a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	e853 3f00 	ldrex	r3, [r3]
 8008462:	60fb      	str	r3, [r7, #12]
   return(result);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800846a:	637b      	str	r3, [r7, #52]	@ 0x34
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3314      	adds	r3, #20
 8008472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008474:	61fa      	str	r2, [r7, #28]
 8008476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008478:	69b9      	ldr	r1, [r7, #24]
 800847a:	69fa      	ldr	r2, [r7, #28]
 800847c:	e841 2300 	strex	r3, r2, [r1]
 8008480:	617b      	str	r3, [r7, #20]
   return(result);
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d1e5      	bne.n	8008454 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008494:	4618      	mov	r0, r3
 8008496:	f7fc fcf7 	bl	8004e88 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fce6 	bl	8008e6c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3740      	adds	r7, #64	@ 0x40
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
	...

080084ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b0ba      	sub	sp, #232	@ 0xe8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80084d8:	2300      	movs	r3, #0
 80084da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80084de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084e2:	f003 030f 	and.w	r3, r3, #15
 80084e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80084ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10f      	bne.n	8008512 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <HAL_UART_IRQHandler+0x66>
 80084fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008502:	f003 0320 	and.w	r3, r3, #32
 8008506:	2b00      	cmp	r3, #0
 8008508:	d003      	beq.n	8008512 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800850a:	6878      	ldr	r0, [r7, #4]
 800850c:	f000 fd8d 	bl	800902a <UART_Receive_IT>
      return;
 8008510:	e25b      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008512:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008516:	2b00      	cmp	r3, #0
 8008518:	f000 80de 	beq.w	80086d8 <HAL_UART_IRQHandler+0x22c>
 800851c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008520:	f003 0301 	and.w	r3, r3, #1
 8008524:	2b00      	cmp	r3, #0
 8008526:	d106      	bne.n	8008536 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800852c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80d1 	beq.w	80086d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800853a:	f003 0301 	and.w	r3, r3, #1
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <HAL_UART_IRQHandler+0xae>
 8008542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008552:	f043 0201 	orr.w	r2, r3, #1
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00b      	beq.n	800857e <HAL_UART_IRQHandler+0xd2>
 8008566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800856a:	f003 0301 	and.w	r3, r3, #1
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008576:	f043 0202 	orr.w	r2, r3, #2
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800857e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008582:	f003 0302 	and.w	r3, r3, #2
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00b      	beq.n	80085a2 <HAL_UART_IRQHandler+0xf6>
 800858a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800858e:	f003 0301 	and.w	r3, r3, #1
 8008592:	2b00      	cmp	r3, #0
 8008594:	d005      	beq.n	80085a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859a:	f043 0204 	orr.w	r2, r3, #4
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80085a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085a6:	f003 0308 	and.w	r3, r3, #8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d011      	beq.n	80085d2 <HAL_UART_IRQHandler+0x126>
 80085ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80085ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085be:	f003 0301 	and.w	r3, r3, #1
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	f043 0208 	orr.w	r2, r3, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	f000 81f2 	beq.w	80089c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d008      	beq.n	80085fa <HAL_UART_IRQHandler+0x14e>
 80085e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fd18 	bl	800902a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008604:	2b40      	cmp	r3, #64	@ 0x40
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d103      	bne.n	8008626 <HAL_UART_IRQHandler+0x17a>
 800861e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008622:	2b00      	cmp	r3, #0
 8008624:	d04f      	beq.n	80086c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fc20 	bl	8008e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	695b      	ldr	r3, [r3, #20]
 8008632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008636:	2b40      	cmp	r3, #64	@ 0x40
 8008638:	d141      	bne.n	80086be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	3314      	adds	r3, #20
 8008640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008648:	e853 3f00 	ldrex	r3, [r3]
 800864c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3314      	adds	r3, #20
 8008662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800866a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800867e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1d9      	bne.n	800863a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d013      	beq.n	80086b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008692:	4a7e      	ldr	r2, [pc, #504]	@ (800888c <HAL_UART_IRQHandler+0x3e0>)
 8008694:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800869a:	4618      	mov	r0, r3
 800869c:	f7fc fc64 	bl	8004f68 <HAL_DMA_Abort_IT>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d016      	beq.n	80086d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086b4:	e00e      	b.n	80086d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f9a8 	bl	8008a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086bc:	e00a      	b.n	80086d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9a4 	bl	8008a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086c4:	e006      	b.n	80086d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f9a0 	bl	8008a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80086d2:	e175      	b.n	80089c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d4:	bf00      	nop
    return;
 80086d6:	e173      	b.n	80089c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086dc:	2b01      	cmp	r3, #1
 80086de:	f040 814f 	bne.w	8008980 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80086e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80086e6:	f003 0310 	and.w	r3, r3, #16
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8148 	beq.w	8008980 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80086f4:	f003 0310 	and.w	r3, r3, #16
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8141 	beq.w	8008980 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086fe:	2300      	movs	r3, #0
 8008700:	60bb      	str	r3, [r7, #8]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60bb      	str	r3, [r7, #8]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800871e:	2b40      	cmp	r3, #64	@ 0x40
 8008720:	f040 80b6 	bne.w	8008890 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008730:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 8145 	beq.w	80089c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800873e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008742:	429a      	cmp	r2, r3
 8008744:	f080 813e 	bcs.w	80089c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800874e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008754:	69db      	ldr	r3, [r3, #28]
 8008756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800875a:	f000 8088 	beq.w	800886e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	330c      	adds	r3, #12
 8008764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008768:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008774:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800877c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	330c      	adds	r3, #12
 8008786:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800878a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800878e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008792:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008796:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800879a:	e841 2300 	strex	r3, r2, [r1]
 800879e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80087a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1d9      	bne.n	800875e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3314      	adds	r3, #20
 80087b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80087ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80087bc:	f023 0301 	bic.w	r3, r3, #1
 80087c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3314      	adds	r3, #20
 80087ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80087ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80087d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80087d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80087e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e1      	bne.n	80087aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3314      	adds	r3, #20
 80087ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80087f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80087f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3314      	adds	r3, #20
 8008806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800880a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800880c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008810:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008818:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e3      	bne.n	80087e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	330c      	adds	r3, #12
 8008832:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800883c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800883e:	f023 0310 	bic.w	r3, r3, #16
 8008842:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	330c      	adds	r3, #12
 800884c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008850:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008852:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008856:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800885e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e3      	bne.n	800882c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008868:	4618      	mov	r0, r3
 800886a:	f7fc fb0d 	bl	8004e88 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2202      	movs	r2, #2
 8008872:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800887c:	b29b      	uxth	r3, r3
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	b29b      	uxth	r3, r3
 8008882:	4619      	mov	r1, r3
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f8cb 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800888a:	e09b      	b.n	80089c4 <HAL_UART_IRQHandler+0x518>
 800888c:	08008f33 	.word	0x08008f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008898:	b29b      	uxth	r3, r3
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 808e 	beq.w	80089c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80088ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 8089 	beq.w	80089c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	330c      	adds	r3, #12
 80088bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	e853 3f00 	ldrex	r3, [r3]
 80088c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80088da:	647a      	str	r2, [r7, #68]	@ 0x44
 80088dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e2:	e841 2300 	strex	r3, r2, [r1]
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1e3      	bne.n	80088b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3314      	adds	r3, #20
 80088f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	623b      	str	r3, [r7, #32]
   return(result);
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	f023 0301 	bic.w	r3, r3, #1
 8008904:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3314      	adds	r3, #20
 800890e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008912:	633a      	str	r2, [r7, #48]	@ 0x30
 8008914:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008916:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800891a:	e841 2300 	strex	r3, r2, [r1]
 800891e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	2b00      	cmp	r3, #0
 8008924:	d1e3      	bne.n	80088ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2220      	movs	r2, #32
 800892a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	330c      	adds	r3, #12
 800893a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	60fb      	str	r3, [r7, #12]
   return(result);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0310 	bic.w	r3, r3, #16
 800894a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	330c      	adds	r3, #12
 8008954:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008958:	61fa      	str	r2, [r7, #28]
 800895a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895c:	69b9      	ldr	r1, [r7, #24]
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	e841 2300 	strex	r3, r2, [r1]
 8008964:	617b      	str	r3, [r7, #20]
   return(result);
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1e3      	bne.n	8008934 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008972:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f851 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800897e:	e023      	b.n	80089c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008984:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008988:	2b00      	cmp	r3, #0
 800898a:	d009      	beq.n	80089a0 <HAL_UART_IRQHandler+0x4f4>
 800898c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008994:	2b00      	cmp	r3, #0
 8008996:	d003      	beq.n	80089a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 fade 	bl	8008f5a <UART_Transmit_IT>
    return;
 800899e:	e014      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80089a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <HAL_UART_IRQHandler+0x51e>
 80089ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fb1e 	bl	8008ffa <UART_EndTransmit_IT>
    return;
 80089be:	e004      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
    return;
 80089c0:	bf00      	nop
 80089c2:	e002      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
      return;
 80089c4:	bf00      	nop
 80089c6:	e000      	b.n	80089ca <HAL_UART_IRQHandler+0x51e>
      return;
 80089c8:	bf00      	nop
  }
}
 80089ca:	37e8      	adds	r7, #232	@ 0xe8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	460b      	mov	r3, r1
 8008a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a2c:	bf00      	nop
 8008a2e:	370c      	adds	r7, #12
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b09c      	sub	sp, #112	@ 0x70
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a44:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d172      	bne.n	8008b3a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a56:	2200      	movs	r2, #0
 8008a58:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	330c      	adds	r3, #12
 8008a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a64:	e853 3f00 	ldrex	r3, [r3]
 8008a68:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	330c      	adds	r3, #12
 8008a78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008a7a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008a7c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a7e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008a80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008a82:	e841 2300 	strex	r3, r2, [r1]
 8008a86:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1e5      	bne.n	8008a5a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	3314      	adds	r3, #20
 8008a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	e853 3f00 	ldrex	r3, [r3]
 8008a9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aa0:	f023 0301 	bic.w	r3, r3, #1
 8008aa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008aa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008aae:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ab6:	e841 2300 	strex	r3, r2, [r1]
 8008aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1e5      	bne.n	8008a8e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	3314      	adds	r3, #20
 8008ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	e853 3f00 	ldrex	r3, [r3]
 8008ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ad8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ada:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3314      	adds	r3, #20
 8008ae0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ae2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e5      	bne.n	8008ac2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008af6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008af8:	2220      	movs	r2, #32
 8008afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d119      	bne.n	8008b3a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	330c      	adds	r3, #12
 8008b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	e853 3f00 	ldrex	r3, [r3]
 8008b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f023 0310 	bic.w	r3, r3, #16
 8008b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	330c      	adds	r3, #12
 8008b24:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008b26:	61fa      	str	r2, [r7, #28]
 8008b28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	69b9      	ldr	r1, [r7, #24]
 8008b2c:	69fa      	ldr	r2, [r7, #28]
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	617b      	str	r3, [r7, #20]
   return(result);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e5      	bne.n	8008b06 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d106      	bne.n	8008b56 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008b50:	f7ff ff66 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b54:	e002      	b.n	8008b5c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008b56:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008b58:	f7ff ff44 	bl	80089e4 <HAL_UART_RxCpltCallback>
}
 8008b5c:	bf00      	nop
 8008b5e:	3770      	adds	r7, #112	@ 0x70
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2201      	movs	r2, #1
 8008b76:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d108      	bne.n	8008b92 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008b84:	085b      	lsrs	r3, r3, #1
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	68f8      	ldr	r0, [r7, #12]
 8008b8c:	f7ff ff48 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b90:	e002      	b.n	8008b98 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f7ff ff30 	bl	80089f8 <HAL_UART_RxHalfCpltCallback>
}
 8008b98:	bf00      	nop
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bbc:	2b80      	cmp	r3, #128	@ 0x80
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b21      	cmp	r3, #33	@ 0x21
 8008bd2:	d108      	bne.n	8008be6 <UART_DMAError+0x46>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d005      	beq.n	8008be6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008be0:	68b8      	ldr	r0, [r7, #8]
 8008be2:	f000 f91b 	bl	8008e1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf0:	2b40      	cmp	r3, #64	@ 0x40
 8008bf2:	bf0c      	ite	eq
 8008bf4:	2301      	moveq	r3, #1
 8008bf6:	2300      	movne	r3, #0
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b22      	cmp	r3, #34	@ 0x22
 8008c06:	d108      	bne.n	8008c1a <UART_DMAError+0x7a>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d005      	beq.n	8008c1a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008c14:	68b8      	ldr	r0, [r7, #8]
 8008c16:	f000 f929 	bl	8008e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1e:	f043 0210 	orr.w	r2, r3, #16
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c26:	68b8      	ldr	r0, [r7, #8]
 8008c28:	f7ff fef0 	bl	8008a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c2c:	bf00      	nop
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	603b      	str	r3, [r7, #0]
 8008c40:	4613      	mov	r3, r2
 8008c42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c44:	e03b      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c4c:	d037      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4e:	f7fb fb15 	bl	800427c <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	6a3a      	ldr	r2, [r7, #32]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d302      	bcc.n	8008c64 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d101      	bne.n	8008c68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e03a      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d023      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	2b80      	cmp	r3, #128	@ 0x80
 8008c7a:	d020      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x8a>
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2b40      	cmp	r3, #64	@ 0x40
 8008c80:	d01d      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f003 0308 	and.w	r3, r3, #8
 8008c8c:	2b08      	cmp	r3, #8
 8008c8e:	d116      	bne.n	8008cbe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	617b      	str	r3, [r7, #20]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	f000 f8e0 	bl	8008e6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2208      	movs	r2, #8
 8008cb0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e00f      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d0b4      	beq.n	8008c46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
	...

08008ce8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b098      	sub	sp, #96	@ 0x60
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	88fa      	ldrh	r2, [r7, #6]
 8008d00:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2222      	movs	r2, #34	@ 0x22
 8008d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d14:	4a3e      	ldr	r2, [pc, #248]	@ (8008e10 <UART_Start_Receive_DMA+0x128>)
 8008d16:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e14 <UART_Start_Receive_DMA+0x12c>)
 8008d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d24:	4a3c      	ldr	r2, [pc, #240]	@ (8008e18 <UART_Start_Receive_DMA+0x130>)
 8008d26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008d30:	f107 0308 	add.w	r3, r7, #8
 8008d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3304      	adds	r3, #4
 8008d40:	4619      	mov	r1, r3
 8008d42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	f7fc f846 	bl	8004dd8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	613b      	str	r3, [r7, #16]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	613b      	str	r3, [r7, #16]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	613b      	str	r3, [r7, #16]
 8008d60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d019      	beq.n	8008d9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	330c      	adds	r3, #12
 8008d70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d74:	e853 3f00 	ldrex	r3, [r3]
 8008d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	330c      	adds	r3, #12
 8008d88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d8e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008d92:	e841 2300 	strex	r3, r2, [r1]
 8008d96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e5      	bne.n	8008d6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3314      	adds	r3, #20
 8008da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db0:	f043 0301 	orr.w	r3, r3, #1
 8008db4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dbe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008dc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008dc6:	e841 2300 	strex	r3, r2, [r1]
 8008dca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1e5      	bne.n	8008d9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3314      	adds	r3, #20
 8008dd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	e853 3f00 	ldrex	r3, [r3]
 8008de0:	617b      	str	r3, [r7, #20]
   return(result);
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3314      	adds	r3, #20
 8008df0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008df2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df6:	6a39      	ldr	r1, [r7, #32]
 8008df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008dfa:	e841 2300 	strex	r3, r2, [r1]
 8008dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d1e5      	bne.n	8008dd2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3760      	adds	r7, #96	@ 0x60
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	08008a39 	.word	0x08008a39
 8008e14:	08008b65 	.word	0x08008b65
 8008e18:	08008ba1 	.word	0x08008ba1

08008e1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b089      	sub	sp, #36	@ 0x24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e3a:	61fb      	str	r3, [r7, #28]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	69fa      	ldr	r2, [r7, #28]
 8008e44:	61ba      	str	r2, [r7, #24]
 8008e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6979      	ldr	r1, [r7, #20]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	613b      	str	r3, [r7, #16]
   return(result);
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2220      	movs	r2, #32
 8008e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008e60:	bf00      	nop
 8008e62:	3724      	adds	r7, #36	@ 0x24
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b095      	sub	sp, #84	@ 0x54
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008e94:	643a      	str	r2, [r7, #64]	@ 0x40
 8008e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008e9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e5      	bne.n	8008e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ec8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008eca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ece:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e5      	bne.n	8008ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d119      	bne.n	8008f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f023 0310 	bic.w	r3, r3, #16
 8008efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f04:	61ba      	str	r2, [r7, #24]
 8008f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6979      	ldr	r1, [r7, #20]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	613b      	str	r3, [r7, #16]
   return(result);
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e5      	bne.n	8008ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008f26:	bf00      	nop
 8008f28:	3754      	adds	r7, #84	@ 0x54
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7ff fd5d 	bl	8008a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b21      	cmp	r3, #33	@ 0x21
 8008f6c:	d13e      	bne.n	8008fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f76:	d114      	bne.n	8008fa2 <UART_Transmit_IT+0x48>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d110      	bne.n	8008fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	621a      	str	r2, [r3, #32]
 8008fa0:	e008      	b.n	8008fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	1c59      	adds	r1, r3, #1
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6211      	str	r1, [r2, #32]
 8008fac:	781a      	ldrb	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10f      	bne.n	8008fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fcd8 	bl	80089d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08c      	sub	sp, #48	@ 0x30
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b22      	cmp	r3, #34	@ 0x22
 800903c:	f040 80ae 	bne.w	800919c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009048:	d117      	bne.n	800907a <UART_Receive_IT+0x50>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d113      	bne.n	800907a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009052:	2300      	movs	r3, #0
 8009054:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	b29b      	uxth	r3, r3
 8009064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009068:	b29a      	uxth	r2, r3
 800906a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009072:	1c9a      	adds	r2, r3, #2
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	629a      	str	r2, [r3, #40]	@ 0x28
 8009078:	e026      	b.n	80090c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009080:	2300      	movs	r3, #0
 8009082:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800908c:	d007      	beq.n	800909e <UART_Receive_IT+0x74>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <UART_Receive_IT+0x82>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	e008      	b.n	80090be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4619      	mov	r1, r3
 80090d6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d15d      	bne.n	8009198 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0220 	bic.w	r2, r2, #32
 80090ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80090fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0201 	bic.w	r2, r2, #1
 800910a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	2b01      	cmp	r3, #1
 8009120:	d135      	bne.n	800918e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	330c      	adds	r3, #12
 800912e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	e853 3f00 	ldrex	r3, [r3]
 8009136:	613b      	str	r3, [r7, #16]
   return(result);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f023 0310 	bic.w	r3, r3, #16
 800913e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	330c      	adds	r3, #12
 8009146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009148:	623a      	str	r2, [r7, #32]
 800914a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914c:	69f9      	ldr	r1, [r7, #28]
 800914e:	6a3a      	ldr	r2, [r7, #32]
 8009150:	e841 2300 	strex	r3, r2, [r1]
 8009154:	61bb      	str	r3, [r7, #24]
   return(result);
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d1e5      	bne.n	8009128 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b10      	cmp	r3, #16
 8009168:	d10a      	bne.n	8009180 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800916a:	2300      	movs	r3, #0
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fc4a 	bl	8008a20 <HAL_UARTEx_RxEventCallback>
 800918c:	e002      	b.n	8009194 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f7ff fc28 	bl	80089e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	e002      	b.n	800919e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009198:	2300      	movs	r3, #0
 800919a:	e000      	b.n	800919e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800919c:	2302      	movs	r3, #2
  }
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3730      	adds	r7, #48	@ 0x30
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
	...

080091a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091ac:	b0c0      	sub	sp, #256	@ 0x100
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	691b      	ldr	r3, [r3, #16]
 80091bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80091c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091c4:	68d9      	ldr	r1, [r3, #12]
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	ea40 0301 	orr.w	r3, r0, r1
 80091d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d6:	689a      	ldr	r2, [r3, #8]
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	431a      	orrs	r2, r3
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	431a      	orrs	r2, r3
 80091e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009200:	f021 010c 	bic.w	r1, r1, #12
 8009204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800920e:	430b      	orrs	r3, r1
 8009210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695b      	ldr	r3, [r3, #20]
 800921a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800921e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009222:	6999      	ldr	r1, [r3, #24]
 8009224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	ea40 0301 	orr.w	r3, r0, r1
 800922e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	4b8f      	ldr	r3, [pc, #572]	@ (8009474 <UART_SetConfig+0x2cc>)
 8009238:	429a      	cmp	r2, r3
 800923a:	d005      	beq.n	8009248 <UART_SetConfig+0xa0>
 800923c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	4b8d      	ldr	r3, [pc, #564]	@ (8009478 <UART_SetConfig+0x2d0>)
 8009244:	429a      	cmp	r2, r3
 8009246:	d104      	bne.n	8009252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009248:	f7fd ff38 	bl	80070bc <HAL_RCC_GetPCLK2Freq>
 800924c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009250:	e003      	b.n	800925a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009252:	f7fd ff1f 	bl	8007094 <HAL_RCC_GetPCLK1Freq>
 8009256:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800925a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800925e:	69db      	ldr	r3, [r3, #28]
 8009260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009264:	f040 810c 	bne.w	8009480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800926c:	2200      	movs	r2, #0
 800926e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009272:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800927a:	4622      	mov	r2, r4
 800927c:	462b      	mov	r3, r5
 800927e:	1891      	adds	r1, r2, r2
 8009280:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009282:	415b      	adcs	r3, r3
 8009284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800928a:	4621      	mov	r1, r4
 800928c:	eb12 0801 	adds.w	r8, r2, r1
 8009290:	4629      	mov	r1, r5
 8009292:	eb43 0901 	adc.w	r9, r3, r1
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092aa:	4690      	mov	r8, r2
 80092ac:	4699      	mov	r9, r3
 80092ae:	4623      	mov	r3, r4
 80092b0:	eb18 0303 	adds.w	r3, r8, r3
 80092b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80092b8:	462b      	mov	r3, r5
 80092ba:	eb49 0303 	adc.w	r3, r9, r3
 80092be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80092c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80092ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80092d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80092d6:	460b      	mov	r3, r1
 80092d8:	18db      	adds	r3, r3, r3
 80092da:	653b      	str	r3, [r7, #80]	@ 0x50
 80092dc:	4613      	mov	r3, r2
 80092de:	eb42 0303 	adc.w	r3, r2, r3
 80092e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80092e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80092e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80092ec:	f7f7 fcb4 	bl	8000c58 <__aeabi_uldivmod>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4b61      	ldr	r3, [pc, #388]	@ (800947c <UART_SetConfig+0x2d4>)
 80092f6:	fba3 2302 	umull	r2, r3, r3, r2
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	011c      	lsls	r4, r3, #4
 80092fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009302:	2200      	movs	r2, #0
 8009304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009308:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800930c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009310:	4642      	mov	r2, r8
 8009312:	464b      	mov	r3, r9
 8009314:	1891      	adds	r1, r2, r2
 8009316:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009318:	415b      	adcs	r3, r3
 800931a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800931c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009320:	4641      	mov	r1, r8
 8009322:	eb12 0a01 	adds.w	sl, r2, r1
 8009326:	4649      	mov	r1, r9
 8009328:	eb43 0b01 	adc.w	fp, r3, r1
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	f04f 0300 	mov.w	r3, #0
 8009334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800933c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009340:	4692      	mov	sl, r2
 8009342:	469b      	mov	fp, r3
 8009344:	4643      	mov	r3, r8
 8009346:	eb1a 0303 	adds.w	r3, sl, r3
 800934a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800934e:	464b      	mov	r3, r9
 8009350:	eb4b 0303 	adc.w	r3, fp, r3
 8009354:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009364:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800936c:	460b      	mov	r3, r1
 800936e:	18db      	adds	r3, r3, r3
 8009370:	643b      	str	r3, [r7, #64]	@ 0x40
 8009372:	4613      	mov	r3, r2
 8009374:	eb42 0303 	adc.w	r3, r2, r3
 8009378:	647b      	str	r3, [r7, #68]	@ 0x44
 800937a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800937e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009382:	f7f7 fc69 	bl	8000c58 <__aeabi_uldivmod>
 8009386:	4602      	mov	r2, r0
 8009388:	460b      	mov	r3, r1
 800938a:	4611      	mov	r1, r2
 800938c:	4b3b      	ldr	r3, [pc, #236]	@ (800947c <UART_SetConfig+0x2d4>)
 800938e:	fba3 2301 	umull	r2, r3, r3, r1
 8009392:	095b      	lsrs	r3, r3, #5
 8009394:	2264      	movs	r2, #100	@ 0x64
 8009396:	fb02 f303 	mul.w	r3, r2, r3
 800939a:	1acb      	subs	r3, r1, r3
 800939c:	00db      	lsls	r3, r3, #3
 800939e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80093a2:	4b36      	ldr	r3, [pc, #216]	@ (800947c <UART_SetConfig+0x2d4>)
 80093a4:	fba3 2302 	umull	r2, r3, r3, r2
 80093a8:	095b      	lsrs	r3, r3, #5
 80093aa:	005b      	lsls	r3, r3, #1
 80093ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80093b0:	441c      	add	r4, r3
 80093b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80093b6:	2200      	movs	r2, #0
 80093b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80093bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80093c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80093c4:	4642      	mov	r2, r8
 80093c6:	464b      	mov	r3, r9
 80093c8:	1891      	adds	r1, r2, r2
 80093ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80093cc:	415b      	adcs	r3, r3
 80093ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80093d4:	4641      	mov	r1, r8
 80093d6:	1851      	adds	r1, r2, r1
 80093d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80093da:	4649      	mov	r1, r9
 80093dc:	414b      	adcs	r3, r1
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e0:	f04f 0200 	mov.w	r2, #0
 80093e4:	f04f 0300 	mov.w	r3, #0
 80093e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80093ec:	4659      	mov	r1, fp
 80093ee:	00cb      	lsls	r3, r1, #3
 80093f0:	4651      	mov	r1, sl
 80093f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093f6:	4651      	mov	r1, sl
 80093f8:	00ca      	lsls	r2, r1, #3
 80093fa:	4610      	mov	r0, r2
 80093fc:	4619      	mov	r1, r3
 80093fe:	4603      	mov	r3, r0
 8009400:	4642      	mov	r2, r8
 8009402:	189b      	adds	r3, r3, r2
 8009404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009408:	464b      	mov	r3, r9
 800940a:	460a      	mov	r2, r1
 800940c:	eb42 0303 	adc.w	r3, r2, r3
 8009410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009420:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009428:	460b      	mov	r3, r1
 800942a:	18db      	adds	r3, r3, r3
 800942c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800942e:	4613      	mov	r3, r2
 8009430:	eb42 0303 	adc.w	r3, r2, r3
 8009434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800943a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800943e:	f7f7 fc0b 	bl	8000c58 <__aeabi_uldivmod>
 8009442:	4602      	mov	r2, r0
 8009444:	460b      	mov	r3, r1
 8009446:	4b0d      	ldr	r3, [pc, #52]	@ (800947c <UART_SetConfig+0x2d4>)
 8009448:	fba3 1302 	umull	r1, r3, r3, r2
 800944c:	095b      	lsrs	r3, r3, #5
 800944e:	2164      	movs	r1, #100	@ 0x64
 8009450:	fb01 f303 	mul.w	r3, r1, r3
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	3332      	adds	r3, #50	@ 0x32
 800945a:	4a08      	ldr	r2, [pc, #32]	@ (800947c <UART_SetConfig+0x2d4>)
 800945c:	fba2 2303 	umull	r2, r3, r2, r3
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	f003 0207 	and.w	r2, r3, #7
 8009466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4422      	add	r2, r4
 800946e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009470:	e106      	b.n	8009680 <UART_SetConfig+0x4d8>
 8009472:	bf00      	nop
 8009474:	40011000 	.word	0x40011000
 8009478:	40011400 	.word	0x40011400
 800947c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009484:	2200      	movs	r2, #0
 8009486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800948a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800948e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009492:	4642      	mov	r2, r8
 8009494:	464b      	mov	r3, r9
 8009496:	1891      	adds	r1, r2, r2
 8009498:	6239      	str	r1, [r7, #32]
 800949a:	415b      	adcs	r3, r3
 800949c:	627b      	str	r3, [r7, #36]	@ 0x24
 800949e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094a2:	4641      	mov	r1, r8
 80094a4:	1854      	adds	r4, r2, r1
 80094a6:	4649      	mov	r1, r9
 80094a8:	eb43 0501 	adc.w	r5, r3, r1
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	00eb      	lsls	r3, r5, #3
 80094b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094ba:	00e2      	lsls	r2, r4, #3
 80094bc:	4614      	mov	r4, r2
 80094be:	461d      	mov	r5, r3
 80094c0:	4643      	mov	r3, r8
 80094c2:	18e3      	adds	r3, r4, r3
 80094c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094c8:	464b      	mov	r3, r9
 80094ca:	eb45 0303 	adc.w	r3, r5, r3
 80094ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80094de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80094e2:	f04f 0200 	mov.w	r2, #0
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80094ee:	4629      	mov	r1, r5
 80094f0:	008b      	lsls	r3, r1, #2
 80094f2:	4621      	mov	r1, r4
 80094f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094f8:	4621      	mov	r1, r4
 80094fa:	008a      	lsls	r2, r1, #2
 80094fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009500:	f7f7 fbaa 	bl	8000c58 <__aeabi_uldivmod>
 8009504:	4602      	mov	r2, r0
 8009506:	460b      	mov	r3, r1
 8009508:	4b60      	ldr	r3, [pc, #384]	@ (800968c <UART_SetConfig+0x4e4>)
 800950a:	fba3 2302 	umull	r2, r3, r3, r2
 800950e:	095b      	lsrs	r3, r3, #5
 8009510:	011c      	lsls	r4, r3, #4
 8009512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009516:	2200      	movs	r2, #0
 8009518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800951c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009524:	4642      	mov	r2, r8
 8009526:	464b      	mov	r3, r9
 8009528:	1891      	adds	r1, r2, r2
 800952a:	61b9      	str	r1, [r7, #24]
 800952c:	415b      	adcs	r3, r3
 800952e:	61fb      	str	r3, [r7, #28]
 8009530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009534:	4641      	mov	r1, r8
 8009536:	1851      	adds	r1, r2, r1
 8009538:	6139      	str	r1, [r7, #16]
 800953a:	4649      	mov	r1, r9
 800953c:	414b      	adcs	r3, r1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	f04f 0200 	mov.w	r2, #0
 8009544:	f04f 0300 	mov.w	r3, #0
 8009548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800954c:	4659      	mov	r1, fp
 800954e:	00cb      	lsls	r3, r1, #3
 8009550:	4651      	mov	r1, sl
 8009552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009556:	4651      	mov	r1, sl
 8009558:	00ca      	lsls	r2, r1, #3
 800955a:	4610      	mov	r0, r2
 800955c:	4619      	mov	r1, r3
 800955e:	4603      	mov	r3, r0
 8009560:	4642      	mov	r2, r8
 8009562:	189b      	adds	r3, r3, r2
 8009564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009568:	464b      	mov	r3, r9
 800956a:	460a      	mov	r2, r1
 800956c:	eb42 0303 	adc.w	r3, r2, r3
 8009570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800957e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009580:	f04f 0200 	mov.w	r2, #0
 8009584:	f04f 0300 	mov.w	r3, #0
 8009588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800958c:	4649      	mov	r1, r9
 800958e:	008b      	lsls	r3, r1, #2
 8009590:	4641      	mov	r1, r8
 8009592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009596:	4641      	mov	r1, r8
 8009598:	008a      	lsls	r2, r1, #2
 800959a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800959e:	f7f7 fb5b 	bl	8000c58 <__aeabi_uldivmod>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	4b38      	ldr	r3, [pc, #224]	@ (800968c <UART_SetConfig+0x4e4>)
 80095aa:	fba3 2301 	umull	r2, r3, r3, r1
 80095ae:	095b      	lsrs	r3, r3, #5
 80095b0:	2264      	movs	r2, #100	@ 0x64
 80095b2:	fb02 f303 	mul.w	r3, r2, r3
 80095b6:	1acb      	subs	r3, r1, r3
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	3332      	adds	r3, #50	@ 0x32
 80095bc:	4a33      	ldr	r2, [pc, #204]	@ (800968c <UART_SetConfig+0x4e4>)
 80095be:	fba2 2303 	umull	r2, r3, r2, r3
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80095c8:	441c      	add	r4, r3
 80095ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095ce:	2200      	movs	r2, #0
 80095d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80095d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80095d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80095d8:	4642      	mov	r2, r8
 80095da:	464b      	mov	r3, r9
 80095dc:	1891      	adds	r1, r2, r2
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	415b      	adcs	r3, r3
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095e8:	4641      	mov	r1, r8
 80095ea:	1851      	adds	r1, r2, r1
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	4649      	mov	r1, r9
 80095f0:	414b      	adcs	r3, r1
 80095f2:	607b      	str	r3, [r7, #4]
 80095f4:	f04f 0200 	mov.w	r2, #0
 80095f8:	f04f 0300 	mov.w	r3, #0
 80095fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009600:	4659      	mov	r1, fp
 8009602:	00cb      	lsls	r3, r1, #3
 8009604:	4651      	mov	r1, sl
 8009606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800960a:	4651      	mov	r1, sl
 800960c:	00ca      	lsls	r2, r1, #3
 800960e:	4610      	mov	r0, r2
 8009610:	4619      	mov	r1, r3
 8009612:	4603      	mov	r3, r0
 8009614:	4642      	mov	r2, r8
 8009616:	189b      	adds	r3, r3, r2
 8009618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800961a:	464b      	mov	r3, r9
 800961c:	460a      	mov	r2, r1
 800961e:	eb42 0303 	adc.w	r3, r2, r3
 8009622:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	663b      	str	r3, [r7, #96]	@ 0x60
 800962e:	667a      	str	r2, [r7, #100]	@ 0x64
 8009630:	f04f 0200 	mov.w	r2, #0
 8009634:	f04f 0300 	mov.w	r3, #0
 8009638:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800963c:	4649      	mov	r1, r9
 800963e:	008b      	lsls	r3, r1, #2
 8009640:	4641      	mov	r1, r8
 8009642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009646:	4641      	mov	r1, r8
 8009648:	008a      	lsls	r2, r1, #2
 800964a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800964e:	f7f7 fb03 	bl	8000c58 <__aeabi_uldivmod>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	4b0d      	ldr	r3, [pc, #52]	@ (800968c <UART_SetConfig+0x4e4>)
 8009658:	fba3 1302 	umull	r1, r3, r3, r2
 800965c:	095b      	lsrs	r3, r3, #5
 800965e:	2164      	movs	r1, #100	@ 0x64
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	011b      	lsls	r3, r3, #4
 8009668:	3332      	adds	r3, #50	@ 0x32
 800966a:	4a08      	ldr	r2, [pc, #32]	@ (800968c <UART_SetConfig+0x4e4>)
 800966c:	fba2 2303 	umull	r2, r3, r2, r3
 8009670:	095b      	lsrs	r3, r3, #5
 8009672:	f003 020f 	and.w	r2, r3, #15
 8009676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4422      	add	r2, r4
 800967e:	609a      	str	r2, [r3, #8]
}
 8009680:	bf00      	nop
 8009682:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009686:	46bd      	mov	sp, r7
 8009688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800968c:	51eb851f 	.word	0x51eb851f

08009690 <__cvt>:
 8009690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009694:	ec57 6b10 	vmov	r6, r7, d0
 8009698:	2f00      	cmp	r7, #0
 800969a:	460c      	mov	r4, r1
 800969c:	4619      	mov	r1, r3
 800969e:	463b      	mov	r3, r7
 80096a0:	bfbb      	ittet	lt
 80096a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80096a6:	461f      	movlt	r7, r3
 80096a8:	2300      	movge	r3, #0
 80096aa:	232d      	movlt	r3, #45	@ 0x2d
 80096ac:	700b      	strb	r3, [r1, #0]
 80096ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80096b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80096b4:	4691      	mov	r9, r2
 80096b6:	f023 0820 	bic.w	r8, r3, #32
 80096ba:	bfbc      	itt	lt
 80096bc:	4632      	movlt	r2, r6
 80096be:	4616      	movlt	r6, r2
 80096c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80096c4:	d005      	beq.n	80096d2 <__cvt+0x42>
 80096c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80096ca:	d100      	bne.n	80096ce <__cvt+0x3e>
 80096cc:	3401      	adds	r4, #1
 80096ce:	2102      	movs	r1, #2
 80096d0:	e000      	b.n	80096d4 <__cvt+0x44>
 80096d2:	2103      	movs	r1, #3
 80096d4:	ab03      	add	r3, sp, #12
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	ab02      	add	r3, sp, #8
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	ec47 6b10 	vmov	d0, r6, r7
 80096e0:	4653      	mov	r3, sl
 80096e2:	4622      	mov	r2, r4
 80096e4:	f000 ff3c 	bl	800a560 <_dtoa_r>
 80096e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80096ec:	4605      	mov	r5, r0
 80096ee:	d119      	bne.n	8009724 <__cvt+0x94>
 80096f0:	f019 0f01 	tst.w	r9, #1
 80096f4:	d00e      	beq.n	8009714 <__cvt+0x84>
 80096f6:	eb00 0904 	add.w	r9, r0, r4
 80096fa:	2200      	movs	r2, #0
 80096fc:	2300      	movs	r3, #0
 80096fe:	4630      	mov	r0, r6
 8009700:	4639      	mov	r1, r7
 8009702:	f7f7 f9e9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009706:	b108      	cbz	r0, 800970c <__cvt+0x7c>
 8009708:	f8cd 900c 	str.w	r9, [sp, #12]
 800970c:	2230      	movs	r2, #48	@ 0x30
 800970e:	9b03      	ldr	r3, [sp, #12]
 8009710:	454b      	cmp	r3, r9
 8009712:	d31e      	bcc.n	8009752 <__cvt+0xc2>
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009718:	1b5b      	subs	r3, r3, r5
 800971a:	4628      	mov	r0, r5
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	b004      	add	sp, #16
 8009720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009724:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009728:	eb00 0904 	add.w	r9, r0, r4
 800972c:	d1e5      	bne.n	80096fa <__cvt+0x6a>
 800972e:	7803      	ldrb	r3, [r0, #0]
 8009730:	2b30      	cmp	r3, #48	@ 0x30
 8009732:	d10a      	bne.n	800974a <__cvt+0xba>
 8009734:	2200      	movs	r2, #0
 8009736:	2300      	movs	r3, #0
 8009738:	4630      	mov	r0, r6
 800973a:	4639      	mov	r1, r7
 800973c:	f7f7 f9cc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009740:	b918      	cbnz	r0, 800974a <__cvt+0xba>
 8009742:	f1c4 0401 	rsb	r4, r4, #1
 8009746:	f8ca 4000 	str.w	r4, [sl]
 800974a:	f8da 3000 	ldr.w	r3, [sl]
 800974e:	4499      	add	r9, r3
 8009750:	e7d3      	b.n	80096fa <__cvt+0x6a>
 8009752:	1c59      	adds	r1, r3, #1
 8009754:	9103      	str	r1, [sp, #12]
 8009756:	701a      	strb	r2, [r3, #0]
 8009758:	e7d9      	b.n	800970e <__cvt+0x7e>

0800975a <__exponent>:
 800975a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800975c:	2900      	cmp	r1, #0
 800975e:	bfba      	itte	lt
 8009760:	4249      	neglt	r1, r1
 8009762:	232d      	movlt	r3, #45	@ 0x2d
 8009764:	232b      	movge	r3, #43	@ 0x2b
 8009766:	2909      	cmp	r1, #9
 8009768:	7002      	strb	r2, [r0, #0]
 800976a:	7043      	strb	r3, [r0, #1]
 800976c:	dd29      	ble.n	80097c2 <__exponent+0x68>
 800976e:	f10d 0307 	add.w	r3, sp, #7
 8009772:	461d      	mov	r5, r3
 8009774:	270a      	movs	r7, #10
 8009776:	461a      	mov	r2, r3
 8009778:	fbb1 f6f7 	udiv	r6, r1, r7
 800977c:	fb07 1416 	mls	r4, r7, r6, r1
 8009780:	3430      	adds	r4, #48	@ 0x30
 8009782:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009786:	460c      	mov	r4, r1
 8009788:	2c63      	cmp	r4, #99	@ 0x63
 800978a:	f103 33ff 	add.w	r3, r3, #4294967295
 800978e:	4631      	mov	r1, r6
 8009790:	dcf1      	bgt.n	8009776 <__exponent+0x1c>
 8009792:	3130      	adds	r1, #48	@ 0x30
 8009794:	1e94      	subs	r4, r2, #2
 8009796:	f803 1c01 	strb.w	r1, [r3, #-1]
 800979a:	1c41      	adds	r1, r0, #1
 800979c:	4623      	mov	r3, r4
 800979e:	42ab      	cmp	r3, r5
 80097a0:	d30a      	bcc.n	80097b8 <__exponent+0x5e>
 80097a2:	f10d 0309 	add.w	r3, sp, #9
 80097a6:	1a9b      	subs	r3, r3, r2
 80097a8:	42ac      	cmp	r4, r5
 80097aa:	bf88      	it	hi
 80097ac:	2300      	movhi	r3, #0
 80097ae:	3302      	adds	r3, #2
 80097b0:	4403      	add	r3, r0
 80097b2:	1a18      	subs	r0, r3, r0
 80097b4:	b003      	add	sp, #12
 80097b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 80097bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 80097c0:	e7ed      	b.n	800979e <__exponent+0x44>
 80097c2:	2330      	movs	r3, #48	@ 0x30
 80097c4:	3130      	adds	r1, #48	@ 0x30
 80097c6:	7083      	strb	r3, [r0, #2]
 80097c8:	70c1      	strb	r1, [r0, #3]
 80097ca:	1d03      	adds	r3, r0, #4
 80097cc:	e7f1      	b.n	80097b2 <__exponent+0x58>
	...

080097d0 <_printf_float>:
 80097d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d4:	b08d      	sub	sp, #52	@ 0x34
 80097d6:	460c      	mov	r4, r1
 80097d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80097dc:	4616      	mov	r6, r2
 80097de:	461f      	mov	r7, r3
 80097e0:	4605      	mov	r5, r0
 80097e2:	f000 fdbd 	bl	800a360 <_localeconv_r>
 80097e6:	6803      	ldr	r3, [r0, #0]
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7f6 fd48 	bl	8000280 <strlen>
 80097f0:	2300      	movs	r3, #0
 80097f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f4:	f8d8 3000 	ldr.w	r3, [r8]
 80097f8:	9005      	str	r0, [sp, #20]
 80097fa:	3307      	adds	r3, #7
 80097fc:	f023 0307 	bic.w	r3, r3, #7
 8009800:	f103 0208 	add.w	r2, r3, #8
 8009804:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009808:	f8d4 b000 	ldr.w	fp, [r4]
 800980c:	f8c8 2000 	str.w	r2, [r8]
 8009810:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009814:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009818:	9307      	str	r3, [sp, #28]
 800981a:	f8cd 8018 	str.w	r8, [sp, #24]
 800981e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009822:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009826:	4b9c      	ldr	r3, [pc, #624]	@ (8009a98 <_printf_float+0x2c8>)
 8009828:	f04f 32ff 	mov.w	r2, #4294967295
 800982c:	f7f7 f986 	bl	8000b3c <__aeabi_dcmpun>
 8009830:	bb70      	cbnz	r0, 8009890 <_printf_float+0xc0>
 8009832:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009836:	4b98      	ldr	r3, [pc, #608]	@ (8009a98 <_printf_float+0x2c8>)
 8009838:	f04f 32ff 	mov.w	r2, #4294967295
 800983c:	f7f7 f960 	bl	8000b00 <__aeabi_dcmple>
 8009840:	bb30      	cbnz	r0, 8009890 <_printf_float+0xc0>
 8009842:	2200      	movs	r2, #0
 8009844:	2300      	movs	r3, #0
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f7 f94f 	bl	8000aec <__aeabi_dcmplt>
 800984e:	b110      	cbz	r0, 8009856 <_printf_float+0x86>
 8009850:	232d      	movs	r3, #45	@ 0x2d
 8009852:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009856:	4a91      	ldr	r2, [pc, #580]	@ (8009a9c <_printf_float+0x2cc>)
 8009858:	4b91      	ldr	r3, [pc, #580]	@ (8009aa0 <_printf_float+0x2d0>)
 800985a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800985e:	bf8c      	ite	hi
 8009860:	4690      	movhi	r8, r2
 8009862:	4698      	movls	r8, r3
 8009864:	2303      	movs	r3, #3
 8009866:	6123      	str	r3, [r4, #16]
 8009868:	f02b 0304 	bic.w	r3, fp, #4
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	9700      	str	r7, [sp, #0]
 8009874:	4633      	mov	r3, r6
 8009876:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009878:	4621      	mov	r1, r4
 800987a:	4628      	mov	r0, r5
 800987c:	f000 f9d2 	bl	8009c24 <_printf_common>
 8009880:	3001      	adds	r0, #1
 8009882:	f040 808d 	bne.w	80099a0 <_printf_float+0x1d0>
 8009886:	f04f 30ff 	mov.w	r0, #4294967295
 800988a:	b00d      	add	sp, #52	@ 0x34
 800988c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	4640      	mov	r0, r8
 8009896:	4649      	mov	r1, r9
 8009898:	f7f7 f950 	bl	8000b3c <__aeabi_dcmpun>
 800989c:	b140      	cbz	r0, 80098b0 <_printf_float+0xe0>
 800989e:	464b      	mov	r3, r9
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	bfbc      	itt	lt
 80098a4:	232d      	movlt	r3, #45	@ 0x2d
 80098a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80098aa:	4a7e      	ldr	r2, [pc, #504]	@ (8009aa4 <_printf_float+0x2d4>)
 80098ac:	4b7e      	ldr	r3, [pc, #504]	@ (8009aa8 <_printf_float+0x2d8>)
 80098ae:	e7d4      	b.n	800985a <_printf_float+0x8a>
 80098b0:	6863      	ldr	r3, [r4, #4]
 80098b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80098b6:	9206      	str	r2, [sp, #24]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	d13b      	bne.n	8009934 <_printf_float+0x164>
 80098bc:	2306      	movs	r3, #6
 80098be:	6063      	str	r3, [r4, #4]
 80098c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80098c4:	2300      	movs	r3, #0
 80098c6:	6022      	str	r2, [r4, #0]
 80098c8:	9303      	str	r3, [sp, #12]
 80098ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80098cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80098d0:	ab09      	add	r3, sp, #36	@ 0x24
 80098d2:	9300      	str	r3, [sp, #0]
 80098d4:	6861      	ldr	r1, [r4, #4]
 80098d6:	ec49 8b10 	vmov	d0, r8, r9
 80098da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80098de:	4628      	mov	r0, r5
 80098e0:	f7ff fed6 	bl	8009690 <__cvt>
 80098e4:	9b06      	ldr	r3, [sp, #24]
 80098e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80098e8:	2b47      	cmp	r3, #71	@ 0x47
 80098ea:	4680      	mov	r8, r0
 80098ec:	d129      	bne.n	8009942 <_printf_float+0x172>
 80098ee:	1cc8      	adds	r0, r1, #3
 80098f0:	db02      	blt.n	80098f8 <_printf_float+0x128>
 80098f2:	6863      	ldr	r3, [r4, #4]
 80098f4:	4299      	cmp	r1, r3
 80098f6:	dd41      	ble.n	800997c <_printf_float+0x1ac>
 80098f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80098fc:	fa5f fa8a 	uxtb.w	sl, sl
 8009900:	3901      	subs	r1, #1
 8009902:	4652      	mov	r2, sl
 8009904:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009908:	9109      	str	r1, [sp, #36]	@ 0x24
 800990a:	f7ff ff26 	bl	800975a <__exponent>
 800990e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009910:	1813      	adds	r3, r2, r0
 8009912:	2a01      	cmp	r2, #1
 8009914:	4681      	mov	r9, r0
 8009916:	6123      	str	r3, [r4, #16]
 8009918:	dc02      	bgt.n	8009920 <_printf_float+0x150>
 800991a:	6822      	ldr	r2, [r4, #0]
 800991c:	07d2      	lsls	r2, r2, #31
 800991e:	d501      	bpl.n	8009924 <_printf_float+0x154>
 8009920:	3301      	adds	r3, #1
 8009922:	6123      	str	r3, [r4, #16]
 8009924:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009928:	2b00      	cmp	r3, #0
 800992a:	d0a2      	beq.n	8009872 <_printf_float+0xa2>
 800992c:	232d      	movs	r3, #45	@ 0x2d
 800992e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009932:	e79e      	b.n	8009872 <_printf_float+0xa2>
 8009934:	9a06      	ldr	r2, [sp, #24]
 8009936:	2a47      	cmp	r2, #71	@ 0x47
 8009938:	d1c2      	bne.n	80098c0 <_printf_float+0xf0>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1c0      	bne.n	80098c0 <_printf_float+0xf0>
 800993e:	2301      	movs	r3, #1
 8009940:	e7bd      	b.n	80098be <_printf_float+0xee>
 8009942:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009946:	d9db      	bls.n	8009900 <_printf_float+0x130>
 8009948:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800994c:	d118      	bne.n	8009980 <_printf_float+0x1b0>
 800994e:	2900      	cmp	r1, #0
 8009950:	6863      	ldr	r3, [r4, #4]
 8009952:	dd0b      	ble.n	800996c <_printf_float+0x19c>
 8009954:	6121      	str	r1, [r4, #16]
 8009956:	b913      	cbnz	r3, 800995e <_printf_float+0x18e>
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	07d0      	lsls	r0, r2, #31
 800995c:	d502      	bpl.n	8009964 <_printf_float+0x194>
 800995e:	3301      	adds	r3, #1
 8009960:	440b      	add	r3, r1
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009966:	f04f 0900 	mov.w	r9, #0
 800996a:	e7db      	b.n	8009924 <_printf_float+0x154>
 800996c:	b913      	cbnz	r3, 8009974 <_printf_float+0x1a4>
 800996e:	6822      	ldr	r2, [r4, #0]
 8009970:	07d2      	lsls	r2, r2, #31
 8009972:	d501      	bpl.n	8009978 <_printf_float+0x1a8>
 8009974:	3302      	adds	r3, #2
 8009976:	e7f4      	b.n	8009962 <_printf_float+0x192>
 8009978:	2301      	movs	r3, #1
 800997a:	e7f2      	b.n	8009962 <_printf_float+0x192>
 800997c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009980:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009982:	4299      	cmp	r1, r3
 8009984:	db05      	blt.n	8009992 <_printf_float+0x1c2>
 8009986:	6823      	ldr	r3, [r4, #0]
 8009988:	6121      	str	r1, [r4, #16]
 800998a:	07d8      	lsls	r0, r3, #31
 800998c:	d5ea      	bpl.n	8009964 <_printf_float+0x194>
 800998e:	1c4b      	adds	r3, r1, #1
 8009990:	e7e7      	b.n	8009962 <_printf_float+0x192>
 8009992:	2900      	cmp	r1, #0
 8009994:	bfd4      	ite	le
 8009996:	f1c1 0202 	rsble	r2, r1, #2
 800999a:	2201      	movgt	r2, #1
 800999c:	4413      	add	r3, r2
 800999e:	e7e0      	b.n	8009962 <_printf_float+0x192>
 80099a0:	6823      	ldr	r3, [r4, #0]
 80099a2:	055a      	lsls	r2, r3, #21
 80099a4:	d407      	bmi.n	80099b6 <_printf_float+0x1e6>
 80099a6:	6923      	ldr	r3, [r4, #16]
 80099a8:	4642      	mov	r2, r8
 80099aa:	4631      	mov	r1, r6
 80099ac:	4628      	mov	r0, r5
 80099ae:	47b8      	blx	r7
 80099b0:	3001      	adds	r0, #1
 80099b2:	d12b      	bne.n	8009a0c <_printf_float+0x23c>
 80099b4:	e767      	b.n	8009886 <_printf_float+0xb6>
 80099b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80099ba:	f240 80dd 	bls.w	8009b78 <_printf_float+0x3a8>
 80099be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80099c2:	2200      	movs	r2, #0
 80099c4:	2300      	movs	r3, #0
 80099c6:	f7f7 f887 	bl	8000ad8 <__aeabi_dcmpeq>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d033      	beq.n	8009a36 <_printf_float+0x266>
 80099ce:	4a37      	ldr	r2, [pc, #220]	@ (8009aac <_printf_float+0x2dc>)
 80099d0:	2301      	movs	r3, #1
 80099d2:	4631      	mov	r1, r6
 80099d4:	4628      	mov	r0, r5
 80099d6:	47b8      	blx	r7
 80099d8:	3001      	adds	r0, #1
 80099da:	f43f af54 	beq.w	8009886 <_printf_float+0xb6>
 80099de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80099e2:	4543      	cmp	r3, r8
 80099e4:	db02      	blt.n	80099ec <_printf_float+0x21c>
 80099e6:	6823      	ldr	r3, [r4, #0]
 80099e8:	07d8      	lsls	r0, r3, #31
 80099ea:	d50f      	bpl.n	8009a0c <_printf_float+0x23c>
 80099ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099f0:	4631      	mov	r1, r6
 80099f2:	4628      	mov	r0, r5
 80099f4:	47b8      	blx	r7
 80099f6:	3001      	adds	r0, #1
 80099f8:	f43f af45 	beq.w	8009886 <_printf_float+0xb6>
 80099fc:	f04f 0900 	mov.w	r9, #0
 8009a00:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a04:	f104 0a1a 	add.w	sl, r4, #26
 8009a08:	45c8      	cmp	r8, r9
 8009a0a:	dc09      	bgt.n	8009a20 <_printf_float+0x250>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	079b      	lsls	r3, r3, #30
 8009a10:	f100 8103 	bmi.w	8009c1a <_printf_float+0x44a>
 8009a14:	68e0      	ldr	r0, [r4, #12]
 8009a16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a18:	4298      	cmp	r0, r3
 8009a1a:	bfb8      	it	lt
 8009a1c:	4618      	movlt	r0, r3
 8009a1e:	e734      	b.n	800988a <_printf_float+0xba>
 8009a20:	2301      	movs	r3, #1
 8009a22:	4652      	mov	r2, sl
 8009a24:	4631      	mov	r1, r6
 8009a26:	4628      	mov	r0, r5
 8009a28:	47b8      	blx	r7
 8009a2a:	3001      	adds	r0, #1
 8009a2c:	f43f af2b 	beq.w	8009886 <_printf_float+0xb6>
 8009a30:	f109 0901 	add.w	r9, r9, #1
 8009a34:	e7e8      	b.n	8009a08 <_printf_float+0x238>
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	dc39      	bgt.n	8009ab0 <_printf_float+0x2e0>
 8009a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8009aac <_printf_float+0x2dc>)
 8009a3e:	2301      	movs	r3, #1
 8009a40:	4631      	mov	r1, r6
 8009a42:	4628      	mov	r0, r5
 8009a44:	47b8      	blx	r7
 8009a46:	3001      	adds	r0, #1
 8009a48:	f43f af1d 	beq.w	8009886 <_printf_float+0xb6>
 8009a4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009a50:	ea59 0303 	orrs.w	r3, r9, r3
 8009a54:	d102      	bne.n	8009a5c <_printf_float+0x28c>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	07d9      	lsls	r1, r3, #31
 8009a5a:	d5d7      	bpl.n	8009a0c <_printf_float+0x23c>
 8009a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a60:	4631      	mov	r1, r6
 8009a62:	4628      	mov	r0, r5
 8009a64:	47b8      	blx	r7
 8009a66:	3001      	adds	r0, #1
 8009a68:	f43f af0d 	beq.w	8009886 <_printf_float+0xb6>
 8009a6c:	f04f 0a00 	mov.w	sl, #0
 8009a70:	f104 0b1a 	add.w	fp, r4, #26
 8009a74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a76:	425b      	negs	r3, r3
 8009a78:	4553      	cmp	r3, sl
 8009a7a:	dc01      	bgt.n	8009a80 <_printf_float+0x2b0>
 8009a7c:	464b      	mov	r3, r9
 8009a7e:	e793      	b.n	80099a8 <_printf_float+0x1d8>
 8009a80:	2301      	movs	r3, #1
 8009a82:	465a      	mov	r2, fp
 8009a84:	4631      	mov	r1, r6
 8009a86:	4628      	mov	r0, r5
 8009a88:	47b8      	blx	r7
 8009a8a:	3001      	adds	r0, #1
 8009a8c:	f43f aefb 	beq.w	8009886 <_printf_float+0xb6>
 8009a90:	f10a 0a01 	add.w	sl, sl, #1
 8009a94:	e7ee      	b.n	8009a74 <_printf_float+0x2a4>
 8009a96:	bf00      	nop
 8009a98:	7fefffff 	.word	0x7fefffff
 8009a9c:	0800c6a8 	.word	0x0800c6a8
 8009aa0:	0800c6a4 	.word	0x0800c6a4
 8009aa4:	0800c6b0 	.word	0x0800c6b0
 8009aa8:	0800c6ac 	.word	0x0800c6ac
 8009aac:	0800c6b4 	.word	0x0800c6b4
 8009ab0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ab2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ab6:	4553      	cmp	r3, sl
 8009ab8:	bfa8      	it	ge
 8009aba:	4653      	movge	r3, sl
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	4699      	mov	r9, r3
 8009ac0:	dc36      	bgt.n	8009b30 <_printf_float+0x360>
 8009ac2:	f04f 0b00 	mov.w	fp, #0
 8009ac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aca:	f104 021a 	add.w	r2, r4, #26
 8009ace:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ad0:	9306      	str	r3, [sp, #24]
 8009ad2:	eba3 0309 	sub.w	r3, r3, r9
 8009ad6:	455b      	cmp	r3, fp
 8009ad8:	dc31      	bgt.n	8009b3e <_printf_float+0x36e>
 8009ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009adc:	459a      	cmp	sl, r3
 8009ade:	dc3a      	bgt.n	8009b56 <_printf_float+0x386>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	07da      	lsls	r2, r3, #31
 8009ae4:	d437      	bmi.n	8009b56 <_printf_float+0x386>
 8009ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ae8:	ebaa 0903 	sub.w	r9, sl, r3
 8009aec:	9b06      	ldr	r3, [sp, #24]
 8009aee:	ebaa 0303 	sub.w	r3, sl, r3
 8009af2:	4599      	cmp	r9, r3
 8009af4:	bfa8      	it	ge
 8009af6:	4699      	movge	r9, r3
 8009af8:	f1b9 0f00 	cmp.w	r9, #0
 8009afc:	dc33      	bgt.n	8009b66 <_printf_float+0x396>
 8009afe:	f04f 0800 	mov.w	r8, #0
 8009b02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b06:	f104 0b1a 	add.w	fp, r4, #26
 8009b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b0c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b10:	eba3 0309 	sub.w	r3, r3, r9
 8009b14:	4543      	cmp	r3, r8
 8009b16:	f77f af79 	ble.w	8009a0c <_printf_float+0x23c>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	465a      	mov	r2, fp
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f aeae 	beq.w	8009886 <_printf_float+0xb6>
 8009b2a:	f108 0801 	add.w	r8, r8, #1
 8009b2e:	e7ec      	b.n	8009b0a <_printf_float+0x33a>
 8009b30:	4642      	mov	r2, r8
 8009b32:	4631      	mov	r1, r6
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b8      	blx	r7
 8009b38:	3001      	adds	r0, #1
 8009b3a:	d1c2      	bne.n	8009ac2 <_printf_float+0x2f2>
 8009b3c:	e6a3      	b.n	8009886 <_printf_float+0xb6>
 8009b3e:	2301      	movs	r3, #1
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	9206      	str	r2, [sp, #24]
 8009b46:	47b8      	blx	r7
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f ae9c 	beq.w	8009886 <_printf_float+0xb6>
 8009b4e:	9a06      	ldr	r2, [sp, #24]
 8009b50:	f10b 0b01 	add.w	fp, fp, #1
 8009b54:	e7bb      	b.n	8009ace <_printf_float+0x2fe>
 8009b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b5a:	4631      	mov	r1, r6
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	d1c0      	bne.n	8009ae6 <_printf_float+0x316>
 8009b64:	e68f      	b.n	8009886 <_printf_float+0xb6>
 8009b66:	9a06      	ldr	r2, [sp, #24]
 8009b68:	464b      	mov	r3, r9
 8009b6a:	4442      	add	r2, r8
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4628      	mov	r0, r5
 8009b70:	47b8      	blx	r7
 8009b72:	3001      	adds	r0, #1
 8009b74:	d1c3      	bne.n	8009afe <_printf_float+0x32e>
 8009b76:	e686      	b.n	8009886 <_printf_float+0xb6>
 8009b78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009b7c:	f1ba 0f01 	cmp.w	sl, #1
 8009b80:	dc01      	bgt.n	8009b86 <_printf_float+0x3b6>
 8009b82:	07db      	lsls	r3, r3, #31
 8009b84:	d536      	bpl.n	8009bf4 <_printf_float+0x424>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4642      	mov	r2, r8
 8009b8a:	4631      	mov	r1, r6
 8009b8c:	4628      	mov	r0, r5
 8009b8e:	47b8      	blx	r7
 8009b90:	3001      	adds	r0, #1
 8009b92:	f43f ae78 	beq.w	8009886 <_printf_float+0xb6>
 8009b96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b9a:	4631      	mov	r1, r6
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	47b8      	blx	r7
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	f43f ae70 	beq.w	8009886 <_printf_float+0xb6>
 8009ba6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009baa:	2200      	movs	r2, #0
 8009bac:	2300      	movs	r3, #0
 8009bae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009bb2:	f7f6 ff91 	bl	8000ad8 <__aeabi_dcmpeq>
 8009bb6:	b9c0      	cbnz	r0, 8009bea <_printf_float+0x41a>
 8009bb8:	4653      	mov	r3, sl
 8009bba:	f108 0201 	add.w	r2, r8, #1
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	47b8      	blx	r7
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d10c      	bne.n	8009be2 <_printf_float+0x412>
 8009bc8:	e65d      	b.n	8009886 <_printf_float+0xb6>
 8009bca:	2301      	movs	r3, #1
 8009bcc:	465a      	mov	r2, fp
 8009bce:	4631      	mov	r1, r6
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	47b8      	blx	r7
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f43f ae56 	beq.w	8009886 <_printf_float+0xb6>
 8009bda:	f108 0801 	add.w	r8, r8, #1
 8009bde:	45d0      	cmp	r8, sl
 8009be0:	dbf3      	blt.n	8009bca <_printf_float+0x3fa>
 8009be2:	464b      	mov	r3, r9
 8009be4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009be8:	e6df      	b.n	80099aa <_printf_float+0x1da>
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	f104 0b1a 	add.w	fp, r4, #26
 8009bf2:	e7f4      	b.n	8009bde <_printf_float+0x40e>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	4642      	mov	r2, r8
 8009bf8:	e7e1      	b.n	8009bbe <_printf_float+0x3ee>
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	464a      	mov	r2, r9
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	47b8      	blx	r7
 8009c04:	3001      	adds	r0, #1
 8009c06:	f43f ae3e 	beq.w	8009886 <_printf_float+0xb6>
 8009c0a:	f108 0801 	add.w	r8, r8, #1
 8009c0e:	68e3      	ldr	r3, [r4, #12]
 8009c10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c12:	1a5b      	subs	r3, r3, r1
 8009c14:	4543      	cmp	r3, r8
 8009c16:	dcf0      	bgt.n	8009bfa <_printf_float+0x42a>
 8009c18:	e6fc      	b.n	8009a14 <_printf_float+0x244>
 8009c1a:	f04f 0800 	mov.w	r8, #0
 8009c1e:	f104 0919 	add.w	r9, r4, #25
 8009c22:	e7f4      	b.n	8009c0e <_printf_float+0x43e>

08009c24 <_printf_common>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	4616      	mov	r6, r2
 8009c2a:	4698      	mov	r8, r3
 8009c2c:	688a      	ldr	r2, [r1, #8]
 8009c2e:	690b      	ldr	r3, [r1, #16]
 8009c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c34:	4293      	cmp	r3, r2
 8009c36:	bfb8      	it	lt
 8009c38:	4613      	movlt	r3, r2
 8009c3a:	6033      	str	r3, [r6, #0]
 8009c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c40:	4607      	mov	r7, r0
 8009c42:	460c      	mov	r4, r1
 8009c44:	b10a      	cbz	r2, 8009c4a <_printf_common+0x26>
 8009c46:	3301      	adds	r3, #1
 8009c48:	6033      	str	r3, [r6, #0]
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	0699      	lsls	r1, r3, #26
 8009c4e:	bf42      	ittt	mi
 8009c50:	6833      	ldrmi	r3, [r6, #0]
 8009c52:	3302      	addmi	r3, #2
 8009c54:	6033      	strmi	r3, [r6, #0]
 8009c56:	6825      	ldr	r5, [r4, #0]
 8009c58:	f015 0506 	ands.w	r5, r5, #6
 8009c5c:	d106      	bne.n	8009c6c <_printf_common+0x48>
 8009c5e:	f104 0a19 	add.w	sl, r4, #25
 8009c62:	68e3      	ldr	r3, [r4, #12]
 8009c64:	6832      	ldr	r2, [r6, #0]
 8009c66:	1a9b      	subs	r3, r3, r2
 8009c68:	42ab      	cmp	r3, r5
 8009c6a:	dc26      	bgt.n	8009cba <_printf_common+0x96>
 8009c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c70:	6822      	ldr	r2, [r4, #0]
 8009c72:	3b00      	subs	r3, #0
 8009c74:	bf18      	it	ne
 8009c76:	2301      	movne	r3, #1
 8009c78:	0692      	lsls	r2, r2, #26
 8009c7a:	d42b      	bmi.n	8009cd4 <_printf_common+0xb0>
 8009c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c80:	4641      	mov	r1, r8
 8009c82:	4638      	mov	r0, r7
 8009c84:	47c8      	blx	r9
 8009c86:	3001      	adds	r0, #1
 8009c88:	d01e      	beq.n	8009cc8 <_printf_common+0xa4>
 8009c8a:	6823      	ldr	r3, [r4, #0]
 8009c8c:	6922      	ldr	r2, [r4, #16]
 8009c8e:	f003 0306 	and.w	r3, r3, #6
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	bf02      	ittt	eq
 8009c96:	68e5      	ldreq	r5, [r4, #12]
 8009c98:	6833      	ldreq	r3, [r6, #0]
 8009c9a:	1aed      	subeq	r5, r5, r3
 8009c9c:	68a3      	ldr	r3, [r4, #8]
 8009c9e:	bf0c      	ite	eq
 8009ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ca4:	2500      	movne	r5, #0
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	bfc4      	itt	gt
 8009caa:	1a9b      	subgt	r3, r3, r2
 8009cac:	18ed      	addgt	r5, r5, r3
 8009cae:	2600      	movs	r6, #0
 8009cb0:	341a      	adds	r4, #26
 8009cb2:	42b5      	cmp	r5, r6
 8009cb4:	d11a      	bne.n	8009cec <_printf_common+0xc8>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	e008      	b.n	8009ccc <_printf_common+0xa8>
 8009cba:	2301      	movs	r3, #1
 8009cbc:	4652      	mov	r2, sl
 8009cbe:	4641      	mov	r1, r8
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	47c8      	blx	r9
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d103      	bne.n	8009cd0 <_printf_common+0xac>
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cd0:	3501      	adds	r5, #1
 8009cd2:	e7c6      	b.n	8009c62 <_printf_common+0x3e>
 8009cd4:	18e1      	adds	r1, r4, r3
 8009cd6:	1c5a      	adds	r2, r3, #1
 8009cd8:	2030      	movs	r0, #48	@ 0x30
 8009cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009cde:	4422      	add	r2, r4
 8009ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ce8:	3302      	adds	r3, #2
 8009cea:	e7c7      	b.n	8009c7c <_printf_common+0x58>
 8009cec:	2301      	movs	r3, #1
 8009cee:	4622      	mov	r2, r4
 8009cf0:	4641      	mov	r1, r8
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	47c8      	blx	r9
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d0e6      	beq.n	8009cc8 <_printf_common+0xa4>
 8009cfa:	3601      	adds	r6, #1
 8009cfc:	e7d9      	b.n	8009cb2 <_printf_common+0x8e>
	...

08009d00 <_printf_i>:
 8009d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d04:	7e0f      	ldrb	r7, [r1, #24]
 8009d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d08:	2f78      	cmp	r7, #120	@ 0x78
 8009d0a:	4691      	mov	r9, r2
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	469a      	mov	sl, r3
 8009d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d16:	d807      	bhi.n	8009d28 <_printf_i+0x28>
 8009d18:	2f62      	cmp	r7, #98	@ 0x62
 8009d1a:	d80a      	bhi.n	8009d32 <_printf_i+0x32>
 8009d1c:	2f00      	cmp	r7, #0
 8009d1e:	f000 80d1 	beq.w	8009ec4 <_printf_i+0x1c4>
 8009d22:	2f58      	cmp	r7, #88	@ 0x58
 8009d24:	f000 80b8 	beq.w	8009e98 <_printf_i+0x198>
 8009d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d30:	e03a      	b.n	8009da8 <_printf_i+0xa8>
 8009d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d36:	2b15      	cmp	r3, #21
 8009d38:	d8f6      	bhi.n	8009d28 <_printf_i+0x28>
 8009d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8009d40 <_printf_i+0x40>)
 8009d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d40:	08009d99 	.word	0x08009d99
 8009d44:	08009dad 	.word	0x08009dad
 8009d48:	08009d29 	.word	0x08009d29
 8009d4c:	08009d29 	.word	0x08009d29
 8009d50:	08009d29 	.word	0x08009d29
 8009d54:	08009d29 	.word	0x08009d29
 8009d58:	08009dad 	.word	0x08009dad
 8009d5c:	08009d29 	.word	0x08009d29
 8009d60:	08009d29 	.word	0x08009d29
 8009d64:	08009d29 	.word	0x08009d29
 8009d68:	08009d29 	.word	0x08009d29
 8009d6c:	08009eab 	.word	0x08009eab
 8009d70:	08009dd7 	.word	0x08009dd7
 8009d74:	08009e65 	.word	0x08009e65
 8009d78:	08009d29 	.word	0x08009d29
 8009d7c:	08009d29 	.word	0x08009d29
 8009d80:	08009ecd 	.word	0x08009ecd
 8009d84:	08009d29 	.word	0x08009d29
 8009d88:	08009dd7 	.word	0x08009dd7
 8009d8c:	08009d29 	.word	0x08009d29
 8009d90:	08009d29 	.word	0x08009d29
 8009d94:	08009e6d 	.word	0x08009e6d
 8009d98:	6833      	ldr	r3, [r6, #0]
 8009d9a:	1d1a      	adds	r2, r3, #4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	6032      	str	r2, [r6, #0]
 8009da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009da8:	2301      	movs	r3, #1
 8009daa:	e09c      	b.n	8009ee6 <_printf_i+0x1e6>
 8009dac:	6833      	ldr	r3, [r6, #0]
 8009dae:	6820      	ldr	r0, [r4, #0]
 8009db0:	1d19      	adds	r1, r3, #4
 8009db2:	6031      	str	r1, [r6, #0]
 8009db4:	0606      	lsls	r6, r0, #24
 8009db6:	d501      	bpl.n	8009dbc <_printf_i+0xbc>
 8009db8:	681d      	ldr	r5, [r3, #0]
 8009dba:	e003      	b.n	8009dc4 <_printf_i+0xc4>
 8009dbc:	0645      	lsls	r5, r0, #25
 8009dbe:	d5fb      	bpl.n	8009db8 <_printf_i+0xb8>
 8009dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009dc4:	2d00      	cmp	r5, #0
 8009dc6:	da03      	bge.n	8009dd0 <_printf_i+0xd0>
 8009dc8:	232d      	movs	r3, #45	@ 0x2d
 8009dca:	426d      	negs	r5, r5
 8009dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009dd0:	4858      	ldr	r0, [pc, #352]	@ (8009f34 <_printf_i+0x234>)
 8009dd2:	230a      	movs	r3, #10
 8009dd4:	e011      	b.n	8009dfa <_printf_i+0xfa>
 8009dd6:	6821      	ldr	r1, [r4, #0]
 8009dd8:	6833      	ldr	r3, [r6, #0]
 8009dda:	0608      	lsls	r0, r1, #24
 8009ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009de0:	d402      	bmi.n	8009de8 <_printf_i+0xe8>
 8009de2:	0649      	lsls	r1, r1, #25
 8009de4:	bf48      	it	mi
 8009de6:	b2ad      	uxthmi	r5, r5
 8009de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009dea:	4852      	ldr	r0, [pc, #328]	@ (8009f34 <_printf_i+0x234>)
 8009dec:	6033      	str	r3, [r6, #0]
 8009dee:	bf14      	ite	ne
 8009df0:	230a      	movne	r3, #10
 8009df2:	2308      	moveq	r3, #8
 8009df4:	2100      	movs	r1, #0
 8009df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dfa:	6866      	ldr	r6, [r4, #4]
 8009dfc:	60a6      	str	r6, [r4, #8]
 8009dfe:	2e00      	cmp	r6, #0
 8009e00:	db05      	blt.n	8009e0e <_printf_i+0x10e>
 8009e02:	6821      	ldr	r1, [r4, #0]
 8009e04:	432e      	orrs	r6, r5
 8009e06:	f021 0104 	bic.w	r1, r1, #4
 8009e0a:	6021      	str	r1, [r4, #0]
 8009e0c:	d04b      	beq.n	8009ea6 <_printf_i+0x1a6>
 8009e0e:	4616      	mov	r6, r2
 8009e10:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e14:	fb03 5711 	mls	r7, r3, r1, r5
 8009e18:	5dc7      	ldrb	r7, [r0, r7]
 8009e1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e1e:	462f      	mov	r7, r5
 8009e20:	42bb      	cmp	r3, r7
 8009e22:	460d      	mov	r5, r1
 8009e24:	d9f4      	bls.n	8009e10 <_printf_i+0x110>
 8009e26:	2b08      	cmp	r3, #8
 8009e28:	d10b      	bne.n	8009e42 <_printf_i+0x142>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	07df      	lsls	r7, r3, #31
 8009e2e:	d508      	bpl.n	8009e42 <_printf_i+0x142>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	6861      	ldr	r1, [r4, #4]
 8009e34:	4299      	cmp	r1, r3
 8009e36:	bfde      	ittt	le
 8009e38:	2330      	movle	r3, #48	@ 0x30
 8009e3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e42:	1b92      	subs	r2, r2, r6
 8009e44:	6122      	str	r2, [r4, #16]
 8009e46:	f8cd a000 	str.w	sl, [sp]
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	aa03      	add	r2, sp, #12
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4640      	mov	r0, r8
 8009e52:	f7ff fee7 	bl	8009c24 <_printf_common>
 8009e56:	3001      	adds	r0, #1
 8009e58:	d14a      	bne.n	8009ef0 <_printf_i+0x1f0>
 8009e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5e:	b004      	add	sp, #16
 8009e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	f043 0320 	orr.w	r3, r3, #32
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	4832      	ldr	r0, [pc, #200]	@ (8009f38 <_printf_i+0x238>)
 8009e6e:	2778      	movs	r7, #120	@ 0x78
 8009e70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	6831      	ldr	r1, [r6, #0]
 8009e78:	061f      	lsls	r7, r3, #24
 8009e7a:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e7e:	d402      	bmi.n	8009e86 <_printf_i+0x186>
 8009e80:	065f      	lsls	r7, r3, #25
 8009e82:	bf48      	it	mi
 8009e84:	b2ad      	uxthmi	r5, r5
 8009e86:	6031      	str	r1, [r6, #0]
 8009e88:	07d9      	lsls	r1, r3, #31
 8009e8a:	bf44      	itt	mi
 8009e8c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e90:	6023      	strmi	r3, [r4, #0]
 8009e92:	b11d      	cbz	r5, 8009e9c <_printf_i+0x19c>
 8009e94:	2310      	movs	r3, #16
 8009e96:	e7ad      	b.n	8009df4 <_printf_i+0xf4>
 8009e98:	4826      	ldr	r0, [pc, #152]	@ (8009f34 <_printf_i+0x234>)
 8009e9a:	e7e9      	b.n	8009e70 <_printf_i+0x170>
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	f023 0320 	bic.w	r3, r3, #32
 8009ea2:	6023      	str	r3, [r4, #0]
 8009ea4:	e7f6      	b.n	8009e94 <_printf_i+0x194>
 8009ea6:	4616      	mov	r6, r2
 8009ea8:	e7bd      	b.n	8009e26 <_printf_i+0x126>
 8009eaa:	6833      	ldr	r3, [r6, #0]
 8009eac:	6825      	ldr	r5, [r4, #0]
 8009eae:	6961      	ldr	r1, [r4, #20]
 8009eb0:	1d18      	adds	r0, r3, #4
 8009eb2:	6030      	str	r0, [r6, #0]
 8009eb4:	062e      	lsls	r6, r5, #24
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	d501      	bpl.n	8009ebe <_printf_i+0x1be>
 8009eba:	6019      	str	r1, [r3, #0]
 8009ebc:	e002      	b.n	8009ec4 <_printf_i+0x1c4>
 8009ebe:	0668      	lsls	r0, r5, #25
 8009ec0:	d5fb      	bpl.n	8009eba <_printf_i+0x1ba>
 8009ec2:	8019      	strh	r1, [r3, #0]
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	6123      	str	r3, [r4, #16]
 8009ec8:	4616      	mov	r6, r2
 8009eca:	e7bc      	b.n	8009e46 <_printf_i+0x146>
 8009ecc:	6833      	ldr	r3, [r6, #0]
 8009ece:	1d1a      	adds	r2, r3, #4
 8009ed0:	6032      	str	r2, [r6, #0]
 8009ed2:	681e      	ldr	r6, [r3, #0]
 8009ed4:	6862      	ldr	r2, [r4, #4]
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	4630      	mov	r0, r6
 8009eda:	f7f6 f981 	bl	80001e0 <memchr>
 8009ede:	b108      	cbz	r0, 8009ee4 <_printf_i+0x1e4>
 8009ee0:	1b80      	subs	r0, r0, r6
 8009ee2:	6060      	str	r0, [r4, #4]
 8009ee4:	6863      	ldr	r3, [r4, #4]
 8009ee6:	6123      	str	r3, [r4, #16]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eee:	e7aa      	b.n	8009e46 <_printf_i+0x146>
 8009ef0:	6923      	ldr	r3, [r4, #16]
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4640      	mov	r0, r8
 8009ef8:	47d0      	blx	sl
 8009efa:	3001      	adds	r0, #1
 8009efc:	d0ad      	beq.n	8009e5a <_printf_i+0x15a>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	079b      	lsls	r3, r3, #30
 8009f02:	d413      	bmi.n	8009f2c <_printf_i+0x22c>
 8009f04:	68e0      	ldr	r0, [r4, #12]
 8009f06:	9b03      	ldr	r3, [sp, #12]
 8009f08:	4298      	cmp	r0, r3
 8009f0a:	bfb8      	it	lt
 8009f0c:	4618      	movlt	r0, r3
 8009f0e:	e7a6      	b.n	8009e5e <_printf_i+0x15e>
 8009f10:	2301      	movs	r3, #1
 8009f12:	4632      	mov	r2, r6
 8009f14:	4649      	mov	r1, r9
 8009f16:	4640      	mov	r0, r8
 8009f18:	47d0      	blx	sl
 8009f1a:	3001      	adds	r0, #1
 8009f1c:	d09d      	beq.n	8009e5a <_printf_i+0x15a>
 8009f1e:	3501      	adds	r5, #1
 8009f20:	68e3      	ldr	r3, [r4, #12]
 8009f22:	9903      	ldr	r1, [sp, #12]
 8009f24:	1a5b      	subs	r3, r3, r1
 8009f26:	42ab      	cmp	r3, r5
 8009f28:	dcf2      	bgt.n	8009f10 <_printf_i+0x210>
 8009f2a:	e7eb      	b.n	8009f04 <_printf_i+0x204>
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	f104 0619 	add.w	r6, r4, #25
 8009f32:	e7f5      	b.n	8009f20 <_printf_i+0x220>
 8009f34:	0800c6b6 	.word	0x0800c6b6
 8009f38:	0800c6c7 	.word	0x0800c6c7

08009f3c <std>:
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	4604      	mov	r4, r0
 8009f42:	e9c0 3300 	strd	r3, r3, [r0]
 8009f46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f4a:	6083      	str	r3, [r0, #8]
 8009f4c:	8181      	strh	r1, [r0, #12]
 8009f4e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009f50:	81c2      	strh	r2, [r0, #14]
 8009f52:	6183      	str	r3, [r0, #24]
 8009f54:	4619      	mov	r1, r3
 8009f56:	2208      	movs	r2, #8
 8009f58:	305c      	adds	r0, #92	@ 0x5c
 8009f5a:	f000 f9f9 	bl	800a350 <memset>
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f94 <std+0x58>)
 8009f60:	6263      	str	r3, [r4, #36]	@ 0x24
 8009f62:	4b0d      	ldr	r3, [pc, #52]	@ (8009f98 <std+0x5c>)
 8009f64:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009f66:	4b0d      	ldr	r3, [pc, #52]	@ (8009f9c <std+0x60>)
 8009f68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa0 <std+0x64>)
 8009f6c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <std+0x68>)
 8009f70:	6224      	str	r4, [r4, #32]
 8009f72:	429c      	cmp	r4, r3
 8009f74:	d006      	beq.n	8009f84 <std+0x48>
 8009f76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009f7a:	4294      	cmp	r4, r2
 8009f7c:	d002      	beq.n	8009f84 <std+0x48>
 8009f7e:	33d0      	adds	r3, #208	@ 0xd0
 8009f80:	429c      	cmp	r4, r3
 8009f82:	d105      	bne.n	8009f90 <std+0x54>
 8009f84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f8c:	f000 ba5c 	b.w	800a448 <__retarget_lock_init_recursive>
 8009f90:	bd10      	pop	{r4, pc}
 8009f92:	bf00      	nop
 8009f94:	0800a1a1 	.word	0x0800a1a1
 8009f98:	0800a1c3 	.word	0x0800a1c3
 8009f9c:	0800a1fb 	.word	0x0800a1fb
 8009fa0:	0800a21f 	.word	0x0800a21f
 8009fa4:	200006fc 	.word	0x200006fc

08009fa8 <stdio_exit_handler>:
 8009fa8:	4a02      	ldr	r2, [pc, #8]	@ (8009fb4 <stdio_exit_handler+0xc>)
 8009faa:	4903      	ldr	r1, [pc, #12]	@ (8009fb8 <stdio_exit_handler+0x10>)
 8009fac:	4803      	ldr	r0, [pc, #12]	@ (8009fbc <stdio_exit_handler+0x14>)
 8009fae:	f000 b869 	b.w	800a084 <_fwalk_sglue>
 8009fb2:	bf00      	nop
 8009fb4:	20000024 	.word	0x20000024
 8009fb8:	0800bd81 	.word	0x0800bd81
 8009fbc:	20000034 	.word	0x20000034

08009fc0 <cleanup_stdio>:
 8009fc0:	6841      	ldr	r1, [r0, #4]
 8009fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ff4 <cleanup_stdio+0x34>)
 8009fc4:	4299      	cmp	r1, r3
 8009fc6:	b510      	push	{r4, lr}
 8009fc8:	4604      	mov	r4, r0
 8009fca:	d001      	beq.n	8009fd0 <cleanup_stdio+0x10>
 8009fcc:	f001 fed8 	bl	800bd80 <_fflush_r>
 8009fd0:	68a1      	ldr	r1, [r4, #8]
 8009fd2:	4b09      	ldr	r3, [pc, #36]	@ (8009ff8 <cleanup_stdio+0x38>)
 8009fd4:	4299      	cmp	r1, r3
 8009fd6:	d002      	beq.n	8009fde <cleanup_stdio+0x1e>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f001 fed1 	bl	800bd80 <_fflush_r>
 8009fde:	68e1      	ldr	r1, [r4, #12]
 8009fe0:	4b06      	ldr	r3, [pc, #24]	@ (8009ffc <cleanup_stdio+0x3c>)
 8009fe2:	4299      	cmp	r1, r3
 8009fe4:	d004      	beq.n	8009ff0 <cleanup_stdio+0x30>
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009fec:	f001 bec8 	b.w	800bd80 <_fflush_r>
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	bf00      	nop
 8009ff4:	200006fc 	.word	0x200006fc
 8009ff8:	20000764 	.word	0x20000764
 8009ffc:	200007cc 	.word	0x200007cc

0800a000 <global_stdio_init.part.0>:
 800a000:	b510      	push	{r4, lr}
 800a002:	4b0b      	ldr	r3, [pc, #44]	@ (800a030 <global_stdio_init.part.0+0x30>)
 800a004:	4c0b      	ldr	r4, [pc, #44]	@ (800a034 <global_stdio_init.part.0+0x34>)
 800a006:	4a0c      	ldr	r2, [pc, #48]	@ (800a038 <global_stdio_init.part.0+0x38>)
 800a008:	601a      	str	r2, [r3, #0]
 800a00a:	4620      	mov	r0, r4
 800a00c:	2200      	movs	r2, #0
 800a00e:	2104      	movs	r1, #4
 800a010:	f7ff ff94 	bl	8009f3c <std>
 800a014:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a018:	2201      	movs	r2, #1
 800a01a:	2109      	movs	r1, #9
 800a01c:	f7ff ff8e 	bl	8009f3c <std>
 800a020:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a024:	2202      	movs	r2, #2
 800a026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a02a:	2112      	movs	r1, #18
 800a02c:	f7ff bf86 	b.w	8009f3c <std>
 800a030:	20000834 	.word	0x20000834
 800a034:	200006fc 	.word	0x200006fc
 800a038:	08009fa9 	.word	0x08009fa9

0800a03c <__sfp_lock_acquire>:
 800a03c:	4801      	ldr	r0, [pc, #4]	@ (800a044 <__sfp_lock_acquire+0x8>)
 800a03e:	f000 ba04 	b.w	800a44a <__retarget_lock_acquire_recursive>
 800a042:	bf00      	nop
 800a044:	2000083d 	.word	0x2000083d

0800a048 <__sfp_lock_release>:
 800a048:	4801      	ldr	r0, [pc, #4]	@ (800a050 <__sfp_lock_release+0x8>)
 800a04a:	f000 b9ff 	b.w	800a44c <__retarget_lock_release_recursive>
 800a04e:	bf00      	nop
 800a050:	2000083d 	.word	0x2000083d

0800a054 <__sinit>:
 800a054:	b510      	push	{r4, lr}
 800a056:	4604      	mov	r4, r0
 800a058:	f7ff fff0 	bl	800a03c <__sfp_lock_acquire>
 800a05c:	6a23      	ldr	r3, [r4, #32]
 800a05e:	b11b      	cbz	r3, 800a068 <__sinit+0x14>
 800a060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a064:	f7ff bff0 	b.w	800a048 <__sfp_lock_release>
 800a068:	4b04      	ldr	r3, [pc, #16]	@ (800a07c <__sinit+0x28>)
 800a06a:	6223      	str	r3, [r4, #32]
 800a06c:	4b04      	ldr	r3, [pc, #16]	@ (800a080 <__sinit+0x2c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f5      	bne.n	800a060 <__sinit+0xc>
 800a074:	f7ff ffc4 	bl	800a000 <global_stdio_init.part.0>
 800a078:	e7f2      	b.n	800a060 <__sinit+0xc>
 800a07a:	bf00      	nop
 800a07c:	08009fc1 	.word	0x08009fc1
 800a080:	20000834 	.word	0x20000834

0800a084 <_fwalk_sglue>:
 800a084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a088:	4607      	mov	r7, r0
 800a08a:	4688      	mov	r8, r1
 800a08c:	4614      	mov	r4, r2
 800a08e:	2600      	movs	r6, #0
 800a090:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a094:	f1b9 0901 	subs.w	r9, r9, #1
 800a098:	d505      	bpl.n	800a0a6 <_fwalk_sglue+0x22>
 800a09a:	6824      	ldr	r4, [r4, #0]
 800a09c:	2c00      	cmp	r4, #0
 800a09e:	d1f7      	bne.n	800a090 <_fwalk_sglue+0xc>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d907      	bls.n	800a0bc <_fwalk_sglue+0x38>
 800a0ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	d003      	beq.n	800a0bc <_fwalk_sglue+0x38>
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	4638      	mov	r0, r7
 800a0b8:	47c0      	blx	r8
 800a0ba:	4306      	orrs	r6, r0
 800a0bc:	3568      	adds	r5, #104	@ 0x68
 800a0be:	e7e9      	b.n	800a094 <_fwalk_sglue+0x10>

0800a0c0 <iprintf>:
 800a0c0:	b40f      	push	{r0, r1, r2, r3}
 800a0c2:	b507      	push	{r0, r1, r2, lr}
 800a0c4:	4906      	ldr	r1, [pc, #24]	@ (800a0e0 <iprintf+0x20>)
 800a0c6:	ab04      	add	r3, sp, #16
 800a0c8:	6808      	ldr	r0, [r1, #0]
 800a0ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ce:	6881      	ldr	r1, [r0, #8]
 800a0d0:	9301      	str	r3, [sp, #4]
 800a0d2:	f001 fcb9 	bl	800ba48 <_vfiprintf_r>
 800a0d6:	b003      	add	sp, #12
 800a0d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0dc:	b004      	add	sp, #16
 800a0de:	4770      	bx	lr
 800a0e0:	20000030 	.word	0x20000030

0800a0e4 <_puts_r>:
 800a0e4:	6a03      	ldr	r3, [r0, #32]
 800a0e6:	b570      	push	{r4, r5, r6, lr}
 800a0e8:	6884      	ldr	r4, [r0, #8]
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	460e      	mov	r6, r1
 800a0ee:	b90b      	cbnz	r3, 800a0f4 <_puts_r+0x10>
 800a0f0:	f7ff ffb0 	bl	800a054 <__sinit>
 800a0f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0f6:	07db      	lsls	r3, r3, #31
 800a0f8:	d405      	bmi.n	800a106 <_puts_r+0x22>
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	0598      	lsls	r0, r3, #22
 800a0fe:	d402      	bmi.n	800a106 <_puts_r+0x22>
 800a100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a102:	f000 f9a2 	bl	800a44a <__retarget_lock_acquire_recursive>
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	0719      	lsls	r1, r3, #28
 800a10a:	d502      	bpl.n	800a112 <_puts_r+0x2e>
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d135      	bne.n	800a17e <_puts_r+0x9a>
 800a112:	4621      	mov	r1, r4
 800a114:	4628      	mov	r0, r5
 800a116:	f000 f8c5 	bl	800a2a4 <__swsetup_r>
 800a11a:	b380      	cbz	r0, 800a17e <_puts_r+0x9a>
 800a11c:	f04f 35ff 	mov.w	r5, #4294967295
 800a120:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a122:	07da      	lsls	r2, r3, #31
 800a124:	d405      	bmi.n	800a132 <_puts_r+0x4e>
 800a126:	89a3      	ldrh	r3, [r4, #12]
 800a128:	059b      	lsls	r3, r3, #22
 800a12a:	d402      	bmi.n	800a132 <_puts_r+0x4e>
 800a12c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a12e:	f000 f98d 	bl	800a44c <__retarget_lock_release_recursive>
 800a132:	4628      	mov	r0, r5
 800a134:	bd70      	pop	{r4, r5, r6, pc}
 800a136:	2b00      	cmp	r3, #0
 800a138:	da04      	bge.n	800a144 <_puts_r+0x60>
 800a13a:	69a2      	ldr	r2, [r4, #24]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	dc17      	bgt.n	800a170 <_puts_r+0x8c>
 800a140:	290a      	cmp	r1, #10
 800a142:	d015      	beq.n	800a170 <_puts_r+0x8c>
 800a144:	6823      	ldr	r3, [r4, #0]
 800a146:	1c5a      	adds	r2, r3, #1
 800a148:	6022      	str	r2, [r4, #0]
 800a14a:	7019      	strb	r1, [r3, #0]
 800a14c:	68a3      	ldr	r3, [r4, #8]
 800a14e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a152:	3b01      	subs	r3, #1
 800a154:	60a3      	str	r3, [r4, #8]
 800a156:	2900      	cmp	r1, #0
 800a158:	d1ed      	bne.n	800a136 <_puts_r+0x52>
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	da11      	bge.n	800a182 <_puts_r+0x9e>
 800a15e:	4622      	mov	r2, r4
 800a160:	210a      	movs	r1, #10
 800a162:	4628      	mov	r0, r5
 800a164:	f000 f85f 	bl	800a226 <__swbuf_r>
 800a168:	3001      	adds	r0, #1
 800a16a:	d0d7      	beq.n	800a11c <_puts_r+0x38>
 800a16c:	250a      	movs	r5, #10
 800a16e:	e7d7      	b.n	800a120 <_puts_r+0x3c>
 800a170:	4622      	mov	r2, r4
 800a172:	4628      	mov	r0, r5
 800a174:	f000 f857 	bl	800a226 <__swbuf_r>
 800a178:	3001      	adds	r0, #1
 800a17a:	d1e7      	bne.n	800a14c <_puts_r+0x68>
 800a17c:	e7ce      	b.n	800a11c <_puts_r+0x38>
 800a17e:	3e01      	subs	r6, #1
 800a180:	e7e4      	b.n	800a14c <_puts_r+0x68>
 800a182:	6823      	ldr	r3, [r4, #0]
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	6022      	str	r2, [r4, #0]
 800a188:	220a      	movs	r2, #10
 800a18a:	701a      	strb	r2, [r3, #0]
 800a18c:	e7ee      	b.n	800a16c <_puts_r+0x88>
	...

0800a190 <puts>:
 800a190:	4b02      	ldr	r3, [pc, #8]	@ (800a19c <puts+0xc>)
 800a192:	4601      	mov	r1, r0
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	f7ff bfa5 	b.w	800a0e4 <_puts_r>
 800a19a:	bf00      	nop
 800a19c:	20000030 	.word	0x20000030

0800a1a0 <__sread>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a8:	f000 f900 	bl	800a3ac <_read_r>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	bfab      	itete	ge
 800a1b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a1b2:	89a3      	ldrhlt	r3, [r4, #12]
 800a1b4:	181b      	addge	r3, r3, r0
 800a1b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a1ba:	bfac      	ite	ge
 800a1bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a1be:	81a3      	strhlt	r3, [r4, #12]
 800a1c0:	bd10      	pop	{r4, pc}

0800a1c2 <__swrite>:
 800a1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c6:	461f      	mov	r7, r3
 800a1c8:	898b      	ldrh	r3, [r1, #12]
 800a1ca:	05db      	lsls	r3, r3, #23
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	4616      	mov	r6, r2
 800a1d2:	d505      	bpl.n	800a1e0 <__swrite+0x1e>
 800a1d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1d8:	2302      	movs	r3, #2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f000 f8d4 	bl	800a388 <_lseek_r>
 800a1e0:	89a3      	ldrh	r3, [r4, #12]
 800a1e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a1ea:	81a3      	strh	r3, [r4, #12]
 800a1ec:	4632      	mov	r2, r6
 800a1ee:	463b      	mov	r3, r7
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a1f6:	f000 b8eb 	b.w	800a3d0 <_write_r>

0800a1fa <__sseek>:
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a202:	f000 f8c1 	bl	800a388 <_lseek_r>
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	bf15      	itete	ne
 800a20c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a20e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a212:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a216:	81a3      	strheq	r3, [r4, #12]
 800a218:	bf18      	it	ne
 800a21a:	81a3      	strhne	r3, [r4, #12]
 800a21c:	bd10      	pop	{r4, pc}

0800a21e <__sclose>:
 800a21e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a222:	f000 b8a1 	b.w	800a368 <_close_r>

0800a226 <__swbuf_r>:
 800a226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a228:	460e      	mov	r6, r1
 800a22a:	4614      	mov	r4, r2
 800a22c:	4605      	mov	r5, r0
 800a22e:	b118      	cbz	r0, 800a238 <__swbuf_r+0x12>
 800a230:	6a03      	ldr	r3, [r0, #32]
 800a232:	b90b      	cbnz	r3, 800a238 <__swbuf_r+0x12>
 800a234:	f7ff ff0e 	bl	800a054 <__sinit>
 800a238:	69a3      	ldr	r3, [r4, #24]
 800a23a:	60a3      	str	r3, [r4, #8]
 800a23c:	89a3      	ldrh	r3, [r4, #12]
 800a23e:	071a      	lsls	r2, r3, #28
 800a240:	d501      	bpl.n	800a246 <__swbuf_r+0x20>
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	b943      	cbnz	r3, 800a258 <__swbuf_r+0x32>
 800a246:	4621      	mov	r1, r4
 800a248:	4628      	mov	r0, r5
 800a24a:	f000 f82b 	bl	800a2a4 <__swsetup_r>
 800a24e:	b118      	cbz	r0, 800a258 <__swbuf_r+0x32>
 800a250:	f04f 37ff 	mov.w	r7, #4294967295
 800a254:	4638      	mov	r0, r7
 800a256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	6922      	ldr	r2, [r4, #16]
 800a25c:	1a98      	subs	r0, r3, r2
 800a25e:	6963      	ldr	r3, [r4, #20]
 800a260:	b2f6      	uxtb	r6, r6
 800a262:	4283      	cmp	r3, r0
 800a264:	4637      	mov	r7, r6
 800a266:	dc05      	bgt.n	800a274 <__swbuf_r+0x4e>
 800a268:	4621      	mov	r1, r4
 800a26a:	4628      	mov	r0, r5
 800a26c:	f001 fd88 	bl	800bd80 <_fflush_r>
 800a270:	2800      	cmp	r0, #0
 800a272:	d1ed      	bne.n	800a250 <__swbuf_r+0x2a>
 800a274:	68a3      	ldr	r3, [r4, #8]
 800a276:	3b01      	subs	r3, #1
 800a278:	60a3      	str	r3, [r4, #8]
 800a27a:	6823      	ldr	r3, [r4, #0]
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	6022      	str	r2, [r4, #0]
 800a280:	701e      	strb	r6, [r3, #0]
 800a282:	6962      	ldr	r2, [r4, #20]
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	429a      	cmp	r2, r3
 800a288:	d004      	beq.n	800a294 <__swbuf_r+0x6e>
 800a28a:	89a3      	ldrh	r3, [r4, #12]
 800a28c:	07db      	lsls	r3, r3, #31
 800a28e:	d5e1      	bpl.n	800a254 <__swbuf_r+0x2e>
 800a290:	2e0a      	cmp	r6, #10
 800a292:	d1df      	bne.n	800a254 <__swbuf_r+0x2e>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f001 fd72 	bl	800bd80 <_fflush_r>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d0d9      	beq.n	800a254 <__swbuf_r+0x2e>
 800a2a0:	e7d6      	b.n	800a250 <__swbuf_r+0x2a>
	...

0800a2a4 <__swsetup_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	4b29      	ldr	r3, [pc, #164]	@ (800a34c <__swsetup_r+0xa8>)
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	b118      	cbz	r0, 800a2b8 <__swsetup_r+0x14>
 800a2b0:	6a03      	ldr	r3, [r0, #32]
 800a2b2:	b90b      	cbnz	r3, 800a2b8 <__swsetup_r+0x14>
 800a2b4:	f7ff fece 	bl	800a054 <__sinit>
 800a2b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2bc:	0719      	lsls	r1, r3, #28
 800a2be:	d422      	bmi.n	800a306 <__swsetup_r+0x62>
 800a2c0:	06da      	lsls	r2, r3, #27
 800a2c2:	d407      	bmi.n	800a2d4 <__swsetup_r+0x30>
 800a2c4:	2209      	movs	r2, #9
 800a2c6:	602a      	str	r2, [r5, #0]
 800a2c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2cc:	81a3      	strh	r3, [r4, #12]
 800a2ce:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d2:	e033      	b.n	800a33c <__swsetup_r+0x98>
 800a2d4:	0758      	lsls	r0, r3, #29
 800a2d6:	d512      	bpl.n	800a2fe <__swsetup_r+0x5a>
 800a2d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2da:	b141      	cbz	r1, 800a2ee <__swsetup_r+0x4a>
 800a2dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d002      	beq.n	800a2ea <__swsetup_r+0x46>
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 ff0b 	bl	800b100 <_free_r>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	f043 0308 	orr.w	r3, r3, #8
 800a304:	81a3      	strh	r3, [r4, #12]
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	b94b      	cbnz	r3, 800a31e <__swsetup_r+0x7a>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a314:	d003      	beq.n	800a31e <__swsetup_r+0x7a>
 800a316:	4621      	mov	r1, r4
 800a318:	4628      	mov	r0, r5
 800a31a:	f001 fd7f 	bl	800be1c <__smakebuf_r>
 800a31e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a322:	f013 0201 	ands.w	r2, r3, #1
 800a326:	d00a      	beq.n	800a33e <__swsetup_r+0x9a>
 800a328:	2200      	movs	r2, #0
 800a32a:	60a2      	str	r2, [r4, #8]
 800a32c:	6962      	ldr	r2, [r4, #20]
 800a32e:	4252      	negs	r2, r2
 800a330:	61a2      	str	r2, [r4, #24]
 800a332:	6922      	ldr	r2, [r4, #16]
 800a334:	b942      	cbnz	r2, 800a348 <__swsetup_r+0xa4>
 800a336:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a33a:	d1c5      	bne.n	800a2c8 <__swsetup_r+0x24>
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	0799      	lsls	r1, r3, #30
 800a340:	bf58      	it	pl
 800a342:	6962      	ldrpl	r2, [r4, #20]
 800a344:	60a2      	str	r2, [r4, #8]
 800a346:	e7f4      	b.n	800a332 <__swsetup_r+0x8e>
 800a348:	2000      	movs	r0, #0
 800a34a:	e7f7      	b.n	800a33c <__swsetup_r+0x98>
 800a34c:	20000030 	.word	0x20000030

0800a350 <memset>:
 800a350:	4402      	add	r2, r0
 800a352:	4603      	mov	r3, r0
 800a354:	4293      	cmp	r3, r2
 800a356:	d100      	bne.n	800a35a <memset+0xa>
 800a358:	4770      	bx	lr
 800a35a:	f803 1b01 	strb.w	r1, [r3], #1
 800a35e:	e7f9      	b.n	800a354 <memset+0x4>

0800a360 <_localeconv_r>:
 800a360:	4800      	ldr	r0, [pc, #0]	@ (800a364 <_localeconv_r+0x4>)
 800a362:	4770      	bx	lr
 800a364:	20000170 	.word	0x20000170

0800a368 <_close_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d06      	ldr	r5, [pc, #24]	@ (800a384 <_close_r+0x1c>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f9 fdfa 	bl	8003f6c <_close>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_close_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_close_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	20000838 	.word	0x20000838

0800a388 <_lseek_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	@ (800a3a8 <_lseek_r+0x20>)
 800a38c:	4604      	mov	r4, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	602a      	str	r2, [r5, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f9 fe0f 	bl	8003fba <_lseek>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_lseek_r+0x1e>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_lseek_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	20000838 	.word	0x20000838

0800a3ac <_read_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	@ (800a3cc <_read_r+0x20>)
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7f9 fdb9 	bl	8003f32 <_read>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_read_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_read_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	20000838 	.word	0x20000838

0800a3d0 <_write_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	@ (800a3f0 <_write_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f9 fa48 	bl	8003874 <_write>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_write_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_write_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	20000838 	.word	0x20000838

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	@ (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000030 	.word	0x20000030

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	@ (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	@ (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	@ (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	@ (800a444 <__libc_init_array+0x44>)
 800a414:	f001 fe2e 	bl	800c074 <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	0800ca24 	.word	0x0800ca24
 800a43c:	0800ca24 	.word	0x0800ca24
 800a440:	0800ca24 	.word	0x0800ca24
 800a444:	0800ca2c 	.word	0x0800ca2c

0800a448 <__retarget_lock_init_recursive>:
 800a448:	4770      	bx	lr

0800a44a <__retarget_lock_acquire_recursive>:
 800a44a:	4770      	bx	lr

0800a44c <__retarget_lock_release_recursive>:
 800a44c:	4770      	bx	lr

0800a44e <quorem>:
 800a44e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a452:	6903      	ldr	r3, [r0, #16]
 800a454:	690c      	ldr	r4, [r1, #16]
 800a456:	42a3      	cmp	r3, r4
 800a458:	4607      	mov	r7, r0
 800a45a:	db7e      	blt.n	800a55a <quorem+0x10c>
 800a45c:	3c01      	subs	r4, #1
 800a45e:	f101 0814 	add.w	r8, r1, #20
 800a462:	00a3      	lsls	r3, r4, #2
 800a464:	f100 0514 	add.w	r5, r0, #20
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a474:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a478:	3301      	adds	r3, #1
 800a47a:	429a      	cmp	r2, r3
 800a47c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a480:	fbb2 f6f3 	udiv	r6, r2, r3
 800a484:	d32e      	bcc.n	800a4e4 <quorem+0x96>
 800a486:	f04f 0a00 	mov.w	sl, #0
 800a48a:	46c4      	mov	ip, r8
 800a48c:	46ae      	mov	lr, r5
 800a48e:	46d3      	mov	fp, sl
 800a490:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a494:	b298      	uxth	r0, r3
 800a496:	fb06 a000 	mla	r0, r6, r0, sl
 800a49a:	0c02      	lsrs	r2, r0, #16
 800a49c:	0c1b      	lsrs	r3, r3, #16
 800a49e:	fb06 2303 	mla	r3, r6, r3, r2
 800a4a2:	f8de 2000 	ldr.w	r2, [lr]
 800a4a6:	b280      	uxth	r0, r0
 800a4a8:	b292      	uxth	r2, r2
 800a4aa:	1a12      	subs	r2, r2, r0
 800a4ac:	445a      	add	r2, fp
 800a4ae:	f8de 0000 	ldr.w	r0, [lr]
 800a4b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4b6:	b29b      	uxth	r3, r3
 800a4b8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a4bc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a4c0:	b292      	uxth	r2, r2
 800a4c2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a4c6:	45e1      	cmp	r9, ip
 800a4c8:	f84e 2b04 	str.w	r2, [lr], #4
 800a4cc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a4d0:	d2de      	bcs.n	800a490 <quorem+0x42>
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	58eb      	ldr	r3, [r5, r3]
 800a4d6:	b92b      	cbnz	r3, 800a4e4 <quorem+0x96>
 800a4d8:	9b01      	ldr	r3, [sp, #4]
 800a4da:	3b04      	subs	r3, #4
 800a4dc:	429d      	cmp	r5, r3
 800a4de:	461a      	mov	r2, r3
 800a4e0:	d32f      	bcc.n	800a542 <quorem+0xf4>
 800a4e2:	613c      	str	r4, [r7, #16]
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f001 f97d 	bl	800b7e4 <__mcmp>
 800a4ea:	2800      	cmp	r0, #0
 800a4ec:	db25      	blt.n	800a53a <quorem+0xec>
 800a4ee:	4629      	mov	r1, r5
 800a4f0:	2000      	movs	r0, #0
 800a4f2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a4f6:	f8d1 c000 	ldr.w	ip, [r1]
 800a4fa:	fa1f fe82 	uxth.w	lr, r2
 800a4fe:	fa1f f38c 	uxth.w	r3, ip
 800a502:	eba3 030e 	sub.w	r3, r3, lr
 800a506:	4403      	add	r3, r0
 800a508:	0c12      	lsrs	r2, r2, #16
 800a50a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a50e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a512:	b29b      	uxth	r3, r3
 800a514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a518:	45c1      	cmp	r9, r8
 800a51a:	f841 3b04 	str.w	r3, [r1], #4
 800a51e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a522:	d2e6      	bcs.n	800a4f2 <quorem+0xa4>
 800a524:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a528:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a52c:	b922      	cbnz	r2, 800a538 <quorem+0xea>
 800a52e:	3b04      	subs	r3, #4
 800a530:	429d      	cmp	r5, r3
 800a532:	461a      	mov	r2, r3
 800a534:	d30b      	bcc.n	800a54e <quorem+0x100>
 800a536:	613c      	str	r4, [r7, #16]
 800a538:	3601      	adds	r6, #1
 800a53a:	4630      	mov	r0, r6
 800a53c:	b003      	add	sp, #12
 800a53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	3b04      	subs	r3, #4
 800a546:	2a00      	cmp	r2, #0
 800a548:	d1cb      	bne.n	800a4e2 <quorem+0x94>
 800a54a:	3c01      	subs	r4, #1
 800a54c:	e7c6      	b.n	800a4dc <quorem+0x8e>
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	3b04      	subs	r3, #4
 800a552:	2a00      	cmp	r2, #0
 800a554:	d1ef      	bne.n	800a536 <quorem+0xe8>
 800a556:	3c01      	subs	r4, #1
 800a558:	e7ea      	b.n	800a530 <quorem+0xe2>
 800a55a:	2000      	movs	r0, #0
 800a55c:	e7ee      	b.n	800a53c <quorem+0xee>
	...

0800a560 <_dtoa_r>:
 800a560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a564:	69c7      	ldr	r7, [r0, #28]
 800a566:	b097      	sub	sp, #92	@ 0x5c
 800a568:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a56c:	ec55 4b10 	vmov	r4, r5, d0
 800a570:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a572:	9107      	str	r1, [sp, #28]
 800a574:	4681      	mov	r9, r0
 800a576:	920c      	str	r2, [sp, #48]	@ 0x30
 800a578:	9311      	str	r3, [sp, #68]	@ 0x44
 800a57a:	b97f      	cbnz	r7, 800a59c <_dtoa_r+0x3c>
 800a57c:	2010      	movs	r0, #16
 800a57e:	f000 fe09 	bl	800b194 <malloc>
 800a582:	4602      	mov	r2, r0
 800a584:	f8c9 001c 	str.w	r0, [r9, #28]
 800a588:	b920      	cbnz	r0, 800a594 <_dtoa_r+0x34>
 800a58a:	4ba9      	ldr	r3, [pc, #676]	@ (800a830 <_dtoa_r+0x2d0>)
 800a58c:	21ef      	movs	r1, #239	@ 0xef
 800a58e:	48a9      	ldr	r0, [pc, #676]	@ (800a834 <_dtoa_r+0x2d4>)
 800a590:	f001 fcc0 	bl	800bf14 <__assert_func>
 800a594:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a598:	6007      	str	r7, [r0, #0]
 800a59a:	60c7      	str	r7, [r0, #12]
 800a59c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5a0:	6819      	ldr	r1, [r3, #0]
 800a5a2:	b159      	cbz	r1, 800a5bc <_dtoa_r+0x5c>
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	604a      	str	r2, [r1, #4]
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	4093      	lsls	r3, r2
 800a5ac:	608b      	str	r3, [r1, #8]
 800a5ae:	4648      	mov	r0, r9
 800a5b0:	f000 fee6 	bl	800b380 <_Bfree>
 800a5b4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	1e2b      	subs	r3, r5, #0
 800a5be:	bfb9      	ittee	lt
 800a5c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a5c4:	9305      	strlt	r3, [sp, #20]
 800a5c6:	2300      	movge	r3, #0
 800a5c8:	6033      	strge	r3, [r6, #0]
 800a5ca:	9f05      	ldr	r7, [sp, #20]
 800a5cc:	4b9a      	ldr	r3, [pc, #616]	@ (800a838 <_dtoa_r+0x2d8>)
 800a5ce:	bfbc      	itt	lt
 800a5d0:	2201      	movlt	r2, #1
 800a5d2:	6032      	strlt	r2, [r6, #0]
 800a5d4:	43bb      	bics	r3, r7
 800a5d6:	d112      	bne.n	800a5fe <_dtoa_r+0x9e>
 800a5d8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a5da:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a5de:	6013      	str	r3, [r2, #0]
 800a5e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a5e4:	4323      	orrs	r3, r4
 800a5e6:	f000 855a 	beq.w	800b09e <_dtoa_r+0xb3e>
 800a5ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5ec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a84c <_dtoa_r+0x2ec>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f000 855c 	beq.w	800b0ae <_dtoa_r+0xb4e>
 800a5f6:	f10a 0303 	add.w	r3, sl, #3
 800a5fa:	f000 bd56 	b.w	800b0aa <_dtoa_r+0xb4a>
 800a5fe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a602:	2200      	movs	r2, #0
 800a604:	ec51 0b17 	vmov	r0, r1, d7
 800a608:	2300      	movs	r3, #0
 800a60a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a60e:	f7f6 fa63 	bl	8000ad8 <__aeabi_dcmpeq>
 800a612:	4680      	mov	r8, r0
 800a614:	b158      	cbz	r0, 800a62e <_dtoa_r+0xce>
 800a616:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a618:	2301      	movs	r3, #1
 800a61a:	6013      	str	r3, [r2, #0]
 800a61c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a61e:	b113      	cbz	r3, 800a626 <_dtoa_r+0xc6>
 800a620:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a622:	4b86      	ldr	r3, [pc, #536]	@ (800a83c <_dtoa_r+0x2dc>)
 800a624:	6013      	str	r3, [r2, #0]
 800a626:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a850 <_dtoa_r+0x2f0>
 800a62a:	f000 bd40 	b.w	800b0ae <_dtoa_r+0xb4e>
 800a62e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a632:	aa14      	add	r2, sp, #80	@ 0x50
 800a634:	a915      	add	r1, sp, #84	@ 0x54
 800a636:	4648      	mov	r0, r9
 800a638:	f001 f984 	bl	800b944 <__d2b>
 800a63c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a640:	9002      	str	r0, [sp, #8]
 800a642:	2e00      	cmp	r6, #0
 800a644:	d078      	beq.n	800a738 <_dtoa_r+0x1d8>
 800a646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a648:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a64c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a650:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a654:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a658:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a65c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a660:	4619      	mov	r1, r3
 800a662:	2200      	movs	r2, #0
 800a664:	4b76      	ldr	r3, [pc, #472]	@ (800a840 <_dtoa_r+0x2e0>)
 800a666:	f7f5 fe17 	bl	8000298 <__aeabi_dsub>
 800a66a:	a36b      	add	r3, pc, #428	@ (adr r3, 800a818 <_dtoa_r+0x2b8>)
 800a66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a670:	f7f5 ffca 	bl	8000608 <__aeabi_dmul>
 800a674:	a36a      	add	r3, pc, #424	@ (adr r3, 800a820 <_dtoa_r+0x2c0>)
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	f7f5 fe0f 	bl	800029c <__adddf3>
 800a67e:	4604      	mov	r4, r0
 800a680:	4630      	mov	r0, r6
 800a682:	460d      	mov	r5, r1
 800a684:	f7f5 ff56 	bl	8000534 <__aeabi_i2d>
 800a688:	a367      	add	r3, pc, #412	@ (adr r3, 800a828 <_dtoa_r+0x2c8>)
 800a68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68e:	f7f5 ffbb 	bl	8000608 <__aeabi_dmul>
 800a692:	4602      	mov	r2, r0
 800a694:	460b      	mov	r3, r1
 800a696:	4620      	mov	r0, r4
 800a698:	4629      	mov	r1, r5
 800a69a:	f7f5 fdff 	bl	800029c <__adddf3>
 800a69e:	4604      	mov	r4, r0
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	f7f6 fa61 	bl	8000b68 <__aeabi_d2iz>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	4607      	mov	r7, r0
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	f7f6 fa1c 	bl	8000aec <__aeabi_dcmplt>
 800a6b4:	b140      	cbz	r0, 800a6c8 <_dtoa_r+0x168>
 800a6b6:	4638      	mov	r0, r7
 800a6b8:	f7f5 ff3c 	bl	8000534 <__aeabi_i2d>
 800a6bc:	4622      	mov	r2, r4
 800a6be:	462b      	mov	r3, r5
 800a6c0:	f7f6 fa0a 	bl	8000ad8 <__aeabi_dcmpeq>
 800a6c4:	b900      	cbnz	r0, 800a6c8 <_dtoa_r+0x168>
 800a6c6:	3f01      	subs	r7, #1
 800a6c8:	2f16      	cmp	r7, #22
 800a6ca:	d852      	bhi.n	800a772 <_dtoa_r+0x212>
 800a6cc:	4b5d      	ldr	r3, [pc, #372]	@ (800a844 <_dtoa_r+0x2e4>)
 800a6ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a6da:	f7f6 fa07 	bl	8000aec <__aeabi_dcmplt>
 800a6de:	2800      	cmp	r0, #0
 800a6e0:	d049      	beq.n	800a776 <_dtoa_r+0x216>
 800a6e2:	3f01      	subs	r7, #1
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a6ea:	1b9b      	subs	r3, r3, r6
 800a6ec:	1e5a      	subs	r2, r3, #1
 800a6ee:	bf45      	ittet	mi
 800a6f0:	f1c3 0301 	rsbmi	r3, r3, #1
 800a6f4:	9300      	strmi	r3, [sp, #0]
 800a6f6:	2300      	movpl	r3, #0
 800a6f8:	2300      	movmi	r3, #0
 800a6fa:	9206      	str	r2, [sp, #24]
 800a6fc:	bf54      	ite	pl
 800a6fe:	9300      	strpl	r3, [sp, #0]
 800a700:	9306      	strmi	r3, [sp, #24]
 800a702:	2f00      	cmp	r7, #0
 800a704:	db39      	blt.n	800a77a <_dtoa_r+0x21a>
 800a706:	9b06      	ldr	r3, [sp, #24]
 800a708:	970d      	str	r7, [sp, #52]	@ 0x34
 800a70a:	443b      	add	r3, r7
 800a70c:	9306      	str	r3, [sp, #24]
 800a70e:	2300      	movs	r3, #0
 800a710:	9308      	str	r3, [sp, #32]
 800a712:	9b07      	ldr	r3, [sp, #28]
 800a714:	2b09      	cmp	r3, #9
 800a716:	d863      	bhi.n	800a7e0 <_dtoa_r+0x280>
 800a718:	2b05      	cmp	r3, #5
 800a71a:	bfc4      	itt	gt
 800a71c:	3b04      	subgt	r3, #4
 800a71e:	9307      	strgt	r3, [sp, #28]
 800a720:	9b07      	ldr	r3, [sp, #28]
 800a722:	f1a3 0302 	sub.w	r3, r3, #2
 800a726:	bfcc      	ite	gt
 800a728:	2400      	movgt	r4, #0
 800a72a:	2401      	movle	r4, #1
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d863      	bhi.n	800a7f8 <_dtoa_r+0x298>
 800a730:	e8df f003 	tbb	[pc, r3]
 800a734:	2b375452 	.word	0x2b375452
 800a738:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a73c:	441e      	add	r6, r3
 800a73e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a742:	2b20      	cmp	r3, #32
 800a744:	bfc1      	itttt	gt
 800a746:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a74a:	409f      	lslgt	r7, r3
 800a74c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a750:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a754:	bfd6      	itet	le
 800a756:	f1c3 0320 	rsble	r3, r3, #32
 800a75a:	ea47 0003 	orrgt.w	r0, r7, r3
 800a75e:	fa04 f003 	lslle.w	r0, r4, r3
 800a762:	f7f5 fed7 	bl	8000514 <__aeabi_ui2d>
 800a766:	2201      	movs	r2, #1
 800a768:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a76c:	3e01      	subs	r6, #1
 800a76e:	9212      	str	r2, [sp, #72]	@ 0x48
 800a770:	e776      	b.n	800a660 <_dtoa_r+0x100>
 800a772:	2301      	movs	r3, #1
 800a774:	e7b7      	b.n	800a6e6 <_dtoa_r+0x186>
 800a776:	9010      	str	r0, [sp, #64]	@ 0x40
 800a778:	e7b6      	b.n	800a6e8 <_dtoa_r+0x188>
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	1bdb      	subs	r3, r3, r7
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	427b      	negs	r3, r7
 800a782:	9308      	str	r3, [sp, #32]
 800a784:	2300      	movs	r3, #0
 800a786:	930d      	str	r3, [sp, #52]	@ 0x34
 800a788:	e7c3      	b.n	800a712 <_dtoa_r+0x1b2>
 800a78a:	2301      	movs	r3, #1
 800a78c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a78e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a790:	eb07 0b03 	add.w	fp, r7, r3
 800a794:	f10b 0301 	add.w	r3, fp, #1
 800a798:	2b01      	cmp	r3, #1
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	bfb8      	it	lt
 800a79e:	2301      	movlt	r3, #1
 800a7a0:	e006      	b.n	800a7b0 <_dtoa_r+0x250>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dd28      	ble.n	800a7fe <_dtoa_r+0x29e>
 800a7ac:	469b      	mov	fp, r3
 800a7ae:	9303      	str	r3, [sp, #12]
 800a7b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	2204      	movs	r2, #4
 800a7b8:	f102 0514 	add.w	r5, r2, #20
 800a7bc:	429d      	cmp	r5, r3
 800a7be:	d926      	bls.n	800a80e <_dtoa_r+0x2ae>
 800a7c0:	6041      	str	r1, [r0, #4]
 800a7c2:	4648      	mov	r0, r9
 800a7c4:	f000 fd9c 	bl	800b300 <_Balloc>
 800a7c8:	4682      	mov	sl, r0
 800a7ca:	2800      	cmp	r0, #0
 800a7cc:	d142      	bne.n	800a854 <_dtoa_r+0x2f4>
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	@ (800a848 <_dtoa_r+0x2e8>)
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	f240 11af 	movw	r1, #431	@ 0x1af
 800a7d6:	e6da      	b.n	800a58e <_dtoa_r+0x2e>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	e7e3      	b.n	800a7a4 <_dtoa_r+0x244>
 800a7dc:	2300      	movs	r3, #0
 800a7de:	e7d5      	b.n	800a78c <_dtoa_r+0x22c>
 800a7e0:	2401      	movs	r4, #1
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9307      	str	r3, [sp, #28]
 800a7e6:	9409      	str	r4, [sp, #36]	@ 0x24
 800a7e8:	f04f 3bff 	mov.w	fp, #4294967295
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f8cd b00c 	str.w	fp, [sp, #12]
 800a7f2:	2312      	movs	r3, #18
 800a7f4:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7f6:	e7db      	b.n	800a7b0 <_dtoa_r+0x250>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7fc:	e7f4      	b.n	800a7e8 <_dtoa_r+0x288>
 800a7fe:	f04f 0b01 	mov.w	fp, #1
 800a802:	f8cd b00c 	str.w	fp, [sp, #12]
 800a806:	465b      	mov	r3, fp
 800a808:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a80c:	e7d0      	b.n	800a7b0 <_dtoa_r+0x250>
 800a80e:	3101      	adds	r1, #1
 800a810:	0052      	lsls	r2, r2, #1
 800a812:	e7d1      	b.n	800a7b8 <_dtoa_r+0x258>
 800a814:	f3af 8000 	nop.w
 800a818:	636f4361 	.word	0x636f4361
 800a81c:	3fd287a7 	.word	0x3fd287a7
 800a820:	8b60c8b3 	.word	0x8b60c8b3
 800a824:	3fc68a28 	.word	0x3fc68a28
 800a828:	509f79fb 	.word	0x509f79fb
 800a82c:	3fd34413 	.word	0x3fd34413
 800a830:	0800c6e5 	.word	0x0800c6e5
 800a834:	0800c6fc 	.word	0x0800c6fc
 800a838:	7ff00000 	.word	0x7ff00000
 800a83c:	0800c6b5 	.word	0x0800c6b5
 800a840:	3ff80000 	.word	0x3ff80000
 800a844:	0800c850 	.word	0x0800c850
 800a848:	0800c754 	.word	0x0800c754
 800a84c:	0800c6e1 	.word	0x0800c6e1
 800a850:	0800c6b4 	.word	0x0800c6b4
 800a854:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a858:	6018      	str	r0, [r3, #0]
 800a85a:	9b03      	ldr	r3, [sp, #12]
 800a85c:	2b0e      	cmp	r3, #14
 800a85e:	f200 80a1 	bhi.w	800a9a4 <_dtoa_r+0x444>
 800a862:	2c00      	cmp	r4, #0
 800a864:	f000 809e 	beq.w	800a9a4 <_dtoa_r+0x444>
 800a868:	2f00      	cmp	r7, #0
 800a86a:	dd33      	ble.n	800a8d4 <_dtoa_r+0x374>
 800a86c:	4b9c      	ldr	r3, [pc, #624]	@ (800aae0 <_dtoa_r+0x580>)
 800a86e:	f007 020f 	and.w	r2, r7, #15
 800a872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a876:	ed93 7b00 	vldr	d7, [r3]
 800a87a:	05f8      	lsls	r0, r7, #23
 800a87c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a880:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a884:	d516      	bpl.n	800a8b4 <_dtoa_r+0x354>
 800a886:	4b97      	ldr	r3, [pc, #604]	@ (800aae4 <_dtoa_r+0x584>)
 800a888:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a88c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a890:	f7f5 ffe4 	bl	800085c <__aeabi_ddiv>
 800a894:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a898:	f004 040f 	and.w	r4, r4, #15
 800a89c:	2603      	movs	r6, #3
 800a89e:	4d91      	ldr	r5, [pc, #580]	@ (800aae4 <_dtoa_r+0x584>)
 800a8a0:	b954      	cbnz	r4, 800a8b8 <_dtoa_r+0x358>
 800a8a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a8a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8aa:	f7f5 ffd7 	bl	800085c <__aeabi_ddiv>
 800a8ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8b2:	e028      	b.n	800a906 <_dtoa_r+0x3a6>
 800a8b4:	2602      	movs	r6, #2
 800a8b6:	e7f2      	b.n	800a89e <_dtoa_r+0x33e>
 800a8b8:	07e1      	lsls	r1, r4, #31
 800a8ba:	d508      	bpl.n	800a8ce <_dtoa_r+0x36e>
 800a8bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a8c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a8c4:	f7f5 fea0 	bl	8000608 <__aeabi_dmul>
 800a8c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a8cc:	3601      	adds	r6, #1
 800a8ce:	1064      	asrs	r4, r4, #1
 800a8d0:	3508      	adds	r5, #8
 800a8d2:	e7e5      	b.n	800a8a0 <_dtoa_r+0x340>
 800a8d4:	f000 80af 	beq.w	800aa36 <_dtoa_r+0x4d6>
 800a8d8:	427c      	negs	r4, r7
 800a8da:	4b81      	ldr	r3, [pc, #516]	@ (800aae0 <_dtoa_r+0x580>)
 800a8dc:	4d81      	ldr	r5, [pc, #516]	@ (800aae4 <_dtoa_r+0x584>)
 800a8de:	f004 020f 	and.w	r2, r4, #15
 800a8e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a8ee:	f7f5 fe8b 	bl	8000608 <__aeabi_dmul>
 800a8f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8f6:	1124      	asrs	r4, r4, #4
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2602      	movs	r6, #2
 800a8fc:	2c00      	cmp	r4, #0
 800a8fe:	f040 808f 	bne.w	800aa20 <_dtoa_r+0x4c0>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1d3      	bne.n	800a8ae <_dtoa_r+0x34e>
 800a906:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a908:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	f000 8094 	beq.w	800aa3a <_dtoa_r+0x4da>
 800a912:	4b75      	ldr	r3, [pc, #468]	@ (800aae8 <_dtoa_r+0x588>)
 800a914:	2200      	movs	r2, #0
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f6 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f000 808b 	beq.w	800aa3a <_dtoa_r+0x4da>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f000 8087 	beq.w	800aa3a <_dtoa_r+0x4da>
 800a92c:	f1bb 0f00 	cmp.w	fp, #0
 800a930:	dd34      	ble.n	800a99c <_dtoa_r+0x43c>
 800a932:	4620      	mov	r0, r4
 800a934:	4b6d      	ldr	r3, [pc, #436]	@ (800aaec <_dtoa_r+0x58c>)
 800a936:	2200      	movs	r2, #0
 800a938:	4629      	mov	r1, r5
 800a93a:	f7f5 fe65 	bl	8000608 <__aeabi_dmul>
 800a93e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a942:	f107 38ff 	add.w	r8, r7, #4294967295
 800a946:	3601      	adds	r6, #1
 800a948:	465c      	mov	r4, fp
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7f5 fdf2 	bl	8000534 <__aeabi_i2d>
 800a950:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a954:	f7f5 fe58 	bl	8000608 <__aeabi_dmul>
 800a958:	4b65      	ldr	r3, [pc, #404]	@ (800aaf0 <_dtoa_r+0x590>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7f5 fc9e 	bl	800029c <__adddf3>
 800a960:	4605      	mov	r5, r0
 800a962:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a966:	2c00      	cmp	r4, #0
 800a968:	d16a      	bne.n	800aa40 <_dtoa_r+0x4e0>
 800a96a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a96e:	4b61      	ldr	r3, [pc, #388]	@ (800aaf4 <_dtoa_r+0x594>)
 800a970:	2200      	movs	r2, #0
 800a972:	f7f5 fc91 	bl	8000298 <__aeabi_dsub>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a97e:	462a      	mov	r2, r5
 800a980:	4633      	mov	r3, r6
 800a982:	f7f6 f8d1 	bl	8000b28 <__aeabi_dcmpgt>
 800a986:	2800      	cmp	r0, #0
 800a988:	f040 8298 	bne.w	800aebc <_dtoa_r+0x95c>
 800a98c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a990:	462a      	mov	r2, r5
 800a992:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a996:	f7f6 f8a9 	bl	8000aec <__aeabi_dcmplt>
 800a99a:	bb38      	cbnz	r0, 800a9ec <_dtoa_r+0x48c>
 800a99c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a9a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a9a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f2c0 8157 	blt.w	800ac5a <_dtoa_r+0x6fa>
 800a9ac:	2f0e      	cmp	r7, #14
 800a9ae:	f300 8154 	bgt.w	800ac5a <_dtoa_r+0x6fa>
 800a9b2:	4b4b      	ldr	r3, [pc, #300]	@ (800aae0 <_dtoa_r+0x580>)
 800a9b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a9b8:	ed93 7b00 	vldr	d7, [r3]
 800a9bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	ed8d 7b00 	vstr	d7, [sp]
 800a9c4:	f280 80e5 	bge.w	800ab92 <_dtoa_r+0x632>
 800a9c8:	9b03      	ldr	r3, [sp, #12]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	f300 80e1 	bgt.w	800ab92 <_dtoa_r+0x632>
 800a9d0:	d10c      	bne.n	800a9ec <_dtoa_r+0x48c>
 800a9d2:	4b48      	ldr	r3, [pc, #288]	@ (800aaf4 <_dtoa_r+0x594>)
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	ec51 0b17 	vmov	r0, r1, d7
 800a9da:	f7f5 fe15 	bl	8000608 <__aeabi_dmul>
 800a9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9e2:	f7f6 f897 	bl	8000b14 <__aeabi_dcmpge>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f000 8266 	beq.w	800aeb8 <_dtoa_r+0x958>
 800a9ec:	2400      	movs	r4, #0
 800a9ee:	4625      	mov	r5, r4
 800a9f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9f2:	4656      	mov	r6, sl
 800a9f4:	ea6f 0803 	mvn.w	r8, r3
 800a9f8:	2700      	movs	r7, #0
 800a9fa:	4621      	mov	r1, r4
 800a9fc:	4648      	mov	r0, r9
 800a9fe:	f000 fcbf 	bl	800b380 <_Bfree>
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	f000 80bd 	beq.w	800ab82 <_dtoa_r+0x622>
 800aa08:	b12f      	cbz	r7, 800aa16 <_dtoa_r+0x4b6>
 800aa0a:	42af      	cmp	r7, r5
 800aa0c:	d003      	beq.n	800aa16 <_dtoa_r+0x4b6>
 800aa0e:	4639      	mov	r1, r7
 800aa10:	4648      	mov	r0, r9
 800aa12:	f000 fcb5 	bl	800b380 <_Bfree>
 800aa16:	4629      	mov	r1, r5
 800aa18:	4648      	mov	r0, r9
 800aa1a:	f000 fcb1 	bl	800b380 <_Bfree>
 800aa1e:	e0b0      	b.n	800ab82 <_dtoa_r+0x622>
 800aa20:	07e2      	lsls	r2, r4, #31
 800aa22:	d505      	bpl.n	800aa30 <_dtoa_r+0x4d0>
 800aa24:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa28:	f7f5 fdee 	bl	8000608 <__aeabi_dmul>
 800aa2c:	3601      	adds	r6, #1
 800aa2e:	2301      	movs	r3, #1
 800aa30:	1064      	asrs	r4, r4, #1
 800aa32:	3508      	adds	r5, #8
 800aa34:	e762      	b.n	800a8fc <_dtoa_r+0x39c>
 800aa36:	2602      	movs	r6, #2
 800aa38:	e765      	b.n	800a906 <_dtoa_r+0x3a6>
 800aa3a:	9c03      	ldr	r4, [sp, #12]
 800aa3c:	46b8      	mov	r8, r7
 800aa3e:	e784      	b.n	800a94a <_dtoa_r+0x3ea>
 800aa40:	4b27      	ldr	r3, [pc, #156]	@ (800aae0 <_dtoa_r+0x580>)
 800aa42:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aa48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aa4c:	4454      	add	r4, sl
 800aa4e:	2900      	cmp	r1, #0
 800aa50:	d054      	beq.n	800aafc <_dtoa_r+0x59c>
 800aa52:	4929      	ldr	r1, [pc, #164]	@ (800aaf8 <_dtoa_r+0x598>)
 800aa54:	2000      	movs	r0, #0
 800aa56:	f7f5 ff01 	bl	800085c <__aeabi_ddiv>
 800aa5a:	4633      	mov	r3, r6
 800aa5c:	462a      	mov	r2, r5
 800aa5e:	f7f5 fc1b 	bl	8000298 <__aeabi_dsub>
 800aa62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa66:	4656      	mov	r6, sl
 800aa68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa6c:	f7f6 f87c 	bl	8000b68 <__aeabi_d2iz>
 800aa70:	4605      	mov	r5, r0
 800aa72:	f7f5 fd5f 	bl	8000534 <__aeabi_i2d>
 800aa76:	4602      	mov	r2, r0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa7e:	f7f5 fc0b 	bl	8000298 <__aeabi_dsub>
 800aa82:	3530      	adds	r5, #48	@ 0x30
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa8c:	f806 5b01 	strb.w	r5, [r6], #1
 800aa90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa94:	f7f6 f82a 	bl	8000aec <__aeabi_dcmplt>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d172      	bne.n	800ab82 <_dtoa_r+0x622>
 800aa9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aaa0:	4911      	ldr	r1, [pc, #68]	@ (800aae8 <_dtoa_r+0x588>)
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	f7f5 fbf8 	bl	8000298 <__aeabi_dsub>
 800aaa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aaac:	f7f6 f81e 	bl	8000aec <__aeabi_dcmplt>
 800aab0:	2800      	cmp	r0, #0
 800aab2:	f040 80b4 	bne.w	800ac1e <_dtoa_r+0x6be>
 800aab6:	42a6      	cmp	r6, r4
 800aab8:	f43f af70 	beq.w	800a99c <_dtoa_r+0x43c>
 800aabc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aac0:	4b0a      	ldr	r3, [pc, #40]	@ (800aaec <_dtoa_r+0x58c>)
 800aac2:	2200      	movs	r2, #0
 800aac4:	f7f5 fda0 	bl	8000608 <__aeabi_dmul>
 800aac8:	4b08      	ldr	r3, [pc, #32]	@ (800aaec <_dtoa_r+0x58c>)
 800aaca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aace:	2200      	movs	r2, #0
 800aad0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aad4:	f7f5 fd98 	bl	8000608 <__aeabi_dmul>
 800aad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aadc:	e7c4      	b.n	800aa68 <_dtoa_r+0x508>
 800aade:	bf00      	nop
 800aae0:	0800c850 	.word	0x0800c850
 800aae4:	0800c828 	.word	0x0800c828
 800aae8:	3ff00000 	.word	0x3ff00000
 800aaec:	40240000 	.word	0x40240000
 800aaf0:	401c0000 	.word	0x401c0000
 800aaf4:	40140000 	.word	0x40140000
 800aaf8:	3fe00000 	.word	0x3fe00000
 800aafc:	4631      	mov	r1, r6
 800aafe:	4628      	mov	r0, r5
 800ab00:	f7f5 fd82 	bl	8000608 <__aeabi_dmul>
 800ab04:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab08:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ab0a:	4656      	mov	r6, sl
 800ab0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab10:	f7f6 f82a 	bl	8000b68 <__aeabi_d2iz>
 800ab14:	4605      	mov	r5, r0
 800ab16:	f7f5 fd0d 	bl	8000534 <__aeabi_i2d>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab22:	f7f5 fbb9 	bl	8000298 <__aeabi_dsub>
 800ab26:	3530      	adds	r5, #48	@ 0x30
 800ab28:	f806 5b01 	strb.w	r5, [r6], #1
 800ab2c:	4602      	mov	r2, r0
 800ab2e:	460b      	mov	r3, r1
 800ab30:	42a6      	cmp	r6, r4
 800ab32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ab36:	f04f 0200 	mov.w	r2, #0
 800ab3a:	d124      	bne.n	800ab86 <_dtoa_r+0x626>
 800ab3c:	4baf      	ldr	r3, [pc, #700]	@ (800adfc <_dtoa_r+0x89c>)
 800ab3e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab42:	f7f5 fbab 	bl	800029c <__adddf3>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab4e:	f7f5 ffeb 	bl	8000b28 <__aeabi_dcmpgt>
 800ab52:	2800      	cmp	r0, #0
 800ab54:	d163      	bne.n	800ac1e <_dtoa_r+0x6be>
 800ab56:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab5a:	49a8      	ldr	r1, [pc, #672]	@ (800adfc <_dtoa_r+0x89c>)
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	f7f5 fb9b 	bl	8000298 <__aeabi_dsub>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab6a:	f7f5 ffbf 	bl	8000aec <__aeabi_dcmplt>
 800ab6e:	2800      	cmp	r0, #0
 800ab70:	f43f af14 	beq.w	800a99c <_dtoa_r+0x43c>
 800ab74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ab76:	1e73      	subs	r3, r6, #1
 800ab78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab7e:	2b30      	cmp	r3, #48	@ 0x30
 800ab80:	d0f8      	beq.n	800ab74 <_dtoa_r+0x614>
 800ab82:	4647      	mov	r7, r8
 800ab84:	e03b      	b.n	800abfe <_dtoa_r+0x69e>
 800ab86:	4b9e      	ldr	r3, [pc, #632]	@ (800ae00 <_dtoa_r+0x8a0>)
 800ab88:	f7f5 fd3e 	bl	8000608 <__aeabi_dmul>
 800ab8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab90:	e7bc      	b.n	800ab0c <_dtoa_r+0x5ac>
 800ab92:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ab96:	4656      	mov	r6, sl
 800ab98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7f5 fe5c 	bl	800085c <__aeabi_ddiv>
 800aba4:	f7f5 ffe0 	bl	8000b68 <__aeabi_d2iz>
 800aba8:	4680      	mov	r8, r0
 800abaa:	f7f5 fcc3 	bl	8000534 <__aeabi_i2d>
 800abae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb2:	f7f5 fd29 	bl	8000608 <__aeabi_dmul>
 800abb6:	4602      	mov	r2, r0
 800abb8:	460b      	mov	r3, r1
 800abba:	4620      	mov	r0, r4
 800abbc:	4629      	mov	r1, r5
 800abbe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800abc2:	f7f5 fb69 	bl	8000298 <__aeabi_dsub>
 800abc6:	f806 4b01 	strb.w	r4, [r6], #1
 800abca:	9d03      	ldr	r5, [sp, #12]
 800abcc:	eba6 040a 	sub.w	r4, r6, sl
 800abd0:	42a5      	cmp	r5, r4
 800abd2:	4602      	mov	r2, r0
 800abd4:	460b      	mov	r3, r1
 800abd6:	d133      	bne.n	800ac40 <_dtoa_r+0x6e0>
 800abd8:	f7f5 fb60 	bl	800029c <__adddf3>
 800abdc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abe0:	4604      	mov	r4, r0
 800abe2:	460d      	mov	r5, r1
 800abe4:	f7f5 ffa0 	bl	8000b28 <__aeabi_dcmpgt>
 800abe8:	b9c0      	cbnz	r0, 800ac1c <_dtoa_r+0x6bc>
 800abea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abee:	4620      	mov	r0, r4
 800abf0:	4629      	mov	r1, r5
 800abf2:	f7f5 ff71 	bl	8000ad8 <__aeabi_dcmpeq>
 800abf6:	b110      	cbz	r0, 800abfe <_dtoa_r+0x69e>
 800abf8:	f018 0f01 	tst.w	r8, #1
 800abfc:	d10e      	bne.n	800ac1c <_dtoa_r+0x6bc>
 800abfe:	9902      	ldr	r1, [sp, #8]
 800ac00:	4648      	mov	r0, r9
 800ac02:	f000 fbbd 	bl	800b380 <_Bfree>
 800ac06:	2300      	movs	r3, #0
 800ac08:	7033      	strb	r3, [r6, #0]
 800ac0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac0c:	3701      	adds	r7, #1
 800ac0e:	601f      	str	r7, [r3, #0]
 800ac10:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f000 824b 	beq.w	800b0ae <_dtoa_r+0xb4e>
 800ac18:	601e      	str	r6, [r3, #0]
 800ac1a:	e248      	b.n	800b0ae <_dtoa_r+0xb4e>
 800ac1c:	46b8      	mov	r8, r7
 800ac1e:	4633      	mov	r3, r6
 800ac20:	461e      	mov	r6, r3
 800ac22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac26:	2a39      	cmp	r2, #57	@ 0x39
 800ac28:	d106      	bne.n	800ac38 <_dtoa_r+0x6d8>
 800ac2a:	459a      	cmp	sl, r3
 800ac2c:	d1f8      	bne.n	800ac20 <_dtoa_r+0x6c0>
 800ac2e:	2230      	movs	r2, #48	@ 0x30
 800ac30:	f108 0801 	add.w	r8, r8, #1
 800ac34:	f88a 2000 	strb.w	r2, [sl]
 800ac38:	781a      	ldrb	r2, [r3, #0]
 800ac3a:	3201      	adds	r2, #1
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	e7a0      	b.n	800ab82 <_dtoa_r+0x622>
 800ac40:	4b6f      	ldr	r3, [pc, #444]	@ (800ae00 <_dtoa_r+0x8a0>)
 800ac42:	2200      	movs	r2, #0
 800ac44:	f7f5 fce0 	bl	8000608 <__aeabi_dmul>
 800ac48:	2200      	movs	r2, #0
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	460d      	mov	r5, r1
 800ac50:	f7f5 ff42 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d09f      	beq.n	800ab98 <_dtoa_r+0x638>
 800ac58:	e7d1      	b.n	800abfe <_dtoa_r+0x69e>
 800ac5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac5c:	2a00      	cmp	r2, #0
 800ac5e:	f000 80ea 	beq.w	800ae36 <_dtoa_r+0x8d6>
 800ac62:	9a07      	ldr	r2, [sp, #28]
 800ac64:	2a01      	cmp	r2, #1
 800ac66:	f300 80cd 	bgt.w	800ae04 <_dtoa_r+0x8a4>
 800ac6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac6c:	2a00      	cmp	r2, #0
 800ac6e:	f000 80c1 	beq.w	800adf4 <_dtoa_r+0x894>
 800ac72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac76:	9c08      	ldr	r4, [sp, #32]
 800ac78:	9e00      	ldr	r6, [sp, #0]
 800ac7a:	9a00      	ldr	r2, [sp, #0]
 800ac7c:	441a      	add	r2, r3
 800ac7e:	9200      	str	r2, [sp, #0]
 800ac80:	9a06      	ldr	r2, [sp, #24]
 800ac82:	2101      	movs	r1, #1
 800ac84:	441a      	add	r2, r3
 800ac86:	4648      	mov	r0, r9
 800ac88:	9206      	str	r2, [sp, #24]
 800ac8a:	f000 fc2d 	bl	800b4e8 <__i2b>
 800ac8e:	4605      	mov	r5, r0
 800ac90:	b166      	cbz	r6, 800acac <_dtoa_r+0x74c>
 800ac92:	9b06      	ldr	r3, [sp, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	dd09      	ble.n	800acac <_dtoa_r+0x74c>
 800ac98:	42b3      	cmp	r3, r6
 800ac9a:	9a00      	ldr	r2, [sp, #0]
 800ac9c:	bfa8      	it	ge
 800ac9e:	4633      	movge	r3, r6
 800aca0:	1ad2      	subs	r2, r2, r3
 800aca2:	9200      	str	r2, [sp, #0]
 800aca4:	9a06      	ldr	r2, [sp, #24]
 800aca6:	1af6      	subs	r6, r6, r3
 800aca8:	1ad3      	subs	r3, r2, r3
 800acaa:	9306      	str	r3, [sp, #24]
 800acac:	9b08      	ldr	r3, [sp, #32]
 800acae:	b30b      	cbz	r3, 800acf4 <_dtoa_r+0x794>
 800acb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 80c6 	beq.w	800ae44 <_dtoa_r+0x8e4>
 800acb8:	2c00      	cmp	r4, #0
 800acba:	f000 80c0 	beq.w	800ae3e <_dtoa_r+0x8de>
 800acbe:	4629      	mov	r1, r5
 800acc0:	4622      	mov	r2, r4
 800acc2:	4648      	mov	r0, r9
 800acc4:	f000 fcc8 	bl	800b658 <__pow5mult>
 800acc8:	9a02      	ldr	r2, [sp, #8]
 800acca:	4601      	mov	r1, r0
 800accc:	4605      	mov	r5, r0
 800acce:	4648      	mov	r0, r9
 800acd0:	f000 fc20 	bl	800b514 <__multiply>
 800acd4:	9902      	ldr	r1, [sp, #8]
 800acd6:	4680      	mov	r8, r0
 800acd8:	4648      	mov	r0, r9
 800acda:	f000 fb51 	bl	800b380 <_Bfree>
 800acde:	9b08      	ldr	r3, [sp, #32]
 800ace0:	1b1b      	subs	r3, r3, r4
 800ace2:	9308      	str	r3, [sp, #32]
 800ace4:	f000 80b1 	beq.w	800ae4a <_dtoa_r+0x8ea>
 800ace8:	9a08      	ldr	r2, [sp, #32]
 800acea:	4641      	mov	r1, r8
 800acec:	4648      	mov	r0, r9
 800acee:	f000 fcb3 	bl	800b658 <__pow5mult>
 800acf2:	9002      	str	r0, [sp, #8]
 800acf4:	2101      	movs	r1, #1
 800acf6:	4648      	mov	r0, r9
 800acf8:	f000 fbf6 	bl	800b4e8 <__i2b>
 800acfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acfe:	4604      	mov	r4, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	f000 81d8 	beq.w	800b0b6 <_dtoa_r+0xb56>
 800ad06:	461a      	mov	r2, r3
 800ad08:	4601      	mov	r1, r0
 800ad0a:	4648      	mov	r0, r9
 800ad0c:	f000 fca4 	bl	800b658 <__pow5mult>
 800ad10:	9b07      	ldr	r3, [sp, #28]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	4604      	mov	r4, r0
 800ad16:	f300 809f 	bgt.w	800ae58 <_dtoa_r+0x8f8>
 800ad1a:	9b04      	ldr	r3, [sp, #16]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f040 8097 	bne.w	800ae50 <_dtoa_r+0x8f0>
 800ad22:	9b05      	ldr	r3, [sp, #20]
 800ad24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f040 8093 	bne.w	800ae54 <_dtoa_r+0x8f4>
 800ad2e:	9b05      	ldr	r3, [sp, #20]
 800ad30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad34:	0d1b      	lsrs	r3, r3, #20
 800ad36:	051b      	lsls	r3, r3, #20
 800ad38:	b133      	cbz	r3, 800ad48 <_dtoa_r+0x7e8>
 800ad3a:	9b00      	ldr	r3, [sp, #0]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	9b06      	ldr	r3, [sp, #24]
 800ad42:	3301      	adds	r3, #1
 800ad44:	9306      	str	r3, [sp, #24]
 800ad46:	2301      	movs	r3, #1
 800ad48:	9308      	str	r3, [sp, #32]
 800ad4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 81b8 	beq.w	800b0c2 <_dtoa_r+0xb62>
 800ad52:	6923      	ldr	r3, [r4, #16]
 800ad54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad58:	6918      	ldr	r0, [r3, #16]
 800ad5a:	f000 fb79 	bl	800b450 <__hi0bits>
 800ad5e:	f1c0 0020 	rsb	r0, r0, #32
 800ad62:	9b06      	ldr	r3, [sp, #24]
 800ad64:	4418      	add	r0, r3
 800ad66:	f010 001f 	ands.w	r0, r0, #31
 800ad6a:	f000 8082 	beq.w	800ae72 <_dtoa_r+0x912>
 800ad6e:	f1c0 0320 	rsb	r3, r0, #32
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	dd73      	ble.n	800ae5e <_dtoa_r+0x8fe>
 800ad76:	9b00      	ldr	r3, [sp, #0]
 800ad78:	f1c0 001c 	rsb	r0, r0, #28
 800ad7c:	4403      	add	r3, r0
 800ad7e:	9300      	str	r3, [sp, #0]
 800ad80:	9b06      	ldr	r3, [sp, #24]
 800ad82:	4403      	add	r3, r0
 800ad84:	4406      	add	r6, r0
 800ad86:	9306      	str	r3, [sp, #24]
 800ad88:	9b00      	ldr	r3, [sp, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	dd05      	ble.n	800ad9a <_dtoa_r+0x83a>
 800ad8e:	9902      	ldr	r1, [sp, #8]
 800ad90:	461a      	mov	r2, r3
 800ad92:	4648      	mov	r0, r9
 800ad94:	f000 fcba 	bl	800b70c <__lshift>
 800ad98:	9002      	str	r0, [sp, #8]
 800ad9a:	9b06      	ldr	r3, [sp, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	dd05      	ble.n	800adac <_dtoa_r+0x84c>
 800ada0:	4621      	mov	r1, r4
 800ada2:	461a      	mov	r2, r3
 800ada4:	4648      	mov	r0, r9
 800ada6:	f000 fcb1 	bl	800b70c <__lshift>
 800adaa:	4604      	mov	r4, r0
 800adac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d061      	beq.n	800ae76 <_dtoa_r+0x916>
 800adb2:	9802      	ldr	r0, [sp, #8]
 800adb4:	4621      	mov	r1, r4
 800adb6:	f000 fd15 	bl	800b7e4 <__mcmp>
 800adba:	2800      	cmp	r0, #0
 800adbc:	da5b      	bge.n	800ae76 <_dtoa_r+0x916>
 800adbe:	2300      	movs	r3, #0
 800adc0:	9902      	ldr	r1, [sp, #8]
 800adc2:	220a      	movs	r2, #10
 800adc4:	4648      	mov	r0, r9
 800adc6:	f000 fafd 	bl	800b3c4 <__multadd>
 800adca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adcc:	9002      	str	r0, [sp, #8]
 800adce:	f107 38ff 	add.w	r8, r7, #4294967295
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8177 	beq.w	800b0c6 <_dtoa_r+0xb66>
 800add8:	4629      	mov	r1, r5
 800adda:	2300      	movs	r3, #0
 800addc:	220a      	movs	r2, #10
 800adde:	4648      	mov	r0, r9
 800ade0:	f000 faf0 	bl	800b3c4 <__multadd>
 800ade4:	f1bb 0f00 	cmp.w	fp, #0
 800ade8:	4605      	mov	r5, r0
 800adea:	dc6f      	bgt.n	800aecc <_dtoa_r+0x96c>
 800adec:	9b07      	ldr	r3, [sp, #28]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	dc49      	bgt.n	800ae86 <_dtoa_r+0x926>
 800adf2:	e06b      	b.n	800aecc <_dtoa_r+0x96c>
 800adf4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800adf6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800adfa:	e73c      	b.n	800ac76 <_dtoa_r+0x716>
 800adfc:	3fe00000 	.word	0x3fe00000
 800ae00:	40240000 	.word	0x40240000
 800ae04:	9b03      	ldr	r3, [sp, #12]
 800ae06:	1e5c      	subs	r4, r3, #1
 800ae08:	9b08      	ldr	r3, [sp, #32]
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	db09      	blt.n	800ae22 <_dtoa_r+0x8c2>
 800ae0e:	1b1c      	subs	r4, r3, r4
 800ae10:	9b03      	ldr	r3, [sp, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f6bf af30 	bge.w	800ac78 <_dtoa_r+0x718>
 800ae18:	9b00      	ldr	r3, [sp, #0]
 800ae1a:	9a03      	ldr	r2, [sp, #12]
 800ae1c:	1a9e      	subs	r6, r3, r2
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e72b      	b.n	800ac7a <_dtoa_r+0x71a>
 800ae22:	9b08      	ldr	r3, [sp, #32]
 800ae24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae26:	9408      	str	r4, [sp, #32]
 800ae28:	1ae3      	subs	r3, r4, r3
 800ae2a:	441a      	add	r2, r3
 800ae2c:	9e00      	ldr	r6, [sp, #0]
 800ae2e:	9b03      	ldr	r3, [sp, #12]
 800ae30:	920d      	str	r2, [sp, #52]	@ 0x34
 800ae32:	2400      	movs	r4, #0
 800ae34:	e721      	b.n	800ac7a <_dtoa_r+0x71a>
 800ae36:	9c08      	ldr	r4, [sp, #32]
 800ae38:	9e00      	ldr	r6, [sp, #0]
 800ae3a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ae3c:	e728      	b.n	800ac90 <_dtoa_r+0x730>
 800ae3e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ae42:	e751      	b.n	800ace8 <_dtoa_r+0x788>
 800ae44:	9a08      	ldr	r2, [sp, #32]
 800ae46:	9902      	ldr	r1, [sp, #8]
 800ae48:	e750      	b.n	800acec <_dtoa_r+0x78c>
 800ae4a:	f8cd 8008 	str.w	r8, [sp, #8]
 800ae4e:	e751      	b.n	800acf4 <_dtoa_r+0x794>
 800ae50:	2300      	movs	r3, #0
 800ae52:	e779      	b.n	800ad48 <_dtoa_r+0x7e8>
 800ae54:	9b04      	ldr	r3, [sp, #16]
 800ae56:	e777      	b.n	800ad48 <_dtoa_r+0x7e8>
 800ae58:	2300      	movs	r3, #0
 800ae5a:	9308      	str	r3, [sp, #32]
 800ae5c:	e779      	b.n	800ad52 <_dtoa_r+0x7f2>
 800ae5e:	d093      	beq.n	800ad88 <_dtoa_r+0x828>
 800ae60:	9a00      	ldr	r2, [sp, #0]
 800ae62:	331c      	adds	r3, #28
 800ae64:	441a      	add	r2, r3
 800ae66:	9200      	str	r2, [sp, #0]
 800ae68:	9a06      	ldr	r2, [sp, #24]
 800ae6a:	441a      	add	r2, r3
 800ae6c:	441e      	add	r6, r3
 800ae6e:	9206      	str	r2, [sp, #24]
 800ae70:	e78a      	b.n	800ad88 <_dtoa_r+0x828>
 800ae72:	4603      	mov	r3, r0
 800ae74:	e7f4      	b.n	800ae60 <_dtoa_r+0x900>
 800ae76:	9b03      	ldr	r3, [sp, #12]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	46b8      	mov	r8, r7
 800ae7c:	dc20      	bgt.n	800aec0 <_dtoa_r+0x960>
 800ae7e:	469b      	mov	fp, r3
 800ae80:	9b07      	ldr	r3, [sp, #28]
 800ae82:	2b02      	cmp	r3, #2
 800ae84:	dd1e      	ble.n	800aec4 <_dtoa_r+0x964>
 800ae86:	f1bb 0f00 	cmp.w	fp, #0
 800ae8a:	f47f adb1 	bne.w	800a9f0 <_dtoa_r+0x490>
 800ae8e:	4621      	mov	r1, r4
 800ae90:	465b      	mov	r3, fp
 800ae92:	2205      	movs	r2, #5
 800ae94:	4648      	mov	r0, r9
 800ae96:	f000 fa95 	bl	800b3c4 <__multadd>
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	4604      	mov	r4, r0
 800ae9e:	9802      	ldr	r0, [sp, #8]
 800aea0:	f000 fca0 	bl	800b7e4 <__mcmp>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	f77f ada3 	ble.w	800a9f0 <_dtoa_r+0x490>
 800aeaa:	4656      	mov	r6, sl
 800aeac:	2331      	movs	r3, #49	@ 0x31
 800aeae:	f806 3b01 	strb.w	r3, [r6], #1
 800aeb2:	f108 0801 	add.w	r8, r8, #1
 800aeb6:	e59f      	b.n	800a9f8 <_dtoa_r+0x498>
 800aeb8:	9c03      	ldr	r4, [sp, #12]
 800aeba:	46b8      	mov	r8, r7
 800aebc:	4625      	mov	r5, r4
 800aebe:	e7f4      	b.n	800aeaa <_dtoa_r+0x94a>
 800aec0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800aec4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	f000 8101 	beq.w	800b0ce <_dtoa_r+0xb6e>
 800aecc:	2e00      	cmp	r6, #0
 800aece:	dd05      	ble.n	800aedc <_dtoa_r+0x97c>
 800aed0:	4629      	mov	r1, r5
 800aed2:	4632      	mov	r2, r6
 800aed4:	4648      	mov	r0, r9
 800aed6:	f000 fc19 	bl	800b70c <__lshift>
 800aeda:	4605      	mov	r5, r0
 800aedc:	9b08      	ldr	r3, [sp, #32]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d05c      	beq.n	800af9c <_dtoa_r+0xa3c>
 800aee2:	6869      	ldr	r1, [r5, #4]
 800aee4:	4648      	mov	r0, r9
 800aee6:	f000 fa0b 	bl	800b300 <_Balloc>
 800aeea:	4606      	mov	r6, r0
 800aeec:	b928      	cbnz	r0, 800aefa <_dtoa_r+0x99a>
 800aeee:	4b82      	ldr	r3, [pc, #520]	@ (800b0f8 <_dtoa_r+0xb98>)
 800aef0:	4602      	mov	r2, r0
 800aef2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aef6:	f7ff bb4a 	b.w	800a58e <_dtoa_r+0x2e>
 800aefa:	692a      	ldr	r2, [r5, #16]
 800aefc:	3202      	adds	r2, #2
 800aefe:	0092      	lsls	r2, r2, #2
 800af00:	f105 010c 	add.w	r1, r5, #12
 800af04:	300c      	adds	r0, #12
 800af06:	f000 fff7 	bl	800bef8 <memcpy>
 800af0a:	2201      	movs	r2, #1
 800af0c:	4631      	mov	r1, r6
 800af0e:	4648      	mov	r0, r9
 800af10:	f000 fbfc 	bl	800b70c <__lshift>
 800af14:	f10a 0301 	add.w	r3, sl, #1
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	eb0a 030b 	add.w	r3, sl, fp
 800af1e:	9308      	str	r3, [sp, #32]
 800af20:	9b04      	ldr	r3, [sp, #16]
 800af22:	f003 0301 	and.w	r3, r3, #1
 800af26:	462f      	mov	r7, r5
 800af28:	9306      	str	r3, [sp, #24]
 800af2a:	4605      	mov	r5, r0
 800af2c:	9b00      	ldr	r3, [sp, #0]
 800af2e:	9802      	ldr	r0, [sp, #8]
 800af30:	4621      	mov	r1, r4
 800af32:	f103 3bff 	add.w	fp, r3, #4294967295
 800af36:	f7ff fa8a 	bl	800a44e <quorem>
 800af3a:	4603      	mov	r3, r0
 800af3c:	3330      	adds	r3, #48	@ 0x30
 800af3e:	9003      	str	r0, [sp, #12]
 800af40:	4639      	mov	r1, r7
 800af42:	9802      	ldr	r0, [sp, #8]
 800af44:	9309      	str	r3, [sp, #36]	@ 0x24
 800af46:	f000 fc4d 	bl	800b7e4 <__mcmp>
 800af4a:	462a      	mov	r2, r5
 800af4c:	9004      	str	r0, [sp, #16]
 800af4e:	4621      	mov	r1, r4
 800af50:	4648      	mov	r0, r9
 800af52:	f000 fc63 	bl	800b81c <__mdiff>
 800af56:	68c2      	ldr	r2, [r0, #12]
 800af58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af5a:	4606      	mov	r6, r0
 800af5c:	bb02      	cbnz	r2, 800afa0 <_dtoa_r+0xa40>
 800af5e:	4601      	mov	r1, r0
 800af60:	9802      	ldr	r0, [sp, #8]
 800af62:	f000 fc3f 	bl	800b7e4 <__mcmp>
 800af66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af68:	4602      	mov	r2, r0
 800af6a:	4631      	mov	r1, r6
 800af6c:	4648      	mov	r0, r9
 800af6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800af70:	9309      	str	r3, [sp, #36]	@ 0x24
 800af72:	f000 fa05 	bl	800b380 <_Bfree>
 800af76:	9b07      	ldr	r3, [sp, #28]
 800af78:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af7a:	9e00      	ldr	r6, [sp, #0]
 800af7c:	ea42 0103 	orr.w	r1, r2, r3
 800af80:	9b06      	ldr	r3, [sp, #24]
 800af82:	4319      	orrs	r1, r3
 800af84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af86:	d10d      	bne.n	800afa4 <_dtoa_r+0xa44>
 800af88:	2b39      	cmp	r3, #57	@ 0x39
 800af8a:	d027      	beq.n	800afdc <_dtoa_r+0xa7c>
 800af8c:	9a04      	ldr	r2, [sp, #16]
 800af8e:	2a00      	cmp	r2, #0
 800af90:	dd01      	ble.n	800af96 <_dtoa_r+0xa36>
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	3331      	adds	r3, #49	@ 0x31
 800af96:	f88b 3000 	strb.w	r3, [fp]
 800af9a:	e52e      	b.n	800a9fa <_dtoa_r+0x49a>
 800af9c:	4628      	mov	r0, r5
 800af9e:	e7b9      	b.n	800af14 <_dtoa_r+0x9b4>
 800afa0:	2201      	movs	r2, #1
 800afa2:	e7e2      	b.n	800af6a <_dtoa_r+0xa0a>
 800afa4:	9904      	ldr	r1, [sp, #16]
 800afa6:	2900      	cmp	r1, #0
 800afa8:	db04      	blt.n	800afb4 <_dtoa_r+0xa54>
 800afaa:	9807      	ldr	r0, [sp, #28]
 800afac:	4301      	orrs	r1, r0
 800afae:	9806      	ldr	r0, [sp, #24]
 800afb0:	4301      	orrs	r1, r0
 800afb2:	d120      	bne.n	800aff6 <_dtoa_r+0xa96>
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	ddee      	ble.n	800af96 <_dtoa_r+0xa36>
 800afb8:	9902      	ldr	r1, [sp, #8]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	2201      	movs	r2, #1
 800afbe:	4648      	mov	r0, r9
 800afc0:	f000 fba4 	bl	800b70c <__lshift>
 800afc4:	4621      	mov	r1, r4
 800afc6:	9002      	str	r0, [sp, #8]
 800afc8:	f000 fc0c 	bl	800b7e4 <__mcmp>
 800afcc:	2800      	cmp	r0, #0
 800afce:	9b00      	ldr	r3, [sp, #0]
 800afd0:	dc02      	bgt.n	800afd8 <_dtoa_r+0xa78>
 800afd2:	d1e0      	bne.n	800af96 <_dtoa_r+0xa36>
 800afd4:	07da      	lsls	r2, r3, #31
 800afd6:	d5de      	bpl.n	800af96 <_dtoa_r+0xa36>
 800afd8:	2b39      	cmp	r3, #57	@ 0x39
 800afda:	d1da      	bne.n	800af92 <_dtoa_r+0xa32>
 800afdc:	2339      	movs	r3, #57	@ 0x39
 800afde:	f88b 3000 	strb.w	r3, [fp]
 800afe2:	4633      	mov	r3, r6
 800afe4:	461e      	mov	r6, r3
 800afe6:	3b01      	subs	r3, #1
 800afe8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800afec:	2a39      	cmp	r2, #57	@ 0x39
 800afee:	d04e      	beq.n	800b08e <_dtoa_r+0xb2e>
 800aff0:	3201      	adds	r2, #1
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	e501      	b.n	800a9fa <_dtoa_r+0x49a>
 800aff6:	2a00      	cmp	r2, #0
 800aff8:	dd03      	ble.n	800b002 <_dtoa_r+0xaa2>
 800affa:	2b39      	cmp	r3, #57	@ 0x39
 800affc:	d0ee      	beq.n	800afdc <_dtoa_r+0xa7c>
 800affe:	3301      	adds	r3, #1
 800b000:	e7c9      	b.n	800af96 <_dtoa_r+0xa36>
 800b002:	9a00      	ldr	r2, [sp, #0]
 800b004:	9908      	ldr	r1, [sp, #32]
 800b006:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b00a:	428a      	cmp	r2, r1
 800b00c:	d028      	beq.n	800b060 <_dtoa_r+0xb00>
 800b00e:	9902      	ldr	r1, [sp, #8]
 800b010:	2300      	movs	r3, #0
 800b012:	220a      	movs	r2, #10
 800b014:	4648      	mov	r0, r9
 800b016:	f000 f9d5 	bl	800b3c4 <__multadd>
 800b01a:	42af      	cmp	r7, r5
 800b01c:	9002      	str	r0, [sp, #8]
 800b01e:	f04f 0300 	mov.w	r3, #0
 800b022:	f04f 020a 	mov.w	r2, #10
 800b026:	4639      	mov	r1, r7
 800b028:	4648      	mov	r0, r9
 800b02a:	d107      	bne.n	800b03c <_dtoa_r+0xadc>
 800b02c:	f000 f9ca 	bl	800b3c4 <__multadd>
 800b030:	4607      	mov	r7, r0
 800b032:	4605      	mov	r5, r0
 800b034:	9b00      	ldr	r3, [sp, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	e777      	b.n	800af2c <_dtoa_r+0x9cc>
 800b03c:	f000 f9c2 	bl	800b3c4 <__multadd>
 800b040:	4629      	mov	r1, r5
 800b042:	4607      	mov	r7, r0
 800b044:	2300      	movs	r3, #0
 800b046:	220a      	movs	r2, #10
 800b048:	4648      	mov	r0, r9
 800b04a:	f000 f9bb 	bl	800b3c4 <__multadd>
 800b04e:	4605      	mov	r5, r0
 800b050:	e7f0      	b.n	800b034 <_dtoa_r+0xad4>
 800b052:	f1bb 0f00 	cmp.w	fp, #0
 800b056:	bfcc      	ite	gt
 800b058:	465e      	movgt	r6, fp
 800b05a:	2601      	movle	r6, #1
 800b05c:	4456      	add	r6, sl
 800b05e:	2700      	movs	r7, #0
 800b060:	9902      	ldr	r1, [sp, #8]
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2201      	movs	r2, #1
 800b066:	4648      	mov	r0, r9
 800b068:	f000 fb50 	bl	800b70c <__lshift>
 800b06c:	4621      	mov	r1, r4
 800b06e:	9002      	str	r0, [sp, #8]
 800b070:	f000 fbb8 	bl	800b7e4 <__mcmp>
 800b074:	2800      	cmp	r0, #0
 800b076:	dcb4      	bgt.n	800afe2 <_dtoa_r+0xa82>
 800b078:	d102      	bne.n	800b080 <_dtoa_r+0xb20>
 800b07a:	9b00      	ldr	r3, [sp, #0]
 800b07c:	07db      	lsls	r3, r3, #31
 800b07e:	d4b0      	bmi.n	800afe2 <_dtoa_r+0xa82>
 800b080:	4633      	mov	r3, r6
 800b082:	461e      	mov	r6, r3
 800b084:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b088:	2a30      	cmp	r2, #48	@ 0x30
 800b08a:	d0fa      	beq.n	800b082 <_dtoa_r+0xb22>
 800b08c:	e4b5      	b.n	800a9fa <_dtoa_r+0x49a>
 800b08e:	459a      	cmp	sl, r3
 800b090:	d1a8      	bne.n	800afe4 <_dtoa_r+0xa84>
 800b092:	2331      	movs	r3, #49	@ 0x31
 800b094:	f108 0801 	add.w	r8, r8, #1
 800b098:	f88a 3000 	strb.w	r3, [sl]
 800b09c:	e4ad      	b.n	800a9fa <_dtoa_r+0x49a>
 800b09e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b0fc <_dtoa_r+0xb9c>
 800b0a4:	b11b      	cbz	r3, 800b0ae <_dtoa_r+0xb4e>
 800b0a6:	f10a 0308 	add.w	r3, sl, #8
 800b0aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b0ac:	6013      	str	r3, [r2, #0]
 800b0ae:	4650      	mov	r0, sl
 800b0b0:	b017      	add	sp, #92	@ 0x5c
 800b0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b6:	9b07      	ldr	r3, [sp, #28]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	f77f ae2e 	ble.w	800ad1a <_dtoa_r+0x7ba>
 800b0be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0c0:	9308      	str	r3, [sp, #32]
 800b0c2:	2001      	movs	r0, #1
 800b0c4:	e64d      	b.n	800ad62 <_dtoa_r+0x802>
 800b0c6:	f1bb 0f00 	cmp.w	fp, #0
 800b0ca:	f77f aed9 	ble.w	800ae80 <_dtoa_r+0x920>
 800b0ce:	4656      	mov	r6, sl
 800b0d0:	9802      	ldr	r0, [sp, #8]
 800b0d2:	4621      	mov	r1, r4
 800b0d4:	f7ff f9bb 	bl	800a44e <quorem>
 800b0d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b0dc:	f806 3b01 	strb.w	r3, [r6], #1
 800b0e0:	eba6 020a 	sub.w	r2, r6, sl
 800b0e4:	4593      	cmp	fp, r2
 800b0e6:	ddb4      	ble.n	800b052 <_dtoa_r+0xaf2>
 800b0e8:	9902      	ldr	r1, [sp, #8]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	220a      	movs	r2, #10
 800b0ee:	4648      	mov	r0, r9
 800b0f0:	f000 f968 	bl	800b3c4 <__multadd>
 800b0f4:	9002      	str	r0, [sp, #8]
 800b0f6:	e7eb      	b.n	800b0d0 <_dtoa_r+0xb70>
 800b0f8:	0800c754 	.word	0x0800c754
 800b0fc:	0800c6d8 	.word	0x0800c6d8

0800b100 <_free_r>:
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4605      	mov	r5, r0
 800b104:	2900      	cmp	r1, #0
 800b106:	d041      	beq.n	800b18c <_free_r+0x8c>
 800b108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b10c:	1f0c      	subs	r4, r1, #4
 800b10e:	2b00      	cmp	r3, #0
 800b110:	bfb8      	it	lt
 800b112:	18e4      	addlt	r4, r4, r3
 800b114:	f000 f8e8 	bl	800b2e8 <__malloc_lock>
 800b118:	4a1d      	ldr	r2, [pc, #116]	@ (800b190 <_free_r+0x90>)
 800b11a:	6813      	ldr	r3, [r2, #0]
 800b11c:	b933      	cbnz	r3, 800b12c <_free_r+0x2c>
 800b11e:	6063      	str	r3, [r4, #4]
 800b120:	6014      	str	r4, [r2, #0]
 800b122:	4628      	mov	r0, r5
 800b124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b128:	f000 b8e4 	b.w	800b2f4 <__malloc_unlock>
 800b12c:	42a3      	cmp	r3, r4
 800b12e:	d908      	bls.n	800b142 <_free_r+0x42>
 800b130:	6820      	ldr	r0, [r4, #0]
 800b132:	1821      	adds	r1, r4, r0
 800b134:	428b      	cmp	r3, r1
 800b136:	bf01      	itttt	eq
 800b138:	6819      	ldreq	r1, [r3, #0]
 800b13a:	685b      	ldreq	r3, [r3, #4]
 800b13c:	1809      	addeq	r1, r1, r0
 800b13e:	6021      	streq	r1, [r4, #0]
 800b140:	e7ed      	b.n	800b11e <_free_r+0x1e>
 800b142:	461a      	mov	r2, r3
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	b10b      	cbz	r3, 800b14c <_free_r+0x4c>
 800b148:	42a3      	cmp	r3, r4
 800b14a:	d9fa      	bls.n	800b142 <_free_r+0x42>
 800b14c:	6811      	ldr	r1, [r2, #0]
 800b14e:	1850      	adds	r0, r2, r1
 800b150:	42a0      	cmp	r0, r4
 800b152:	d10b      	bne.n	800b16c <_free_r+0x6c>
 800b154:	6820      	ldr	r0, [r4, #0]
 800b156:	4401      	add	r1, r0
 800b158:	1850      	adds	r0, r2, r1
 800b15a:	4283      	cmp	r3, r0
 800b15c:	6011      	str	r1, [r2, #0]
 800b15e:	d1e0      	bne.n	800b122 <_free_r+0x22>
 800b160:	6818      	ldr	r0, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	6053      	str	r3, [r2, #4]
 800b166:	4408      	add	r0, r1
 800b168:	6010      	str	r0, [r2, #0]
 800b16a:	e7da      	b.n	800b122 <_free_r+0x22>
 800b16c:	d902      	bls.n	800b174 <_free_r+0x74>
 800b16e:	230c      	movs	r3, #12
 800b170:	602b      	str	r3, [r5, #0]
 800b172:	e7d6      	b.n	800b122 <_free_r+0x22>
 800b174:	6820      	ldr	r0, [r4, #0]
 800b176:	1821      	adds	r1, r4, r0
 800b178:	428b      	cmp	r3, r1
 800b17a:	bf04      	itt	eq
 800b17c:	6819      	ldreq	r1, [r3, #0]
 800b17e:	685b      	ldreq	r3, [r3, #4]
 800b180:	6063      	str	r3, [r4, #4]
 800b182:	bf04      	itt	eq
 800b184:	1809      	addeq	r1, r1, r0
 800b186:	6021      	streq	r1, [r4, #0]
 800b188:	6054      	str	r4, [r2, #4]
 800b18a:	e7ca      	b.n	800b122 <_free_r+0x22>
 800b18c:	bd38      	pop	{r3, r4, r5, pc}
 800b18e:	bf00      	nop
 800b190:	20000844 	.word	0x20000844

0800b194 <malloc>:
 800b194:	4b02      	ldr	r3, [pc, #8]	@ (800b1a0 <malloc+0xc>)
 800b196:	4601      	mov	r1, r0
 800b198:	6818      	ldr	r0, [r3, #0]
 800b19a:	f000 b825 	b.w	800b1e8 <_malloc_r>
 800b19e:	bf00      	nop
 800b1a0:	20000030 	.word	0x20000030

0800b1a4 <sbrk_aligned>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	4e0f      	ldr	r6, [pc, #60]	@ (800b1e4 <sbrk_aligned+0x40>)
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	6831      	ldr	r1, [r6, #0]
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	b911      	cbnz	r1, 800b1b6 <sbrk_aligned+0x12>
 800b1b0:	f000 fe92 	bl	800bed8 <_sbrk_r>
 800b1b4:	6030      	str	r0, [r6, #0]
 800b1b6:	4621      	mov	r1, r4
 800b1b8:	4628      	mov	r0, r5
 800b1ba:	f000 fe8d 	bl	800bed8 <_sbrk_r>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	d103      	bne.n	800b1ca <sbrk_aligned+0x26>
 800b1c2:	f04f 34ff 	mov.w	r4, #4294967295
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	bd70      	pop	{r4, r5, r6, pc}
 800b1ca:	1cc4      	adds	r4, r0, #3
 800b1cc:	f024 0403 	bic.w	r4, r4, #3
 800b1d0:	42a0      	cmp	r0, r4
 800b1d2:	d0f8      	beq.n	800b1c6 <sbrk_aligned+0x22>
 800b1d4:	1a21      	subs	r1, r4, r0
 800b1d6:	4628      	mov	r0, r5
 800b1d8:	f000 fe7e 	bl	800bed8 <_sbrk_r>
 800b1dc:	3001      	adds	r0, #1
 800b1de:	d1f2      	bne.n	800b1c6 <sbrk_aligned+0x22>
 800b1e0:	e7ef      	b.n	800b1c2 <sbrk_aligned+0x1e>
 800b1e2:	bf00      	nop
 800b1e4:	20000840 	.word	0x20000840

0800b1e8 <_malloc_r>:
 800b1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1ec:	1ccd      	adds	r5, r1, #3
 800b1ee:	f025 0503 	bic.w	r5, r5, #3
 800b1f2:	3508      	adds	r5, #8
 800b1f4:	2d0c      	cmp	r5, #12
 800b1f6:	bf38      	it	cc
 800b1f8:	250c      	movcc	r5, #12
 800b1fa:	2d00      	cmp	r5, #0
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	db01      	blt.n	800b204 <_malloc_r+0x1c>
 800b200:	42a9      	cmp	r1, r5
 800b202:	d904      	bls.n	800b20e <_malloc_r+0x26>
 800b204:	230c      	movs	r3, #12
 800b206:	6033      	str	r3, [r6, #0]
 800b208:	2000      	movs	r0, #0
 800b20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b20e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2e4 <_malloc_r+0xfc>
 800b212:	f000 f869 	bl	800b2e8 <__malloc_lock>
 800b216:	f8d8 3000 	ldr.w	r3, [r8]
 800b21a:	461c      	mov	r4, r3
 800b21c:	bb44      	cbnz	r4, 800b270 <_malloc_r+0x88>
 800b21e:	4629      	mov	r1, r5
 800b220:	4630      	mov	r0, r6
 800b222:	f7ff ffbf 	bl	800b1a4 <sbrk_aligned>
 800b226:	1c43      	adds	r3, r0, #1
 800b228:	4604      	mov	r4, r0
 800b22a:	d158      	bne.n	800b2de <_malloc_r+0xf6>
 800b22c:	f8d8 4000 	ldr.w	r4, [r8]
 800b230:	4627      	mov	r7, r4
 800b232:	2f00      	cmp	r7, #0
 800b234:	d143      	bne.n	800b2be <_malloc_r+0xd6>
 800b236:	2c00      	cmp	r4, #0
 800b238:	d04b      	beq.n	800b2d2 <_malloc_r+0xea>
 800b23a:	6823      	ldr	r3, [r4, #0]
 800b23c:	4639      	mov	r1, r7
 800b23e:	4630      	mov	r0, r6
 800b240:	eb04 0903 	add.w	r9, r4, r3
 800b244:	f000 fe48 	bl	800bed8 <_sbrk_r>
 800b248:	4581      	cmp	r9, r0
 800b24a:	d142      	bne.n	800b2d2 <_malloc_r+0xea>
 800b24c:	6821      	ldr	r1, [r4, #0]
 800b24e:	1a6d      	subs	r5, r5, r1
 800b250:	4629      	mov	r1, r5
 800b252:	4630      	mov	r0, r6
 800b254:	f7ff ffa6 	bl	800b1a4 <sbrk_aligned>
 800b258:	3001      	adds	r0, #1
 800b25a:	d03a      	beq.n	800b2d2 <_malloc_r+0xea>
 800b25c:	6823      	ldr	r3, [r4, #0]
 800b25e:	442b      	add	r3, r5
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	f8d8 3000 	ldr.w	r3, [r8]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	bb62      	cbnz	r2, 800b2c4 <_malloc_r+0xdc>
 800b26a:	f8c8 7000 	str.w	r7, [r8]
 800b26e:	e00f      	b.n	800b290 <_malloc_r+0xa8>
 800b270:	6822      	ldr	r2, [r4, #0]
 800b272:	1b52      	subs	r2, r2, r5
 800b274:	d420      	bmi.n	800b2b8 <_malloc_r+0xd0>
 800b276:	2a0b      	cmp	r2, #11
 800b278:	d917      	bls.n	800b2aa <_malloc_r+0xc2>
 800b27a:	1961      	adds	r1, r4, r5
 800b27c:	42a3      	cmp	r3, r4
 800b27e:	6025      	str	r5, [r4, #0]
 800b280:	bf18      	it	ne
 800b282:	6059      	strne	r1, [r3, #4]
 800b284:	6863      	ldr	r3, [r4, #4]
 800b286:	bf08      	it	eq
 800b288:	f8c8 1000 	streq.w	r1, [r8]
 800b28c:	5162      	str	r2, [r4, r5]
 800b28e:	604b      	str	r3, [r1, #4]
 800b290:	4630      	mov	r0, r6
 800b292:	f000 f82f 	bl	800b2f4 <__malloc_unlock>
 800b296:	f104 000b 	add.w	r0, r4, #11
 800b29a:	1d23      	adds	r3, r4, #4
 800b29c:	f020 0007 	bic.w	r0, r0, #7
 800b2a0:	1ac2      	subs	r2, r0, r3
 800b2a2:	bf1c      	itt	ne
 800b2a4:	1a1b      	subne	r3, r3, r0
 800b2a6:	50a3      	strne	r3, [r4, r2]
 800b2a8:	e7af      	b.n	800b20a <_malloc_r+0x22>
 800b2aa:	6862      	ldr	r2, [r4, #4]
 800b2ac:	42a3      	cmp	r3, r4
 800b2ae:	bf0c      	ite	eq
 800b2b0:	f8c8 2000 	streq.w	r2, [r8]
 800b2b4:	605a      	strne	r2, [r3, #4]
 800b2b6:	e7eb      	b.n	800b290 <_malloc_r+0xa8>
 800b2b8:	4623      	mov	r3, r4
 800b2ba:	6864      	ldr	r4, [r4, #4]
 800b2bc:	e7ae      	b.n	800b21c <_malloc_r+0x34>
 800b2be:	463c      	mov	r4, r7
 800b2c0:	687f      	ldr	r7, [r7, #4]
 800b2c2:	e7b6      	b.n	800b232 <_malloc_r+0x4a>
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	42a3      	cmp	r3, r4
 800b2ca:	d1fb      	bne.n	800b2c4 <_malloc_r+0xdc>
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	6053      	str	r3, [r2, #4]
 800b2d0:	e7de      	b.n	800b290 <_malloc_r+0xa8>
 800b2d2:	230c      	movs	r3, #12
 800b2d4:	6033      	str	r3, [r6, #0]
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f000 f80c 	bl	800b2f4 <__malloc_unlock>
 800b2dc:	e794      	b.n	800b208 <_malloc_r+0x20>
 800b2de:	6005      	str	r5, [r0, #0]
 800b2e0:	e7d6      	b.n	800b290 <_malloc_r+0xa8>
 800b2e2:	bf00      	nop
 800b2e4:	20000844 	.word	0x20000844

0800b2e8 <__malloc_lock>:
 800b2e8:	4801      	ldr	r0, [pc, #4]	@ (800b2f0 <__malloc_lock+0x8>)
 800b2ea:	f7ff b8ae 	b.w	800a44a <__retarget_lock_acquire_recursive>
 800b2ee:	bf00      	nop
 800b2f0:	2000083c 	.word	0x2000083c

0800b2f4 <__malloc_unlock>:
 800b2f4:	4801      	ldr	r0, [pc, #4]	@ (800b2fc <__malloc_unlock+0x8>)
 800b2f6:	f7ff b8a9 	b.w	800a44c <__retarget_lock_release_recursive>
 800b2fa:	bf00      	nop
 800b2fc:	2000083c 	.word	0x2000083c

0800b300 <_Balloc>:
 800b300:	b570      	push	{r4, r5, r6, lr}
 800b302:	69c6      	ldr	r6, [r0, #28]
 800b304:	4604      	mov	r4, r0
 800b306:	460d      	mov	r5, r1
 800b308:	b976      	cbnz	r6, 800b328 <_Balloc+0x28>
 800b30a:	2010      	movs	r0, #16
 800b30c:	f7ff ff42 	bl	800b194 <malloc>
 800b310:	4602      	mov	r2, r0
 800b312:	61e0      	str	r0, [r4, #28]
 800b314:	b920      	cbnz	r0, 800b320 <_Balloc+0x20>
 800b316:	4b18      	ldr	r3, [pc, #96]	@ (800b378 <_Balloc+0x78>)
 800b318:	4818      	ldr	r0, [pc, #96]	@ (800b37c <_Balloc+0x7c>)
 800b31a:	216b      	movs	r1, #107	@ 0x6b
 800b31c:	f000 fdfa 	bl	800bf14 <__assert_func>
 800b320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b324:	6006      	str	r6, [r0, #0]
 800b326:	60c6      	str	r6, [r0, #12]
 800b328:	69e6      	ldr	r6, [r4, #28]
 800b32a:	68f3      	ldr	r3, [r6, #12]
 800b32c:	b183      	cbz	r3, 800b350 <_Balloc+0x50>
 800b32e:	69e3      	ldr	r3, [r4, #28]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b336:	b9b8      	cbnz	r0, 800b368 <_Balloc+0x68>
 800b338:	2101      	movs	r1, #1
 800b33a:	fa01 f605 	lsl.w	r6, r1, r5
 800b33e:	1d72      	adds	r2, r6, #5
 800b340:	0092      	lsls	r2, r2, #2
 800b342:	4620      	mov	r0, r4
 800b344:	f000 fe04 	bl	800bf50 <_calloc_r>
 800b348:	b160      	cbz	r0, 800b364 <_Balloc+0x64>
 800b34a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b34e:	e00e      	b.n	800b36e <_Balloc+0x6e>
 800b350:	2221      	movs	r2, #33	@ 0x21
 800b352:	2104      	movs	r1, #4
 800b354:	4620      	mov	r0, r4
 800b356:	f000 fdfb 	bl	800bf50 <_calloc_r>
 800b35a:	69e3      	ldr	r3, [r4, #28]
 800b35c:	60f0      	str	r0, [r6, #12]
 800b35e:	68db      	ldr	r3, [r3, #12]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d1e4      	bne.n	800b32e <_Balloc+0x2e>
 800b364:	2000      	movs	r0, #0
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	6802      	ldr	r2, [r0, #0]
 800b36a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b36e:	2300      	movs	r3, #0
 800b370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b374:	e7f7      	b.n	800b366 <_Balloc+0x66>
 800b376:	bf00      	nop
 800b378:	0800c6e5 	.word	0x0800c6e5
 800b37c:	0800c765 	.word	0x0800c765

0800b380 <_Bfree>:
 800b380:	b570      	push	{r4, r5, r6, lr}
 800b382:	69c6      	ldr	r6, [r0, #28]
 800b384:	4605      	mov	r5, r0
 800b386:	460c      	mov	r4, r1
 800b388:	b976      	cbnz	r6, 800b3a8 <_Bfree+0x28>
 800b38a:	2010      	movs	r0, #16
 800b38c:	f7ff ff02 	bl	800b194 <malloc>
 800b390:	4602      	mov	r2, r0
 800b392:	61e8      	str	r0, [r5, #28]
 800b394:	b920      	cbnz	r0, 800b3a0 <_Bfree+0x20>
 800b396:	4b09      	ldr	r3, [pc, #36]	@ (800b3bc <_Bfree+0x3c>)
 800b398:	4809      	ldr	r0, [pc, #36]	@ (800b3c0 <_Bfree+0x40>)
 800b39a:	218f      	movs	r1, #143	@ 0x8f
 800b39c:	f000 fdba 	bl	800bf14 <__assert_func>
 800b3a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3a4:	6006      	str	r6, [r0, #0]
 800b3a6:	60c6      	str	r6, [r0, #12]
 800b3a8:	b13c      	cbz	r4, 800b3ba <_Bfree+0x3a>
 800b3aa:	69eb      	ldr	r3, [r5, #28]
 800b3ac:	6862      	ldr	r2, [r4, #4]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3b4:	6021      	str	r1, [r4, #0]
 800b3b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3ba:	bd70      	pop	{r4, r5, r6, pc}
 800b3bc:	0800c6e5 	.word	0x0800c6e5
 800b3c0:	0800c765 	.word	0x0800c765

0800b3c4 <__multadd>:
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	690d      	ldr	r5, [r1, #16]
 800b3ca:	4607      	mov	r7, r0
 800b3cc:	460c      	mov	r4, r1
 800b3ce:	461e      	mov	r6, r3
 800b3d0:	f101 0c14 	add.w	ip, r1, #20
 800b3d4:	2000      	movs	r0, #0
 800b3d6:	f8dc 3000 	ldr.w	r3, [ip]
 800b3da:	b299      	uxth	r1, r3
 800b3dc:	fb02 6101 	mla	r1, r2, r1, r6
 800b3e0:	0c1e      	lsrs	r6, r3, #16
 800b3e2:	0c0b      	lsrs	r3, r1, #16
 800b3e4:	fb02 3306 	mla	r3, r2, r6, r3
 800b3e8:	b289      	uxth	r1, r1
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3f0:	4285      	cmp	r5, r0
 800b3f2:	f84c 1b04 	str.w	r1, [ip], #4
 800b3f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3fa:	dcec      	bgt.n	800b3d6 <__multadd+0x12>
 800b3fc:	b30e      	cbz	r6, 800b442 <__multadd+0x7e>
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	42ab      	cmp	r3, r5
 800b402:	dc19      	bgt.n	800b438 <__multadd+0x74>
 800b404:	6861      	ldr	r1, [r4, #4]
 800b406:	4638      	mov	r0, r7
 800b408:	3101      	adds	r1, #1
 800b40a:	f7ff ff79 	bl	800b300 <_Balloc>
 800b40e:	4680      	mov	r8, r0
 800b410:	b928      	cbnz	r0, 800b41e <__multadd+0x5a>
 800b412:	4602      	mov	r2, r0
 800b414:	4b0c      	ldr	r3, [pc, #48]	@ (800b448 <__multadd+0x84>)
 800b416:	480d      	ldr	r0, [pc, #52]	@ (800b44c <__multadd+0x88>)
 800b418:	21ba      	movs	r1, #186	@ 0xba
 800b41a:	f000 fd7b 	bl	800bf14 <__assert_func>
 800b41e:	6922      	ldr	r2, [r4, #16]
 800b420:	3202      	adds	r2, #2
 800b422:	f104 010c 	add.w	r1, r4, #12
 800b426:	0092      	lsls	r2, r2, #2
 800b428:	300c      	adds	r0, #12
 800b42a:	f000 fd65 	bl	800bef8 <memcpy>
 800b42e:	4621      	mov	r1, r4
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff ffa5 	bl	800b380 <_Bfree>
 800b436:	4644      	mov	r4, r8
 800b438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b43c:	3501      	adds	r5, #1
 800b43e:	615e      	str	r6, [r3, #20]
 800b440:	6125      	str	r5, [r4, #16]
 800b442:	4620      	mov	r0, r4
 800b444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b448:	0800c754 	.word	0x0800c754
 800b44c:	0800c765 	.word	0x0800c765

0800b450 <__hi0bits>:
 800b450:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b454:	4603      	mov	r3, r0
 800b456:	bf36      	itet	cc
 800b458:	0403      	lslcc	r3, r0, #16
 800b45a:	2000      	movcs	r0, #0
 800b45c:	2010      	movcc	r0, #16
 800b45e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b462:	bf3c      	itt	cc
 800b464:	021b      	lslcc	r3, r3, #8
 800b466:	3008      	addcc	r0, #8
 800b468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b46c:	bf3c      	itt	cc
 800b46e:	011b      	lslcc	r3, r3, #4
 800b470:	3004      	addcc	r0, #4
 800b472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b476:	bf3c      	itt	cc
 800b478:	009b      	lslcc	r3, r3, #2
 800b47a:	3002      	addcc	r0, #2
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	db05      	blt.n	800b48c <__hi0bits+0x3c>
 800b480:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b484:	f100 0001 	add.w	r0, r0, #1
 800b488:	bf08      	it	eq
 800b48a:	2020      	moveq	r0, #32
 800b48c:	4770      	bx	lr

0800b48e <__lo0bits>:
 800b48e:	6803      	ldr	r3, [r0, #0]
 800b490:	4602      	mov	r2, r0
 800b492:	f013 0007 	ands.w	r0, r3, #7
 800b496:	d00b      	beq.n	800b4b0 <__lo0bits+0x22>
 800b498:	07d9      	lsls	r1, r3, #31
 800b49a:	d421      	bmi.n	800b4e0 <__lo0bits+0x52>
 800b49c:	0798      	lsls	r0, r3, #30
 800b49e:	bf49      	itett	mi
 800b4a0:	085b      	lsrmi	r3, r3, #1
 800b4a2:	089b      	lsrpl	r3, r3, #2
 800b4a4:	2001      	movmi	r0, #1
 800b4a6:	6013      	strmi	r3, [r2, #0]
 800b4a8:	bf5c      	itt	pl
 800b4aa:	6013      	strpl	r3, [r2, #0]
 800b4ac:	2002      	movpl	r0, #2
 800b4ae:	4770      	bx	lr
 800b4b0:	b299      	uxth	r1, r3
 800b4b2:	b909      	cbnz	r1, 800b4b8 <__lo0bits+0x2a>
 800b4b4:	0c1b      	lsrs	r3, r3, #16
 800b4b6:	2010      	movs	r0, #16
 800b4b8:	b2d9      	uxtb	r1, r3
 800b4ba:	b909      	cbnz	r1, 800b4c0 <__lo0bits+0x32>
 800b4bc:	3008      	adds	r0, #8
 800b4be:	0a1b      	lsrs	r3, r3, #8
 800b4c0:	0719      	lsls	r1, r3, #28
 800b4c2:	bf04      	itt	eq
 800b4c4:	091b      	lsreq	r3, r3, #4
 800b4c6:	3004      	addeq	r0, #4
 800b4c8:	0799      	lsls	r1, r3, #30
 800b4ca:	bf04      	itt	eq
 800b4cc:	089b      	lsreq	r3, r3, #2
 800b4ce:	3002      	addeq	r0, #2
 800b4d0:	07d9      	lsls	r1, r3, #31
 800b4d2:	d403      	bmi.n	800b4dc <__lo0bits+0x4e>
 800b4d4:	085b      	lsrs	r3, r3, #1
 800b4d6:	f100 0001 	add.w	r0, r0, #1
 800b4da:	d003      	beq.n	800b4e4 <__lo0bits+0x56>
 800b4dc:	6013      	str	r3, [r2, #0]
 800b4de:	4770      	bx	lr
 800b4e0:	2000      	movs	r0, #0
 800b4e2:	4770      	bx	lr
 800b4e4:	2020      	movs	r0, #32
 800b4e6:	4770      	bx	lr

0800b4e8 <__i2b>:
 800b4e8:	b510      	push	{r4, lr}
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	2101      	movs	r1, #1
 800b4ee:	f7ff ff07 	bl	800b300 <_Balloc>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	b928      	cbnz	r0, 800b502 <__i2b+0x1a>
 800b4f6:	4b05      	ldr	r3, [pc, #20]	@ (800b50c <__i2b+0x24>)
 800b4f8:	4805      	ldr	r0, [pc, #20]	@ (800b510 <__i2b+0x28>)
 800b4fa:	f240 1145 	movw	r1, #325	@ 0x145
 800b4fe:	f000 fd09 	bl	800bf14 <__assert_func>
 800b502:	2301      	movs	r3, #1
 800b504:	6144      	str	r4, [r0, #20]
 800b506:	6103      	str	r3, [r0, #16]
 800b508:	bd10      	pop	{r4, pc}
 800b50a:	bf00      	nop
 800b50c:	0800c754 	.word	0x0800c754
 800b510:	0800c765 	.word	0x0800c765

0800b514 <__multiply>:
 800b514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b518:	4617      	mov	r7, r2
 800b51a:	690a      	ldr	r2, [r1, #16]
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	429a      	cmp	r2, r3
 800b520:	bfa8      	it	ge
 800b522:	463b      	movge	r3, r7
 800b524:	4689      	mov	r9, r1
 800b526:	bfa4      	itt	ge
 800b528:	460f      	movge	r7, r1
 800b52a:	4699      	movge	r9, r3
 800b52c:	693d      	ldr	r5, [r7, #16]
 800b52e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6879      	ldr	r1, [r7, #4]
 800b536:	eb05 060a 	add.w	r6, r5, sl
 800b53a:	42b3      	cmp	r3, r6
 800b53c:	b085      	sub	sp, #20
 800b53e:	bfb8      	it	lt
 800b540:	3101      	addlt	r1, #1
 800b542:	f7ff fedd 	bl	800b300 <_Balloc>
 800b546:	b930      	cbnz	r0, 800b556 <__multiply+0x42>
 800b548:	4602      	mov	r2, r0
 800b54a:	4b41      	ldr	r3, [pc, #260]	@ (800b650 <__multiply+0x13c>)
 800b54c:	4841      	ldr	r0, [pc, #260]	@ (800b654 <__multiply+0x140>)
 800b54e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b552:	f000 fcdf 	bl	800bf14 <__assert_func>
 800b556:	f100 0414 	add.w	r4, r0, #20
 800b55a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b55e:	4623      	mov	r3, r4
 800b560:	2200      	movs	r2, #0
 800b562:	4573      	cmp	r3, lr
 800b564:	d320      	bcc.n	800b5a8 <__multiply+0x94>
 800b566:	f107 0814 	add.w	r8, r7, #20
 800b56a:	f109 0114 	add.w	r1, r9, #20
 800b56e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b572:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b576:	9302      	str	r3, [sp, #8]
 800b578:	1beb      	subs	r3, r5, r7
 800b57a:	3b15      	subs	r3, #21
 800b57c:	f023 0303 	bic.w	r3, r3, #3
 800b580:	3304      	adds	r3, #4
 800b582:	3715      	adds	r7, #21
 800b584:	42bd      	cmp	r5, r7
 800b586:	bf38      	it	cc
 800b588:	2304      	movcc	r3, #4
 800b58a:	9301      	str	r3, [sp, #4]
 800b58c:	9b02      	ldr	r3, [sp, #8]
 800b58e:	9103      	str	r1, [sp, #12]
 800b590:	428b      	cmp	r3, r1
 800b592:	d80c      	bhi.n	800b5ae <__multiply+0x9a>
 800b594:	2e00      	cmp	r6, #0
 800b596:	dd03      	ble.n	800b5a0 <__multiply+0x8c>
 800b598:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d055      	beq.n	800b64c <__multiply+0x138>
 800b5a0:	6106      	str	r6, [r0, #16]
 800b5a2:	b005      	add	sp, #20
 800b5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a8:	f843 2b04 	str.w	r2, [r3], #4
 800b5ac:	e7d9      	b.n	800b562 <__multiply+0x4e>
 800b5ae:	f8b1 a000 	ldrh.w	sl, [r1]
 800b5b2:	f1ba 0f00 	cmp.w	sl, #0
 800b5b6:	d01f      	beq.n	800b5f8 <__multiply+0xe4>
 800b5b8:	46c4      	mov	ip, r8
 800b5ba:	46a1      	mov	r9, r4
 800b5bc:	2700      	movs	r7, #0
 800b5be:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5c2:	f8d9 3000 	ldr.w	r3, [r9]
 800b5c6:	fa1f fb82 	uxth.w	fp, r2
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800b5d0:	443b      	add	r3, r7
 800b5d2:	f8d9 7000 	ldr.w	r7, [r9]
 800b5d6:	0c12      	lsrs	r2, r2, #16
 800b5d8:	0c3f      	lsrs	r7, r7, #16
 800b5da:	fb0a 7202 	mla	r2, sl, r2, r7
 800b5de:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b5e2:	b29b      	uxth	r3, r3
 800b5e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5e8:	4565      	cmp	r5, ip
 800b5ea:	f849 3b04 	str.w	r3, [r9], #4
 800b5ee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b5f2:	d8e4      	bhi.n	800b5be <__multiply+0xaa>
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	50e7      	str	r7, [r4, r3]
 800b5f8:	9b03      	ldr	r3, [sp, #12]
 800b5fa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b5fe:	3104      	adds	r1, #4
 800b600:	f1b9 0f00 	cmp.w	r9, #0
 800b604:	d020      	beq.n	800b648 <__multiply+0x134>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	4647      	mov	r7, r8
 800b60a:	46a4      	mov	ip, r4
 800b60c:	f04f 0a00 	mov.w	sl, #0
 800b610:	f8b7 b000 	ldrh.w	fp, [r7]
 800b614:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b618:	fb09 220b 	mla	r2, r9, fp, r2
 800b61c:	4452      	add	r2, sl
 800b61e:	b29b      	uxth	r3, r3
 800b620:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b624:	f84c 3b04 	str.w	r3, [ip], #4
 800b628:	f857 3b04 	ldr.w	r3, [r7], #4
 800b62c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b630:	f8bc 3000 	ldrh.w	r3, [ip]
 800b634:	fb09 330a 	mla	r3, r9, sl, r3
 800b638:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b63c:	42bd      	cmp	r5, r7
 800b63e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b642:	d8e5      	bhi.n	800b610 <__multiply+0xfc>
 800b644:	9a01      	ldr	r2, [sp, #4]
 800b646:	50a3      	str	r3, [r4, r2]
 800b648:	3404      	adds	r4, #4
 800b64a:	e79f      	b.n	800b58c <__multiply+0x78>
 800b64c:	3e01      	subs	r6, #1
 800b64e:	e7a1      	b.n	800b594 <__multiply+0x80>
 800b650:	0800c754 	.word	0x0800c754
 800b654:	0800c765 	.word	0x0800c765

0800b658 <__pow5mult>:
 800b658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	4615      	mov	r5, r2
 800b65e:	f012 0203 	ands.w	r2, r2, #3
 800b662:	4607      	mov	r7, r0
 800b664:	460e      	mov	r6, r1
 800b666:	d007      	beq.n	800b678 <__pow5mult+0x20>
 800b668:	4c25      	ldr	r4, [pc, #148]	@ (800b700 <__pow5mult+0xa8>)
 800b66a:	3a01      	subs	r2, #1
 800b66c:	2300      	movs	r3, #0
 800b66e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b672:	f7ff fea7 	bl	800b3c4 <__multadd>
 800b676:	4606      	mov	r6, r0
 800b678:	10ad      	asrs	r5, r5, #2
 800b67a:	d03d      	beq.n	800b6f8 <__pow5mult+0xa0>
 800b67c:	69fc      	ldr	r4, [r7, #28]
 800b67e:	b97c      	cbnz	r4, 800b6a0 <__pow5mult+0x48>
 800b680:	2010      	movs	r0, #16
 800b682:	f7ff fd87 	bl	800b194 <malloc>
 800b686:	4602      	mov	r2, r0
 800b688:	61f8      	str	r0, [r7, #28]
 800b68a:	b928      	cbnz	r0, 800b698 <__pow5mult+0x40>
 800b68c:	4b1d      	ldr	r3, [pc, #116]	@ (800b704 <__pow5mult+0xac>)
 800b68e:	481e      	ldr	r0, [pc, #120]	@ (800b708 <__pow5mult+0xb0>)
 800b690:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b694:	f000 fc3e 	bl	800bf14 <__assert_func>
 800b698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b69c:	6004      	str	r4, [r0, #0]
 800b69e:	60c4      	str	r4, [r0, #12]
 800b6a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b6a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6a8:	b94c      	cbnz	r4, 800b6be <__pow5mult+0x66>
 800b6aa:	f240 2171 	movw	r1, #625	@ 0x271
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7ff ff1a 	bl	800b4e8 <__i2b>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	6003      	str	r3, [r0, #0]
 800b6be:	f04f 0900 	mov.w	r9, #0
 800b6c2:	07eb      	lsls	r3, r5, #31
 800b6c4:	d50a      	bpl.n	800b6dc <__pow5mult+0x84>
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	4622      	mov	r2, r4
 800b6ca:	4638      	mov	r0, r7
 800b6cc:	f7ff ff22 	bl	800b514 <__multiply>
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4680      	mov	r8, r0
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff fe53 	bl	800b380 <_Bfree>
 800b6da:	4646      	mov	r6, r8
 800b6dc:	106d      	asrs	r5, r5, #1
 800b6de:	d00b      	beq.n	800b6f8 <__pow5mult+0xa0>
 800b6e0:	6820      	ldr	r0, [r4, #0]
 800b6e2:	b938      	cbnz	r0, 800b6f4 <__pow5mult+0x9c>
 800b6e4:	4622      	mov	r2, r4
 800b6e6:	4621      	mov	r1, r4
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f7ff ff13 	bl	800b514 <__multiply>
 800b6ee:	6020      	str	r0, [r4, #0]
 800b6f0:	f8c0 9000 	str.w	r9, [r0]
 800b6f4:	4604      	mov	r4, r0
 800b6f6:	e7e4      	b.n	800b6c2 <__pow5mult+0x6a>
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6fe:	bf00      	nop
 800b700:	0800c818 	.word	0x0800c818
 800b704:	0800c6e5 	.word	0x0800c6e5
 800b708:	0800c765 	.word	0x0800c765

0800b70c <__lshift>:
 800b70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b710:	460c      	mov	r4, r1
 800b712:	6849      	ldr	r1, [r1, #4]
 800b714:	6923      	ldr	r3, [r4, #16]
 800b716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b71a:	68a3      	ldr	r3, [r4, #8]
 800b71c:	4607      	mov	r7, r0
 800b71e:	4691      	mov	r9, r2
 800b720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b724:	f108 0601 	add.w	r6, r8, #1
 800b728:	42b3      	cmp	r3, r6
 800b72a:	db0b      	blt.n	800b744 <__lshift+0x38>
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7ff fde7 	bl	800b300 <_Balloc>
 800b732:	4605      	mov	r5, r0
 800b734:	b948      	cbnz	r0, 800b74a <__lshift+0x3e>
 800b736:	4602      	mov	r2, r0
 800b738:	4b28      	ldr	r3, [pc, #160]	@ (800b7dc <__lshift+0xd0>)
 800b73a:	4829      	ldr	r0, [pc, #164]	@ (800b7e0 <__lshift+0xd4>)
 800b73c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b740:	f000 fbe8 	bl	800bf14 <__assert_func>
 800b744:	3101      	adds	r1, #1
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	e7ee      	b.n	800b728 <__lshift+0x1c>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f100 0114 	add.w	r1, r0, #20
 800b750:	f100 0210 	add.w	r2, r0, #16
 800b754:	4618      	mov	r0, r3
 800b756:	4553      	cmp	r3, sl
 800b758:	db33      	blt.n	800b7c2 <__lshift+0xb6>
 800b75a:	6920      	ldr	r0, [r4, #16]
 800b75c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b760:	f104 0314 	add.w	r3, r4, #20
 800b764:	f019 091f 	ands.w	r9, r9, #31
 800b768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b76c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b770:	d02b      	beq.n	800b7ca <__lshift+0xbe>
 800b772:	f1c9 0e20 	rsb	lr, r9, #32
 800b776:	468a      	mov	sl, r1
 800b778:	2200      	movs	r2, #0
 800b77a:	6818      	ldr	r0, [r3, #0]
 800b77c:	fa00 f009 	lsl.w	r0, r0, r9
 800b780:	4310      	orrs	r0, r2
 800b782:	f84a 0b04 	str.w	r0, [sl], #4
 800b786:	f853 2b04 	ldr.w	r2, [r3], #4
 800b78a:	459c      	cmp	ip, r3
 800b78c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b790:	d8f3      	bhi.n	800b77a <__lshift+0x6e>
 800b792:	ebac 0304 	sub.w	r3, ip, r4
 800b796:	3b15      	subs	r3, #21
 800b798:	f023 0303 	bic.w	r3, r3, #3
 800b79c:	3304      	adds	r3, #4
 800b79e:	f104 0015 	add.w	r0, r4, #21
 800b7a2:	4560      	cmp	r0, ip
 800b7a4:	bf88      	it	hi
 800b7a6:	2304      	movhi	r3, #4
 800b7a8:	50ca      	str	r2, [r1, r3]
 800b7aa:	b10a      	cbz	r2, 800b7b0 <__lshift+0xa4>
 800b7ac:	f108 0602 	add.w	r6, r8, #2
 800b7b0:	3e01      	subs	r6, #1
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	612e      	str	r6, [r5, #16]
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	f7ff fde2 	bl	800b380 <_Bfree>
 800b7bc:	4628      	mov	r0, r5
 800b7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	e7c5      	b.n	800b756 <__lshift+0x4a>
 800b7ca:	3904      	subs	r1, #4
 800b7cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7d4:	459c      	cmp	ip, r3
 800b7d6:	d8f9      	bhi.n	800b7cc <__lshift+0xc0>
 800b7d8:	e7ea      	b.n	800b7b0 <__lshift+0xa4>
 800b7da:	bf00      	nop
 800b7dc:	0800c754 	.word	0x0800c754
 800b7e0:	0800c765 	.word	0x0800c765

0800b7e4 <__mcmp>:
 800b7e4:	690a      	ldr	r2, [r1, #16]
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	6900      	ldr	r0, [r0, #16]
 800b7ea:	1a80      	subs	r0, r0, r2
 800b7ec:	b530      	push	{r4, r5, lr}
 800b7ee:	d10e      	bne.n	800b80e <__mcmp+0x2a>
 800b7f0:	3314      	adds	r3, #20
 800b7f2:	3114      	adds	r1, #20
 800b7f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b7f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b7fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b800:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b804:	4295      	cmp	r5, r2
 800b806:	d003      	beq.n	800b810 <__mcmp+0x2c>
 800b808:	d205      	bcs.n	800b816 <__mcmp+0x32>
 800b80a:	f04f 30ff 	mov.w	r0, #4294967295
 800b80e:	bd30      	pop	{r4, r5, pc}
 800b810:	42a3      	cmp	r3, r4
 800b812:	d3f3      	bcc.n	800b7fc <__mcmp+0x18>
 800b814:	e7fb      	b.n	800b80e <__mcmp+0x2a>
 800b816:	2001      	movs	r0, #1
 800b818:	e7f9      	b.n	800b80e <__mcmp+0x2a>
	...

0800b81c <__mdiff>:
 800b81c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b820:	4689      	mov	r9, r1
 800b822:	4606      	mov	r6, r0
 800b824:	4611      	mov	r1, r2
 800b826:	4648      	mov	r0, r9
 800b828:	4614      	mov	r4, r2
 800b82a:	f7ff ffdb 	bl	800b7e4 <__mcmp>
 800b82e:	1e05      	subs	r5, r0, #0
 800b830:	d112      	bne.n	800b858 <__mdiff+0x3c>
 800b832:	4629      	mov	r1, r5
 800b834:	4630      	mov	r0, r6
 800b836:	f7ff fd63 	bl	800b300 <_Balloc>
 800b83a:	4602      	mov	r2, r0
 800b83c:	b928      	cbnz	r0, 800b84a <__mdiff+0x2e>
 800b83e:	4b3f      	ldr	r3, [pc, #252]	@ (800b93c <__mdiff+0x120>)
 800b840:	f240 2137 	movw	r1, #567	@ 0x237
 800b844:	483e      	ldr	r0, [pc, #248]	@ (800b940 <__mdiff+0x124>)
 800b846:	f000 fb65 	bl	800bf14 <__assert_func>
 800b84a:	2301      	movs	r3, #1
 800b84c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b850:	4610      	mov	r0, r2
 800b852:	b003      	add	sp, #12
 800b854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b858:	bfbc      	itt	lt
 800b85a:	464b      	movlt	r3, r9
 800b85c:	46a1      	movlt	r9, r4
 800b85e:	4630      	mov	r0, r6
 800b860:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b864:	bfba      	itte	lt
 800b866:	461c      	movlt	r4, r3
 800b868:	2501      	movlt	r5, #1
 800b86a:	2500      	movge	r5, #0
 800b86c:	f7ff fd48 	bl	800b300 <_Balloc>
 800b870:	4602      	mov	r2, r0
 800b872:	b918      	cbnz	r0, 800b87c <__mdiff+0x60>
 800b874:	4b31      	ldr	r3, [pc, #196]	@ (800b93c <__mdiff+0x120>)
 800b876:	f240 2145 	movw	r1, #581	@ 0x245
 800b87a:	e7e3      	b.n	800b844 <__mdiff+0x28>
 800b87c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b880:	6926      	ldr	r6, [r4, #16]
 800b882:	60c5      	str	r5, [r0, #12]
 800b884:	f109 0310 	add.w	r3, r9, #16
 800b888:	f109 0514 	add.w	r5, r9, #20
 800b88c:	f104 0e14 	add.w	lr, r4, #20
 800b890:	f100 0b14 	add.w	fp, r0, #20
 800b894:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b898:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b89c:	9301      	str	r3, [sp, #4]
 800b89e:	46d9      	mov	r9, fp
 800b8a0:	f04f 0c00 	mov.w	ip, #0
 800b8a4:	9b01      	ldr	r3, [sp, #4]
 800b8a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b8aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	fa1f f38a 	uxth.w	r3, sl
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	b283      	uxth	r3, r0
 800b8b8:	1acb      	subs	r3, r1, r3
 800b8ba:	0c00      	lsrs	r0, r0, #16
 800b8bc:	4463      	add	r3, ip
 800b8be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b8c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b8c6:	b29b      	uxth	r3, r3
 800b8c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b8cc:	4576      	cmp	r6, lr
 800b8ce:	f849 3b04 	str.w	r3, [r9], #4
 800b8d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8d6:	d8e5      	bhi.n	800b8a4 <__mdiff+0x88>
 800b8d8:	1b33      	subs	r3, r6, r4
 800b8da:	3b15      	subs	r3, #21
 800b8dc:	f023 0303 	bic.w	r3, r3, #3
 800b8e0:	3415      	adds	r4, #21
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	42a6      	cmp	r6, r4
 800b8e6:	bf38      	it	cc
 800b8e8:	2304      	movcc	r3, #4
 800b8ea:	441d      	add	r5, r3
 800b8ec:	445b      	add	r3, fp
 800b8ee:	461e      	mov	r6, r3
 800b8f0:	462c      	mov	r4, r5
 800b8f2:	4544      	cmp	r4, r8
 800b8f4:	d30e      	bcc.n	800b914 <__mdiff+0xf8>
 800b8f6:	f108 0103 	add.w	r1, r8, #3
 800b8fa:	1b49      	subs	r1, r1, r5
 800b8fc:	f021 0103 	bic.w	r1, r1, #3
 800b900:	3d03      	subs	r5, #3
 800b902:	45a8      	cmp	r8, r5
 800b904:	bf38      	it	cc
 800b906:	2100      	movcc	r1, #0
 800b908:	440b      	add	r3, r1
 800b90a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b90e:	b191      	cbz	r1, 800b936 <__mdiff+0x11a>
 800b910:	6117      	str	r7, [r2, #16]
 800b912:	e79d      	b.n	800b850 <__mdiff+0x34>
 800b914:	f854 1b04 	ldr.w	r1, [r4], #4
 800b918:	46e6      	mov	lr, ip
 800b91a:	0c08      	lsrs	r0, r1, #16
 800b91c:	fa1c fc81 	uxtah	ip, ip, r1
 800b920:	4471      	add	r1, lr
 800b922:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b926:	b289      	uxth	r1, r1
 800b928:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b92c:	f846 1b04 	str.w	r1, [r6], #4
 800b930:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b934:	e7dd      	b.n	800b8f2 <__mdiff+0xd6>
 800b936:	3f01      	subs	r7, #1
 800b938:	e7e7      	b.n	800b90a <__mdiff+0xee>
 800b93a:	bf00      	nop
 800b93c:	0800c754 	.word	0x0800c754
 800b940:	0800c765 	.word	0x0800c765

0800b944 <__d2b>:
 800b944:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b948:	460f      	mov	r7, r1
 800b94a:	2101      	movs	r1, #1
 800b94c:	ec59 8b10 	vmov	r8, r9, d0
 800b950:	4616      	mov	r6, r2
 800b952:	f7ff fcd5 	bl	800b300 <_Balloc>
 800b956:	4604      	mov	r4, r0
 800b958:	b930      	cbnz	r0, 800b968 <__d2b+0x24>
 800b95a:	4602      	mov	r2, r0
 800b95c:	4b23      	ldr	r3, [pc, #140]	@ (800b9ec <__d2b+0xa8>)
 800b95e:	4824      	ldr	r0, [pc, #144]	@ (800b9f0 <__d2b+0xac>)
 800b960:	f240 310f 	movw	r1, #783	@ 0x30f
 800b964:	f000 fad6 	bl	800bf14 <__assert_func>
 800b968:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b96c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b970:	b10d      	cbz	r5, 800b976 <__d2b+0x32>
 800b972:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	f1b8 0300 	subs.w	r3, r8, #0
 800b97c:	d023      	beq.n	800b9c6 <__d2b+0x82>
 800b97e:	4668      	mov	r0, sp
 800b980:	9300      	str	r3, [sp, #0]
 800b982:	f7ff fd84 	bl	800b48e <__lo0bits>
 800b986:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b98a:	b1d0      	cbz	r0, 800b9c2 <__d2b+0x7e>
 800b98c:	f1c0 0320 	rsb	r3, r0, #32
 800b990:	fa02 f303 	lsl.w	r3, r2, r3
 800b994:	430b      	orrs	r3, r1
 800b996:	40c2      	lsrs	r2, r0
 800b998:	6163      	str	r3, [r4, #20]
 800b99a:	9201      	str	r2, [sp, #4]
 800b99c:	9b01      	ldr	r3, [sp, #4]
 800b99e:	61a3      	str	r3, [r4, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	bf0c      	ite	eq
 800b9a4:	2201      	moveq	r2, #1
 800b9a6:	2202      	movne	r2, #2
 800b9a8:	6122      	str	r2, [r4, #16]
 800b9aa:	b1a5      	cbz	r5, 800b9d6 <__d2b+0x92>
 800b9ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b9b0:	4405      	add	r5, r0
 800b9b2:	603d      	str	r5, [r7, #0]
 800b9b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b9b8:	6030      	str	r0, [r6, #0]
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	b003      	add	sp, #12
 800b9be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9c2:	6161      	str	r1, [r4, #20]
 800b9c4:	e7ea      	b.n	800b99c <__d2b+0x58>
 800b9c6:	a801      	add	r0, sp, #4
 800b9c8:	f7ff fd61 	bl	800b48e <__lo0bits>
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	6163      	str	r3, [r4, #20]
 800b9d0:	3020      	adds	r0, #32
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	e7e8      	b.n	800b9a8 <__d2b+0x64>
 800b9d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b9da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b9de:	6038      	str	r0, [r7, #0]
 800b9e0:	6918      	ldr	r0, [r3, #16]
 800b9e2:	f7ff fd35 	bl	800b450 <__hi0bits>
 800b9e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b9ea:	e7e5      	b.n	800b9b8 <__d2b+0x74>
 800b9ec:	0800c754 	.word	0x0800c754
 800b9f0:	0800c765 	.word	0x0800c765

0800b9f4 <__sfputc_r>:
 800b9f4:	6893      	ldr	r3, [r2, #8]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	b410      	push	{r4}
 800b9fc:	6093      	str	r3, [r2, #8]
 800b9fe:	da08      	bge.n	800ba12 <__sfputc_r+0x1e>
 800ba00:	6994      	ldr	r4, [r2, #24]
 800ba02:	42a3      	cmp	r3, r4
 800ba04:	db01      	blt.n	800ba0a <__sfputc_r+0x16>
 800ba06:	290a      	cmp	r1, #10
 800ba08:	d103      	bne.n	800ba12 <__sfputc_r+0x1e>
 800ba0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba0e:	f7fe bc0a 	b.w	800a226 <__swbuf_r>
 800ba12:	6813      	ldr	r3, [r2, #0]
 800ba14:	1c58      	adds	r0, r3, #1
 800ba16:	6010      	str	r0, [r2, #0]
 800ba18:	7019      	strb	r1, [r3, #0]
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba20:	4770      	bx	lr

0800ba22 <__sfputs_r>:
 800ba22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba24:	4606      	mov	r6, r0
 800ba26:	460f      	mov	r7, r1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	18d5      	adds	r5, r2, r3
 800ba2c:	42ac      	cmp	r4, r5
 800ba2e:	d101      	bne.n	800ba34 <__sfputs_r+0x12>
 800ba30:	2000      	movs	r0, #0
 800ba32:	e007      	b.n	800ba44 <__sfputs_r+0x22>
 800ba34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba38:	463a      	mov	r2, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7ff ffda 	bl	800b9f4 <__sfputc_r>
 800ba40:	1c43      	adds	r3, r0, #1
 800ba42:	d1f3      	bne.n	800ba2c <__sfputs_r+0xa>
 800ba44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba48 <_vfiprintf_r>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	b09d      	sub	sp, #116	@ 0x74
 800ba50:	4614      	mov	r4, r2
 800ba52:	4698      	mov	r8, r3
 800ba54:	4606      	mov	r6, r0
 800ba56:	b118      	cbz	r0, 800ba60 <_vfiprintf_r+0x18>
 800ba58:	6a03      	ldr	r3, [r0, #32]
 800ba5a:	b90b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x18>
 800ba5c:	f7fe fafa 	bl	800a054 <__sinit>
 800ba60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d405      	bmi.n	800ba72 <_vfiprintf_r+0x2a>
 800ba66:	89ab      	ldrh	r3, [r5, #12]
 800ba68:	059a      	lsls	r2, r3, #22
 800ba6a:	d402      	bmi.n	800ba72 <_vfiprintf_r+0x2a>
 800ba6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba6e:	f7fe fcec 	bl	800a44a <__retarget_lock_acquire_recursive>
 800ba72:	89ab      	ldrh	r3, [r5, #12]
 800ba74:	071b      	lsls	r3, r3, #28
 800ba76:	d501      	bpl.n	800ba7c <_vfiprintf_r+0x34>
 800ba78:	692b      	ldr	r3, [r5, #16]
 800ba7a:	b99b      	cbnz	r3, 800baa4 <_vfiprintf_r+0x5c>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7fe fc10 	bl	800a2a4 <__swsetup_r>
 800ba84:	b170      	cbz	r0, 800baa4 <_vfiprintf_r+0x5c>
 800ba86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba88:	07dc      	lsls	r4, r3, #31
 800ba8a:	d504      	bpl.n	800ba96 <_vfiprintf_r+0x4e>
 800ba8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba90:	b01d      	add	sp, #116	@ 0x74
 800ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba96:	89ab      	ldrh	r3, [r5, #12]
 800ba98:	0598      	lsls	r0, r3, #22
 800ba9a:	d4f7      	bmi.n	800ba8c <_vfiprintf_r+0x44>
 800ba9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba9e:	f7fe fcd5 	bl	800a44c <__retarget_lock_release_recursive>
 800baa2:	e7f3      	b.n	800ba8c <_vfiprintf_r+0x44>
 800baa4:	2300      	movs	r3, #0
 800baa6:	9309      	str	r3, [sp, #36]	@ 0x24
 800baa8:	2320      	movs	r3, #32
 800baaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bab2:	2330      	movs	r3, #48	@ 0x30
 800bab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc64 <_vfiprintf_r+0x21c>
 800bab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800babc:	f04f 0901 	mov.w	r9, #1
 800bac0:	4623      	mov	r3, r4
 800bac2:	469a      	mov	sl, r3
 800bac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bac8:	b10a      	cbz	r2, 800bace <_vfiprintf_r+0x86>
 800baca:	2a25      	cmp	r2, #37	@ 0x25
 800bacc:	d1f9      	bne.n	800bac2 <_vfiprintf_r+0x7a>
 800bace:	ebba 0b04 	subs.w	fp, sl, r4
 800bad2:	d00b      	beq.n	800baec <_vfiprintf_r+0xa4>
 800bad4:	465b      	mov	r3, fp
 800bad6:	4622      	mov	r2, r4
 800bad8:	4629      	mov	r1, r5
 800bada:	4630      	mov	r0, r6
 800badc:	f7ff ffa1 	bl	800ba22 <__sfputs_r>
 800bae0:	3001      	adds	r0, #1
 800bae2:	f000 80a7 	beq.w	800bc34 <_vfiprintf_r+0x1ec>
 800bae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bae8:	445a      	add	r2, fp
 800baea:	9209      	str	r2, [sp, #36]	@ 0x24
 800baec:	f89a 3000 	ldrb.w	r3, [sl]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	f000 809f 	beq.w	800bc34 <_vfiprintf_r+0x1ec>
 800baf6:	2300      	movs	r3, #0
 800baf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bafc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb00:	f10a 0a01 	add.w	sl, sl, #1
 800bb04:	9304      	str	r3, [sp, #16]
 800bb06:	9307      	str	r3, [sp, #28]
 800bb08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb0e:	4654      	mov	r4, sl
 800bb10:	2205      	movs	r2, #5
 800bb12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb16:	4853      	ldr	r0, [pc, #332]	@ (800bc64 <_vfiprintf_r+0x21c>)
 800bb18:	f7f4 fb62 	bl	80001e0 <memchr>
 800bb1c:	9a04      	ldr	r2, [sp, #16]
 800bb1e:	b9d8      	cbnz	r0, 800bb58 <_vfiprintf_r+0x110>
 800bb20:	06d1      	lsls	r1, r2, #27
 800bb22:	bf44      	itt	mi
 800bb24:	2320      	movmi	r3, #32
 800bb26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb2a:	0713      	lsls	r3, r2, #28
 800bb2c:	bf44      	itt	mi
 800bb2e:	232b      	movmi	r3, #43	@ 0x2b
 800bb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb34:	f89a 3000 	ldrb.w	r3, [sl]
 800bb38:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb3a:	d015      	beq.n	800bb68 <_vfiprintf_r+0x120>
 800bb3c:	9a07      	ldr	r2, [sp, #28]
 800bb3e:	4654      	mov	r4, sl
 800bb40:	2000      	movs	r0, #0
 800bb42:	f04f 0c0a 	mov.w	ip, #10
 800bb46:	4621      	mov	r1, r4
 800bb48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb4c:	3b30      	subs	r3, #48	@ 0x30
 800bb4e:	2b09      	cmp	r3, #9
 800bb50:	d94b      	bls.n	800bbea <_vfiprintf_r+0x1a2>
 800bb52:	b1b0      	cbz	r0, 800bb82 <_vfiprintf_r+0x13a>
 800bb54:	9207      	str	r2, [sp, #28]
 800bb56:	e014      	b.n	800bb82 <_vfiprintf_r+0x13a>
 800bb58:	eba0 0308 	sub.w	r3, r0, r8
 800bb5c:	fa09 f303 	lsl.w	r3, r9, r3
 800bb60:	4313      	orrs	r3, r2
 800bb62:	9304      	str	r3, [sp, #16]
 800bb64:	46a2      	mov	sl, r4
 800bb66:	e7d2      	b.n	800bb0e <_vfiprintf_r+0xc6>
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	1d19      	adds	r1, r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	9103      	str	r1, [sp, #12]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	bfbb      	ittet	lt
 800bb74:	425b      	neglt	r3, r3
 800bb76:	f042 0202 	orrlt.w	r2, r2, #2
 800bb7a:	9307      	strge	r3, [sp, #28]
 800bb7c:	9307      	strlt	r3, [sp, #28]
 800bb7e:	bfb8      	it	lt
 800bb80:	9204      	strlt	r2, [sp, #16]
 800bb82:	7823      	ldrb	r3, [r4, #0]
 800bb84:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb86:	d10a      	bne.n	800bb9e <_vfiprintf_r+0x156>
 800bb88:	7863      	ldrb	r3, [r4, #1]
 800bb8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb8c:	d132      	bne.n	800bbf4 <_vfiprintf_r+0x1ac>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	1d1a      	adds	r2, r3, #4
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	9203      	str	r2, [sp, #12]
 800bb96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb9a:	3402      	adds	r4, #2
 800bb9c:	9305      	str	r3, [sp, #20]
 800bb9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc74 <_vfiprintf_r+0x22c>
 800bba2:	7821      	ldrb	r1, [r4, #0]
 800bba4:	2203      	movs	r2, #3
 800bba6:	4650      	mov	r0, sl
 800bba8:	f7f4 fb1a 	bl	80001e0 <memchr>
 800bbac:	b138      	cbz	r0, 800bbbe <_vfiprintf_r+0x176>
 800bbae:	9b04      	ldr	r3, [sp, #16]
 800bbb0:	eba0 000a 	sub.w	r0, r0, sl
 800bbb4:	2240      	movs	r2, #64	@ 0x40
 800bbb6:	4082      	lsls	r2, r0
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	3401      	adds	r4, #1
 800bbbc:	9304      	str	r3, [sp, #16]
 800bbbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbc2:	4829      	ldr	r0, [pc, #164]	@ (800bc68 <_vfiprintf_r+0x220>)
 800bbc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bbc8:	2206      	movs	r2, #6
 800bbca:	f7f4 fb09 	bl	80001e0 <memchr>
 800bbce:	2800      	cmp	r0, #0
 800bbd0:	d03f      	beq.n	800bc52 <_vfiprintf_r+0x20a>
 800bbd2:	4b26      	ldr	r3, [pc, #152]	@ (800bc6c <_vfiprintf_r+0x224>)
 800bbd4:	bb1b      	cbnz	r3, 800bc1e <_vfiprintf_r+0x1d6>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	3307      	adds	r3, #7
 800bbda:	f023 0307 	bic.w	r3, r3, #7
 800bbde:	3308      	adds	r3, #8
 800bbe0:	9303      	str	r3, [sp, #12]
 800bbe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe4:	443b      	add	r3, r7
 800bbe6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbe8:	e76a      	b.n	800bac0 <_vfiprintf_r+0x78>
 800bbea:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbee:	460c      	mov	r4, r1
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	e7a8      	b.n	800bb46 <_vfiprintf_r+0xfe>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	3401      	adds	r4, #1
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	f04f 0c0a 	mov.w	ip, #10
 800bc00:	4620      	mov	r0, r4
 800bc02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc06:	3a30      	subs	r2, #48	@ 0x30
 800bc08:	2a09      	cmp	r2, #9
 800bc0a:	d903      	bls.n	800bc14 <_vfiprintf_r+0x1cc>
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0c6      	beq.n	800bb9e <_vfiprintf_r+0x156>
 800bc10:	9105      	str	r1, [sp, #20]
 800bc12:	e7c4      	b.n	800bb9e <_vfiprintf_r+0x156>
 800bc14:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc18:	4604      	mov	r4, r0
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e7f0      	b.n	800bc00 <_vfiprintf_r+0x1b8>
 800bc1e:	ab03      	add	r3, sp, #12
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	462a      	mov	r2, r5
 800bc24:	4b12      	ldr	r3, [pc, #72]	@ (800bc70 <_vfiprintf_r+0x228>)
 800bc26:	a904      	add	r1, sp, #16
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f7fd fdd1 	bl	80097d0 <_printf_float>
 800bc2e:	4607      	mov	r7, r0
 800bc30:	1c78      	adds	r0, r7, #1
 800bc32:	d1d6      	bne.n	800bbe2 <_vfiprintf_r+0x19a>
 800bc34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc36:	07d9      	lsls	r1, r3, #31
 800bc38:	d405      	bmi.n	800bc46 <_vfiprintf_r+0x1fe>
 800bc3a:	89ab      	ldrh	r3, [r5, #12]
 800bc3c:	059a      	lsls	r2, r3, #22
 800bc3e:	d402      	bmi.n	800bc46 <_vfiprintf_r+0x1fe>
 800bc40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc42:	f7fe fc03 	bl	800a44c <__retarget_lock_release_recursive>
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	065b      	lsls	r3, r3, #25
 800bc4a:	f53f af1f 	bmi.w	800ba8c <_vfiprintf_r+0x44>
 800bc4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc50:	e71e      	b.n	800ba90 <_vfiprintf_r+0x48>
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	462a      	mov	r2, r5
 800bc58:	4b05      	ldr	r3, [pc, #20]	@ (800bc70 <_vfiprintf_r+0x228>)
 800bc5a:	a904      	add	r1, sp, #16
 800bc5c:	4630      	mov	r0, r6
 800bc5e:	f7fe f84f 	bl	8009d00 <_printf_i>
 800bc62:	e7e4      	b.n	800bc2e <_vfiprintf_r+0x1e6>
 800bc64:	0800c7be 	.word	0x0800c7be
 800bc68:	0800c7c8 	.word	0x0800c7c8
 800bc6c:	080097d1 	.word	0x080097d1
 800bc70:	0800ba23 	.word	0x0800ba23
 800bc74:	0800c7c4 	.word	0x0800c7c4

0800bc78 <__sflush_r>:
 800bc78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc80:	0716      	lsls	r6, r2, #28
 800bc82:	4605      	mov	r5, r0
 800bc84:	460c      	mov	r4, r1
 800bc86:	d454      	bmi.n	800bd32 <__sflush_r+0xba>
 800bc88:	684b      	ldr	r3, [r1, #4]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	dc02      	bgt.n	800bc94 <__sflush_r+0x1c>
 800bc8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	dd48      	ble.n	800bd26 <__sflush_r+0xae>
 800bc94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc96:	2e00      	cmp	r6, #0
 800bc98:	d045      	beq.n	800bd26 <__sflush_r+0xae>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bca0:	682f      	ldr	r7, [r5, #0]
 800bca2:	6a21      	ldr	r1, [r4, #32]
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	d030      	beq.n	800bd0a <__sflush_r+0x92>
 800bca8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bcaa:	89a3      	ldrh	r3, [r4, #12]
 800bcac:	0759      	lsls	r1, r3, #29
 800bcae:	d505      	bpl.n	800bcbc <__sflush_r+0x44>
 800bcb0:	6863      	ldr	r3, [r4, #4]
 800bcb2:	1ad2      	subs	r2, r2, r3
 800bcb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bcb6:	b10b      	cbz	r3, 800bcbc <__sflush_r+0x44>
 800bcb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bcba:	1ad2      	subs	r2, r2, r3
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcc0:	6a21      	ldr	r1, [r4, #32]
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	47b0      	blx	r6
 800bcc6:	1c43      	adds	r3, r0, #1
 800bcc8:	89a3      	ldrh	r3, [r4, #12]
 800bcca:	d106      	bne.n	800bcda <__sflush_r+0x62>
 800bccc:	6829      	ldr	r1, [r5, #0]
 800bcce:	291d      	cmp	r1, #29
 800bcd0:	d82b      	bhi.n	800bd2a <__sflush_r+0xb2>
 800bcd2:	4a2a      	ldr	r2, [pc, #168]	@ (800bd7c <__sflush_r+0x104>)
 800bcd4:	40ca      	lsrs	r2, r1
 800bcd6:	07d6      	lsls	r6, r2, #31
 800bcd8:	d527      	bpl.n	800bd2a <__sflush_r+0xb2>
 800bcda:	2200      	movs	r2, #0
 800bcdc:	6062      	str	r2, [r4, #4]
 800bcde:	04d9      	lsls	r1, r3, #19
 800bce0:	6922      	ldr	r2, [r4, #16]
 800bce2:	6022      	str	r2, [r4, #0]
 800bce4:	d504      	bpl.n	800bcf0 <__sflush_r+0x78>
 800bce6:	1c42      	adds	r2, r0, #1
 800bce8:	d101      	bne.n	800bcee <__sflush_r+0x76>
 800bcea:	682b      	ldr	r3, [r5, #0]
 800bcec:	b903      	cbnz	r3, 800bcf0 <__sflush_r+0x78>
 800bcee:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcf2:	602f      	str	r7, [r5, #0]
 800bcf4:	b1b9      	cbz	r1, 800bd26 <__sflush_r+0xae>
 800bcf6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcfa:	4299      	cmp	r1, r3
 800bcfc:	d002      	beq.n	800bd04 <__sflush_r+0x8c>
 800bcfe:	4628      	mov	r0, r5
 800bd00:	f7ff f9fe 	bl	800b100 <_free_r>
 800bd04:	2300      	movs	r3, #0
 800bd06:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd08:	e00d      	b.n	800bd26 <__sflush_r+0xae>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	47b0      	blx	r6
 800bd10:	4602      	mov	r2, r0
 800bd12:	1c50      	adds	r0, r2, #1
 800bd14:	d1c9      	bne.n	800bcaa <__sflush_r+0x32>
 800bd16:	682b      	ldr	r3, [r5, #0]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d0c6      	beq.n	800bcaa <__sflush_r+0x32>
 800bd1c:	2b1d      	cmp	r3, #29
 800bd1e:	d001      	beq.n	800bd24 <__sflush_r+0xac>
 800bd20:	2b16      	cmp	r3, #22
 800bd22:	d11e      	bne.n	800bd62 <__sflush_r+0xea>
 800bd24:	602f      	str	r7, [r5, #0]
 800bd26:	2000      	movs	r0, #0
 800bd28:	e022      	b.n	800bd70 <__sflush_r+0xf8>
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2e:	b21b      	sxth	r3, r3
 800bd30:	e01b      	b.n	800bd6a <__sflush_r+0xf2>
 800bd32:	690f      	ldr	r7, [r1, #16]
 800bd34:	2f00      	cmp	r7, #0
 800bd36:	d0f6      	beq.n	800bd26 <__sflush_r+0xae>
 800bd38:	0793      	lsls	r3, r2, #30
 800bd3a:	680e      	ldr	r6, [r1, #0]
 800bd3c:	bf08      	it	eq
 800bd3e:	694b      	ldreq	r3, [r1, #20]
 800bd40:	600f      	str	r7, [r1, #0]
 800bd42:	bf18      	it	ne
 800bd44:	2300      	movne	r3, #0
 800bd46:	eba6 0807 	sub.w	r8, r6, r7
 800bd4a:	608b      	str	r3, [r1, #8]
 800bd4c:	f1b8 0f00 	cmp.w	r8, #0
 800bd50:	dde9      	ble.n	800bd26 <__sflush_r+0xae>
 800bd52:	6a21      	ldr	r1, [r4, #32]
 800bd54:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd56:	4643      	mov	r3, r8
 800bd58:	463a      	mov	r2, r7
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b0      	blx	r6
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	dc08      	bgt.n	800bd74 <__sflush_r+0xfc>
 800bd62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd74:	4407      	add	r7, r0
 800bd76:	eba8 0800 	sub.w	r8, r8, r0
 800bd7a:	e7e7      	b.n	800bd4c <__sflush_r+0xd4>
 800bd7c:	20400001 	.word	0x20400001

0800bd80 <_fflush_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	690b      	ldr	r3, [r1, #16]
 800bd84:	4605      	mov	r5, r0
 800bd86:	460c      	mov	r4, r1
 800bd88:	b913      	cbnz	r3, 800bd90 <_fflush_r+0x10>
 800bd8a:	2500      	movs	r5, #0
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	bd38      	pop	{r3, r4, r5, pc}
 800bd90:	b118      	cbz	r0, 800bd9a <_fflush_r+0x1a>
 800bd92:	6a03      	ldr	r3, [r0, #32]
 800bd94:	b90b      	cbnz	r3, 800bd9a <_fflush_r+0x1a>
 800bd96:	f7fe f95d 	bl	800a054 <__sinit>
 800bd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f3      	beq.n	800bd8a <_fflush_r+0xa>
 800bda2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bda4:	07d0      	lsls	r0, r2, #31
 800bda6:	d404      	bmi.n	800bdb2 <_fflush_r+0x32>
 800bda8:	0599      	lsls	r1, r3, #22
 800bdaa:	d402      	bmi.n	800bdb2 <_fflush_r+0x32>
 800bdac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdae:	f7fe fb4c 	bl	800a44a <__retarget_lock_acquire_recursive>
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	f7ff ff5f 	bl	800bc78 <__sflush_r>
 800bdba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bdbc:	07da      	lsls	r2, r3, #31
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	d4e4      	bmi.n	800bd8c <_fflush_r+0xc>
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	059b      	lsls	r3, r3, #22
 800bdc6:	d4e1      	bmi.n	800bd8c <_fflush_r+0xc>
 800bdc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bdca:	f7fe fb3f 	bl	800a44c <__retarget_lock_release_recursive>
 800bdce:	e7dd      	b.n	800bd8c <_fflush_r+0xc>

0800bdd0 <__swhatbuf_r>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdd8:	2900      	cmp	r1, #0
 800bdda:	b096      	sub	sp, #88	@ 0x58
 800bddc:	4615      	mov	r5, r2
 800bdde:	461e      	mov	r6, r3
 800bde0:	da0d      	bge.n	800bdfe <__swhatbuf_r+0x2e>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bde8:	f04f 0100 	mov.w	r1, #0
 800bdec:	bf14      	ite	ne
 800bdee:	2340      	movne	r3, #64	@ 0x40
 800bdf0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	6031      	str	r1, [r6, #0]
 800bdf8:	602b      	str	r3, [r5, #0]
 800bdfa:	b016      	add	sp, #88	@ 0x58
 800bdfc:	bd70      	pop	{r4, r5, r6, pc}
 800bdfe:	466a      	mov	r2, sp
 800be00:	f000 f848 	bl	800be94 <_fstat_r>
 800be04:	2800      	cmp	r0, #0
 800be06:	dbec      	blt.n	800bde2 <__swhatbuf_r+0x12>
 800be08:	9901      	ldr	r1, [sp, #4]
 800be0a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be0e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be12:	4259      	negs	r1, r3
 800be14:	4159      	adcs	r1, r3
 800be16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be1a:	e7eb      	b.n	800bdf4 <__swhatbuf_r+0x24>

0800be1c <__smakebuf_r>:
 800be1c:	898b      	ldrh	r3, [r1, #12]
 800be1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be20:	079d      	lsls	r5, r3, #30
 800be22:	4606      	mov	r6, r0
 800be24:	460c      	mov	r4, r1
 800be26:	d507      	bpl.n	800be38 <__smakebuf_r+0x1c>
 800be28:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	6123      	str	r3, [r4, #16]
 800be30:	2301      	movs	r3, #1
 800be32:	6163      	str	r3, [r4, #20]
 800be34:	b003      	add	sp, #12
 800be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be38:	ab01      	add	r3, sp, #4
 800be3a:	466a      	mov	r2, sp
 800be3c:	f7ff ffc8 	bl	800bdd0 <__swhatbuf_r>
 800be40:	9f00      	ldr	r7, [sp, #0]
 800be42:	4605      	mov	r5, r0
 800be44:	4639      	mov	r1, r7
 800be46:	4630      	mov	r0, r6
 800be48:	f7ff f9ce 	bl	800b1e8 <_malloc_r>
 800be4c:	b948      	cbnz	r0, 800be62 <__smakebuf_r+0x46>
 800be4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be52:	059a      	lsls	r2, r3, #22
 800be54:	d4ee      	bmi.n	800be34 <__smakebuf_r+0x18>
 800be56:	f023 0303 	bic.w	r3, r3, #3
 800be5a:	f043 0302 	orr.w	r3, r3, #2
 800be5e:	81a3      	strh	r3, [r4, #12]
 800be60:	e7e2      	b.n	800be28 <__smakebuf_r+0xc>
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	6020      	str	r0, [r4, #0]
 800be66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be6a:	81a3      	strh	r3, [r4, #12]
 800be6c:	9b01      	ldr	r3, [sp, #4]
 800be6e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be72:	b15b      	cbz	r3, 800be8c <__smakebuf_r+0x70>
 800be74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be78:	4630      	mov	r0, r6
 800be7a:	f000 f81d 	bl	800beb8 <_isatty_r>
 800be7e:	b128      	cbz	r0, 800be8c <__smakebuf_r+0x70>
 800be80:	89a3      	ldrh	r3, [r4, #12]
 800be82:	f023 0303 	bic.w	r3, r3, #3
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	81a3      	strh	r3, [r4, #12]
 800be8c:	89a3      	ldrh	r3, [r4, #12]
 800be8e:	431d      	orrs	r5, r3
 800be90:	81a5      	strh	r5, [r4, #12]
 800be92:	e7cf      	b.n	800be34 <__smakebuf_r+0x18>

0800be94 <_fstat_r>:
 800be94:	b538      	push	{r3, r4, r5, lr}
 800be96:	4d07      	ldr	r5, [pc, #28]	@ (800beb4 <_fstat_r+0x20>)
 800be98:	2300      	movs	r3, #0
 800be9a:	4604      	mov	r4, r0
 800be9c:	4608      	mov	r0, r1
 800be9e:	4611      	mov	r1, r2
 800bea0:	602b      	str	r3, [r5, #0]
 800bea2:	f7f8 f86f 	bl	8003f84 <_fstat>
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	d102      	bne.n	800beb0 <_fstat_r+0x1c>
 800beaa:	682b      	ldr	r3, [r5, #0]
 800beac:	b103      	cbz	r3, 800beb0 <_fstat_r+0x1c>
 800beae:	6023      	str	r3, [r4, #0]
 800beb0:	bd38      	pop	{r3, r4, r5, pc}
 800beb2:	bf00      	nop
 800beb4:	20000838 	.word	0x20000838

0800beb8 <_isatty_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d06      	ldr	r5, [pc, #24]	@ (800bed4 <_isatty_r+0x1c>)
 800bebc:	2300      	movs	r3, #0
 800bebe:	4604      	mov	r4, r0
 800bec0:	4608      	mov	r0, r1
 800bec2:	602b      	str	r3, [r5, #0]
 800bec4:	f7f8 f86e 	bl	8003fa4 <_isatty>
 800bec8:	1c43      	adds	r3, r0, #1
 800beca:	d102      	bne.n	800bed2 <_isatty_r+0x1a>
 800becc:	682b      	ldr	r3, [r5, #0]
 800bece:	b103      	cbz	r3, 800bed2 <_isatty_r+0x1a>
 800bed0:	6023      	str	r3, [r4, #0]
 800bed2:	bd38      	pop	{r3, r4, r5, pc}
 800bed4:	20000838 	.word	0x20000838

0800bed8 <_sbrk_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d06      	ldr	r5, [pc, #24]	@ (800bef4 <_sbrk_r+0x1c>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	602b      	str	r3, [r5, #0]
 800bee4:	f7f8 f876 	bl	8003fd4 <_sbrk>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_sbrk_r+0x1a>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_sbrk_r+0x1a>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	20000838 	.word	0x20000838

0800bef8 <memcpy>:
 800bef8:	440a      	add	r2, r1
 800befa:	4291      	cmp	r1, r2
 800befc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf00:	d100      	bne.n	800bf04 <memcpy+0xc>
 800bf02:	4770      	bx	lr
 800bf04:	b510      	push	{r4, lr}
 800bf06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf0e:	4291      	cmp	r1, r2
 800bf10:	d1f9      	bne.n	800bf06 <memcpy+0xe>
 800bf12:	bd10      	pop	{r4, pc}

0800bf14 <__assert_func>:
 800bf14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf16:	4614      	mov	r4, r2
 800bf18:	461a      	mov	r2, r3
 800bf1a:	4b09      	ldr	r3, [pc, #36]	@ (800bf40 <__assert_func+0x2c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4605      	mov	r5, r0
 800bf20:	68d8      	ldr	r0, [r3, #12]
 800bf22:	b14c      	cbz	r4, 800bf38 <__assert_func+0x24>
 800bf24:	4b07      	ldr	r3, [pc, #28]	@ (800bf44 <__assert_func+0x30>)
 800bf26:	9100      	str	r1, [sp, #0]
 800bf28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf2c:	4906      	ldr	r1, [pc, #24]	@ (800bf48 <__assert_func+0x34>)
 800bf2e:	462b      	mov	r3, r5
 800bf30:	f000 f842 	bl	800bfb8 <fiprintf>
 800bf34:	f000 f852 	bl	800bfdc <abort>
 800bf38:	4b04      	ldr	r3, [pc, #16]	@ (800bf4c <__assert_func+0x38>)
 800bf3a:	461c      	mov	r4, r3
 800bf3c:	e7f3      	b.n	800bf26 <__assert_func+0x12>
 800bf3e:	bf00      	nop
 800bf40:	20000030 	.word	0x20000030
 800bf44:	0800c7d9 	.word	0x0800c7d9
 800bf48:	0800c7e6 	.word	0x0800c7e6
 800bf4c:	0800c814 	.word	0x0800c814

0800bf50 <_calloc_r>:
 800bf50:	b570      	push	{r4, r5, r6, lr}
 800bf52:	fba1 5402 	umull	r5, r4, r1, r2
 800bf56:	b934      	cbnz	r4, 800bf66 <_calloc_r+0x16>
 800bf58:	4629      	mov	r1, r5
 800bf5a:	f7ff f945 	bl	800b1e8 <_malloc_r>
 800bf5e:	4606      	mov	r6, r0
 800bf60:	b928      	cbnz	r0, 800bf6e <_calloc_r+0x1e>
 800bf62:	4630      	mov	r0, r6
 800bf64:	bd70      	pop	{r4, r5, r6, pc}
 800bf66:	220c      	movs	r2, #12
 800bf68:	6002      	str	r2, [r0, #0]
 800bf6a:	2600      	movs	r6, #0
 800bf6c:	e7f9      	b.n	800bf62 <_calloc_r+0x12>
 800bf6e:	462a      	mov	r2, r5
 800bf70:	4621      	mov	r1, r4
 800bf72:	f7fe f9ed 	bl	800a350 <memset>
 800bf76:	e7f4      	b.n	800bf62 <_calloc_r+0x12>

0800bf78 <__ascii_mbtowc>:
 800bf78:	b082      	sub	sp, #8
 800bf7a:	b901      	cbnz	r1, 800bf7e <__ascii_mbtowc+0x6>
 800bf7c:	a901      	add	r1, sp, #4
 800bf7e:	b142      	cbz	r2, 800bf92 <__ascii_mbtowc+0x1a>
 800bf80:	b14b      	cbz	r3, 800bf96 <__ascii_mbtowc+0x1e>
 800bf82:	7813      	ldrb	r3, [r2, #0]
 800bf84:	600b      	str	r3, [r1, #0]
 800bf86:	7812      	ldrb	r2, [r2, #0]
 800bf88:	1e10      	subs	r0, r2, #0
 800bf8a:	bf18      	it	ne
 800bf8c:	2001      	movne	r0, #1
 800bf8e:	b002      	add	sp, #8
 800bf90:	4770      	bx	lr
 800bf92:	4610      	mov	r0, r2
 800bf94:	e7fb      	b.n	800bf8e <__ascii_mbtowc+0x16>
 800bf96:	f06f 0001 	mvn.w	r0, #1
 800bf9a:	e7f8      	b.n	800bf8e <__ascii_mbtowc+0x16>

0800bf9c <__ascii_wctomb>:
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	4608      	mov	r0, r1
 800bfa0:	b141      	cbz	r1, 800bfb4 <__ascii_wctomb+0x18>
 800bfa2:	2aff      	cmp	r2, #255	@ 0xff
 800bfa4:	d904      	bls.n	800bfb0 <__ascii_wctomb+0x14>
 800bfa6:	228a      	movs	r2, #138	@ 0x8a
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800bfae:	4770      	bx	lr
 800bfb0:	700a      	strb	r2, [r1, #0]
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	4770      	bx	lr
	...

0800bfb8 <fiprintf>:
 800bfb8:	b40e      	push	{r1, r2, r3}
 800bfba:	b503      	push	{r0, r1, lr}
 800bfbc:	4601      	mov	r1, r0
 800bfbe:	ab03      	add	r3, sp, #12
 800bfc0:	4805      	ldr	r0, [pc, #20]	@ (800bfd8 <fiprintf+0x20>)
 800bfc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc6:	6800      	ldr	r0, [r0, #0]
 800bfc8:	9301      	str	r3, [sp, #4]
 800bfca:	f7ff fd3d 	bl	800ba48 <_vfiprintf_r>
 800bfce:	b002      	add	sp, #8
 800bfd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfd4:	b003      	add	sp, #12
 800bfd6:	4770      	bx	lr
 800bfd8:	20000030 	.word	0x20000030

0800bfdc <abort>:
 800bfdc:	b508      	push	{r3, lr}
 800bfde:	2006      	movs	r0, #6
 800bfe0:	f000 f82c 	bl	800c03c <raise>
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	f7f7 ff99 	bl	8003f1c <_exit>

0800bfea <_raise_r>:
 800bfea:	291f      	cmp	r1, #31
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4605      	mov	r5, r0
 800bff0:	460c      	mov	r4, r1
 800bff2:	d904      	bls.n	800bffe <_raise_r+0x14>
 800bff4:	2316      	movs	r3, #22
 800bff6:	6003      	str	r3, [r0, #0]
 800bff8:	f04f 30ff 	mov.w	r0, #4294967295
 800bffc:	bd38      	pop	{r3, r4, r5, pc}
 800bffe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c000:	b112      	cbz	r2, 800c008 <_raise_r+0x1e>
 800c002:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c006:	b94b      	cbnz	r3, 800c01c <_raise_r+0x32>
 800c008:	4628      	mov	r0, r5
 800c00a:	f000 f831 	bl	800c070 <_getpid_r>
 800c00e:	4622      	mov	r2, r4
 800c010:	4601      	mov	r1, r0
 800c012:	4628      	mov	r0, r5
 800c014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c018:	f000 b818 	b.w	800c04c <_kill_r>
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d00a      	beq.n	800c036 <_raise_r+0x4c>
 800c020:	1c59      	adds	r1, r3, #1
 800c022:	d103      	bne.n	800c02c <_raise_r+0x42>
 800c024:	2316      	movs	r3, #22
 800c026:	6003      	str	r3, [r0, #0]
 800c028:	2001      	movs	r0, #1
 800c02a:	e7e7      	b.n	800bffc <_raise_r+0x12>
 800c02c:	2100      	movs	r1, #0
 800c02e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c032:	4620      	mov	r0, r4
 800c034:	4798      	blx	r3
 800c036:	2000      	movs	r0, #0
 800c038:	e7e0      	b.n	800bffc <_raise_r+0x12>
	...

0800c03c <raise>:
 800c03c:	4b02      	ldr	r3, [pc, #8]	@ (800c048 <raise+0xc>)
 800c03e:	4601      	mov	r1, r0
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	f7ff bfd2 	b.w	800bfea <_raise_r>
 800c046:	bf00      	nop
 800c048:	20000030 	.word	0x20000030

0800c04c <_kill_r>:
 800c04c:	b538      	push	{r3, r4, r5, lr}
 800c04e:	4d07      	ldr	r5, [pc, #28]	@ (800c06c <_kill_r+0x20>)
 800c050:	2300      	movs	r3, #0
 800c052:	4604      	mov	r4, r0
 800c054:	4608      	mov	r0, r1
 800c056:	4611      	mov	r1, r2
 800c058:	602b      	str	r3, [r5, #0]
 800c05a:	f7f7 ff4f 	bl	8003efc <_kill>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d102      	bne.n	800c068 <_kill_r+0x1c>
 800c062:	682b      	ldr	r3, [r5, #0]
 800c064:	b103      	cbz	r3, 800c068 <_kill_r+0x1c>
 800c066:	6023      	str	r3, [r4, #0]
 800c068:	bd38      	pop	{r3, r4, r5, pc}
 800c06a:	bf00      	nop
 800c06c:	20000838 	.word	0x20000838

0800c070 <_getpid_r>:
 800c070:	f7f7 bf3c 	b.w	8003eec <_getpid>

0800c074 <_init>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	bf00      	nop
 800c078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c07a:	bc08      	pop	{r3}
 800c07c:	469e      	mov	lr, r3
 800c07e:	4770      	bx	lr

0800c080 <_fini>:
 800c080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c082:	bf00      	nop
 800c084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c086:	bc08      	pop	{r3}
 800c088:	469e      	mov	lr, r3
 800c08a:	4770      	bx	lr
